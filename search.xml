<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>博客文章以及Github仓库引导</title>
    <url>/OXygenPanda.github.io/2020/11/20/top/</url>
    <content><![CDATA[<h1 id="博客文章引导"><a href="#博客文章引导" class="headerlink" title="博客文章引导"></a>博客文章引导</h1><p align="left">
<a href="https://oxygenpanda.github.io/" target="_blank"><img alt="Website" src="https://img.shields.io/badge/博客-劳振煜的知識倉儲-faf2f2.svg?style=flat-square&logo=Blogger"></a>
</p>

<p>我的博客, 即劳振煜的知識倉儲, 也就是您当前访问的博客. </p>
<p>博客是基于 Hexo 的静态博客, 部署于我的 Github 上.</p>
<p>该博客主要用来记录我在学习以及未来工作中的所感所悟. 留作记录以便自己在未来温故或帮助到正在看博客的你.</p>
<p>博客的内容区别于 Github 的内容, 主要是博客将会记录完整的有体系的内容, 而 Github 上的各个仓库主要是用于记录学习笔记与实验, 自己造轮子, 学习他人的开源项目.</p>
<hr>
<p>C++</p>
<p>STL</p>
<p>数据结构</p>
<p>计算机网络</p>
<left>
<a href="https://oxygenpanda.github.io/OXygenPanda.github.io/2020/11/23/HugeFour/Network/Deep_into_Network/" target="_blank"><img src="https://img.shields.io/badge/文章-计算机网络_韩立刚老师-faf2f2.svg?style=flat-square&logo=Instapaper"></a>
</left>

<left>
<a href="https://oxygenpanda.github.io/OXygenPanda.github.io/2020/10/26/HugeFour/Network/TCP/" target="_blank"><img src="https://img.shields.io/badge/文章-计算机网络 TCP-faf2f2.svg?style=flat-square&logo=Instapaper"></a>
</left>

<p>操作系统</p>
<left>
<a href="https://oxygenpanda.github.io/OXygenPanda.github.io/2020/11/08/HugeFour/OperatingSystem/QingHua/Deep_into_OperatingSystem_all/" target="_blank"><img src="https://img.shields.io/badge/文章-深入理解操作系统-faf2f2.svg?style=flat-square&logo=Instapaper"></a>
</left>

<p>设计模式</p>
<p>Leetcode</p>
<h1 id="Github仓库引导"><a href="#Github仓库引导" class="headerlink" title="Github仓库引导"></a>Github仓库引导</h1><left>
<a href="https://www.github.com/OXygenPanda" target="_blank"><img src="https://img.shields.io/badge/Github-@劳振煜-f3e1e1.svg?style=flat-square&logo=GitHub"></a>
</left>

<p>我的Github, 也就是上方链接. 你可以搜索 OXygenPanda 访问.</p>
<p>虽然没有很多 star, 但是仍然坚持学习, 坚持记录, 坚持分享.</p>
<hr>
<p>计算机网络课程学习 - 韩立刚老师    </p>
<blockquote>
<p>  记录计算机网络课程学习的笔记</p>
</blockquote>
<left>
<a href="https://github.com/OXygenPanda/Deep_into_Network" target="_blank"><img src="https://img.shields.io/badge/Github-@Deep_into_Network-f3e1e1.svg?style=flat-square&logo=GitHub"></a>
</left>
深入理解操作系统课程学习 - 清华大学

<blockquote>
<p>  记录清华大学深入理解操作系统课程学习的笔记</p>
</blockquote>
<left>
<a href="https://github.com/OXygenPanda/Deep_into_OperatingSystem" target="_blank"><img src="https://img.shields.io/badge/Github-@Deep_into_OperatingSystem-f3e1e1.svg?style=flat-square&logo=GitHub"></a>
</left>



]]></content>
  </entry>
  <entry>
    <title>归并排序</title>
    <url>/OXygenPanda.github.io/2021/01/14/HugeFour/DataStructrues/sort/merge/</url>
    <content><![CDATA[<h1 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><p><strong>名称 :</strong> 归并排序</p>
<p><strong>性质 :</strong> 稳定的排序算法</p>
<p>**作者 : ** 冯诺依曼</p>
<p><strong>用途 :</strong> 分治思路的排序</p>
<p>**复杂度 : ** 时间 O(nlogn) 空间 O(n)</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/************************************************************************</span></span><br><span class="line"><span class="comment">    &gt; File Name: merge_sort.cpp</span></span><br><span class="line"><span class="comment">    &gt; Author: Lao Zhenyu</span></span><br><span class="line"><span class="comment">    &gt; Mail: LaoZhenyu_961112@163.com</span></span><br><span class="line"><span class="comment">    &gt; Created Time: 四  1/14 20:38:22 2021</span></span><br><span class="line"><span class="comment">************************************************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;arr, <span class="keyword">int</span> left, <span class="keyword">int</span> mid, <span class="keyword">int</span> right)</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">L</span><span class="params">(mid - left + <span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">R</span><span class="params">(right - mid)</span></span>;</span><br><span class="line">    <span class="keyword">int</span> i,j,k;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; L.size(); ++ i)&#123;</span><br><span class="line">        L[i] = arr[left + i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; R.size(); ++ j)&#123;</span><br><span class="line">        R[j] = arr[mid + <span class="number">1</span> + j];</span><br><span class="line">    &#125;</span><br><span class="line">    i = <span class="number">0</span>;</span><br><span class="line">    j = <span class="number">0</span>;</span><br><span class="line">    k = left;</span><br><span class="line">    <span class="keyword">while</span>(i &lt; L.size() &amp;&amp; j &lt; R.size())&#123;</span><br><span class="line">        <span class="keyword">if</span>(L[i] &gt;= R[j])&#123;</span><br><span class="line">            arr[k] = R[j];</span><br><span class="line">            j++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            arr[k] = L[i];</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        k++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(i &lt; L.size())&#123;</span><br><span class="line">        arr[k] = L[i];</span><br><span class="line">        k++;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(j &lt; R.size())&#123;</span><br><span class="line">        arr[k] = R[j];</span><br><span class="line">        k++;</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;arr, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(left &lt; right)&#123;</span><br><span class="line">        <span class="keyword">int</span> mid = left + ((right - left) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">        mergeSort(arr, left, mid);</span><br><span class="line">        mergeSort(arr, mid + <span class="number">1</span>, right);</span><br><span class="line">        merge(arr, left, mid, right);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; arr&#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">7</span>,<span class="number">8</span>&#125;;</span><br><span class="line">    mergeSort(arr,<span class="number">0</span>, arr.size() - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> n : arr)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; n &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>排序算法</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>AVL树</title>
    <url>/OXygenPanda.github.io/2021/01/07/HugeFour/DataStructrues/tree/AVLTree/</url>
    <content><![CDATA[<h1 id="AVL树"><a href="#AVL树" class="headerlink" title="AVL树"></a>AVL树</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><p><strong>名称 :</strong> AVL树</p>
<p><strong>发明者 :</strong> </p>
<p>G. M. Adelson-Velsky</p>
<p>E.M. Landis</p>
<p><strong>年代 :</strong> 1962年(58岁)</p>
<p><strong>优点 :</strong></p>
<p>由于对每个节点的左右子树的树高做了限制, 所以整棵树不会退化成一个链表</p>
<p>**学习重点 : **</p>
<ol>
<li>平衡二叉排序树,本质上也是二叉排序树, 所以拥有二叉排序树的所有性质</li>
<li>平衡二叉排序树的学习重点, 在于平衡条件以及平衡调整的相关学习</li>
</ol>
<p><strong>性质 :</strong></p>
<ol>
<li>平衡条件 : | H(left) - H(right) | ≤ 1</li>
</ol>
<p><strong>思考 :</strong> </p>
<p>​    高度为 H 的树, 所包含节点的范围是?</p>
<p>​    BinarySearchTree : H ≤ size ≤ 2^H - 1</p>
<p>​    AVLTree : low(H-2) + low(H-1) + 1 ≤ size ≤ 2^H - 1 (low(H) 是 H 高度的二叉树的最少节点数) 左边等于 1.5^H</p>
<p><strong>操作</strong>SSS</p>
<p>AVL树 - 左旋</p>
<center><img src="https://i.loli.net/2021/01/08/3XlUQLIxHNKTCt5.png" style="zoom:33%;">
<center>左旋前</center>
<center><img src="https://i.loli.net/2021/01/08/IxZvkmGhcprAE42.png" style="zoom:33%;">
<center>左旋后</center>
AVL树 - 右旋
<center><img src="https://i.loli.net/2021/01/08/oNYgrvHhOSkb9BK.png" style="zoom:33%;">
<center>右旋前</center>
<center><img src="https://i.loli.net/2021/01/08/oNYgrvHhOSkb9BK.png" style="zoom:33%;">
<center>右旋后</center>

<h3 id="失衡类型"><a href="#失衡类型" class="headerlink" title="失衡类型"></a>失衡类型</h3><p>h(1,2,3,4) 分别代表左孩子的左子树个高,左孩子的右子树高,右孩子的左子树高和右孩子的右子树高</p>
<p>LL类型:左子树的左孩子更高</p>
<p>满足条件 : h1 = max(h3, h4) + 2 = h2 + 1</p>
<p>调整方案 : K1 右旋</p>
<p>LR类型:左子树的右孩子更高</p>
<p>满足条件 : max(h2, h3) = h4 = h1</p>
<p>调整方案 : 小左旋, 大右旋(左孩子左旋, 根节点右旋)</p>
<p>RL类型:右子树的左孩子更高</p>
<p>调整方案 : 小右旋, 大左旋</p>
<p>RR类型:右子树的右孩子更高</p>
<p>调整方案 : K1 左旋</p>
<h3 id="平衡调整策略"><a href="#平衡调整策略" class="headerlink" title="平衡调整策略"></a>平衡调整策略</h3><ol>
<li>发生在回溯阶段的, 第一个失衡节点处</li>
<li>理解平衡调整策略的关键在于 : 分析清楚四种情况下, ABCD四棵子树树高的关系</li>
<li>LL, 大右旋</li>
<li>LR, 先小左旋, 再大右旋</li>
<li>RL, 先小右旋, 再大左旋</li>
<li>RR, 大左旋</li>
</ol>
<h3 id="代码关键点"><a href="#代码关键点" class="headerlink" title="代码关键点"></a>代码关键点</h3><ol>
<li>插入和删除以后, 注意调整树高字段, 先调低的root, 再调高的tmp</li>
<li>引入了NIL节点, 代替了 NULL和nullptr, NULL不可访问资源, NIL是一个实际节点, 可以访问资源(h,lchild,rchild)</li>
</ol>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> L(n) (n-&gt;lchild)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R(n) (n-&gt;rchild)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> H(n) (n-&gt;h)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">	<span class="keyword">int</span> key,h;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">lchild</span>, *<span class="title">rchild</span>;</span></span><br><span class="line">&#125;Node;</span><br><span class="line"></span><br><span class="line"><span class="comment">//虚拟空节点, 为红黑树做准备的节点</span></span><br><span class="line">Node __NIL;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NIL (&amp;__NIL)</span></span><br><span class="line">__attribute__((constructor))</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init_NIL</span><span class="params">()</span></span>&#123;</span><br><span class="line">	NIL-&gt;key = <span class="number">0</span>, NIL-&gt;h = <span class="number">0</span>;</span><br><span class="line">	NIL-&gt;lchild = NIL-&gt;rchild = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//优先初始化上面这一段代码</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * AVL树的若干操作:</span></span><br><span class="line"><span class="comment"> * 1. 创建节点</span></span><br><span class="line"><span class="comment"> * 2. 销毁节点</span></span><br><span class="line"><span class="comment"> * 3. 插入</span></span><br><span class="line"><span class="comment"> * 4. 删除</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function">Node *<span class="title">getNewNode</span><span class="params">(<span class="keyword">int</span> key)</span></span>&#123;</span><br><span class="line">	Node * tmp = (Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">	tmp-&gt;key = key;</span><br><span class="line">	tmp-&gt;h = <span class="number">1</span>;</span><br><span class="line">	tmp-&gt;lchild = NIL, tmp-&gt;rchild = NIL;</span><br><span class="line">	<span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">(Node * root)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(root == NIL)	<span class="keyword">return</span>;</span><br><span class="line">	clear(root-&gt;lchild);</span><br><span class="line">	clear(root-&gt;rchild);</span><br><span class="line">	<span class="built_in">free</span>(root);</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//调整高度</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update_height</span><span class="params">(Node * root)</span></span>&#123;</span><br><span class="line">	root-&gt;h = (H(L(root)) &gt; H(R(root)) ? H(L(root)) : H(R(root))) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//左旋</span></span><br><span class="line"><span class="function">Node * <span class="title">left_rotate</span><span class="params">(Node * root)</span></span>&#123;</span><br><span class="line">	Node * tmp = root-&gt;rchild; <span class="comment">//新根节点</span></span><br><span class="line">	root-&gt;rchild = tmp-&gt;lchild; <span class="comment">//新左挂旧右</span></span><br><span class="line">	tmp-&gt;lchild = root; <span class="comment">//旧根挂新左</span></span><br><span class="line">	update_height(root);</span><br><span class="line">	update_height(tmp);</span><br><span class="line">	<span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//右旋</span></span><br><span class="line"><span class="function">Node * <span class="title">right_rotate</span><span class="params">(Node * root)</span></span>&#123;</span><br><span class="line">	Node * tmp = root-&gt;lchild; <span class="comment">//新根</span></span><br><span class="line">	root-&gt;lchild = tmp-&gt;rchild; <span class="comment">//新右成旧左</span></span><br><span class="line">	tmp-&gt;rchild = root; <span class="comment">//旧根成新左</span></span><br><span class="line">	update_height(root);</span><br><span class="line">	update_height(tmp);</span><br><span class="line">	<span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//调整</span></span><br><span class="line"><span class="function">Node * <span class="title">maintain</span><span class="params">(Node * root)</span></span>&#123;</span><br><span class="line">	<span class="comment">//平衡调整代码</span></span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">abs</span>(H(L(root)) - H(R(root))) &lt;= <span class="number">1</span>)	<span class="keyword">return</span> root;</span><br><span class="line">	<span class="keyword">if</span>(root-&gt;lchild-&gt;h &gt; root-&gt;rchild-&gt;h) &#123;</span><br><span class="line">		<span class="comment">//LR先小左旋</span></span><br><span class="line">		<span class="keyword">if</span>(root-&gt;lchild-&gt;lchild-&gt;h &lt; root-&gt;lchild-&gt;rchild-&gt;h)</span><br><span class="line">			root-&gt;lchild = left_rotate(root-&gt;lchild);</span><br><span class="line">		<span class="comment">//LL大右旋</span></span><br><span class="line">		root = right_rotate(root);</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="comment">//RL先小右旋</span></span><br><span class="line">		<span class="keyword">if</span>(root-&gt;rchild-&gt;rchild-&gt;h &lt; root-&gt;rchild-&gt;lchild-&gt;h)</span><br><span class="line">			root-&gt;rchild = right_rotate(root-&gt;rchild);</span><br><span class="line">		<span class="comment">//RR大左旋</span></span><br><span class="line">		root = left_rotate(root);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Node * <span class="title">insert</span><span class="params">(Node * root, <span class="keyword">int</span> key)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(root == NIL)	<span class="keyword">return</span> getNewNode(key);</span><br><span class="line">	<span class="keyword">if</span>(root-&gt;key == key)	<span class="keyword">return</span> root;</span><br><span class="line">	<span class="keyword">if</span>(key &lt; root-&gt;key)	root-&gt;lchild = insert(root-&gt;lchild, key);</span><br><span class="line">	<span class="keyword">if</span>(key &gt; root-&gt;key)	root-&gt;rchild = insert(root-&gt;rchild, key);</span><br><span class="line">	update_height(root);</span><br><span class="line">	<span class="keyword">return</span> maintain(root);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//寻找前驱节点,默认传入度为2的节点,前父节点有左子树</span></span><br><span class="line"><span class="function">Node * <span class="title">predeccessor</span><span class="params">(Node * root)</span></span>&#123;</span><br><span class="line">	Node * tmp = root-&gt;lchild;</span><br><span class="line">	<span class="keyword">while</span>(tmp-&gt;rchild)	tmp = tmp-&gt;rchild;</span><br><span class="line">	<span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Node * <span class="title">erase</span><span class="params">(Node * root, <span class="keyword">int</span> key)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(root == NIL)	<span class="keyword">return</span> NIL;</span><br><span class="line">	<span class="keyword">if</span>(key &lt; root-&gt;key) &#123;</span><br><span class="line">		root-&gt;lchild = erase(root-&gt;lchild, key);</span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span>(key &gt; root-&gt;key) &#123;</span><br><span class="line">		root-&gt;rchild = erase(root-&gt;rchild, key);</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123; <span class="comment">//删除当前节点</span></span><br><span class="line">		<span class="keyword">if</span>(root-&gt;rchild == NIL || root-&gt;lchild == NIL)&#123;</span><br><span class="line">			Node * tmp = root-&gt;rchild != NIL ? root-&gt;rchild : root-&gt;lchild;</span><br><span class="line">			<span class="built_in">free</span>(root);</span><br><span class="line">			<span class="keyword">return</span> tmp;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123; <span class="comment">// 删除度为2的节点</span></span><br><span class="line">			Node * tmp = predeccessor(root);</span><br><span class="line">			root-&gt;key = tmp-&gt;key;</span><br><span class="line">			root-&gt;lchild = erase(root-&gt;lchild, root-&gt;key);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	update_height(root);</span><br><span class="line">	<span class="keyword">return</span> maintain(root);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(Node * root)</span></span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;(%d[%d], %d, %d)\n&quot;</span>,</span><br><span class="line">			root-&gt;key, root-&gt;h,</span><br><span class="line">			root-&gt;lchild-&gt;key,</span><br><span class="line">			root-&gt;rchild-&gt;key</span><br><span class="line">			);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">(Node * root)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(root == NIL)	<span class="keyword">return</span>;</span><br><span class="line">	print(root);</span><br><span class="line">	output(root-&gt;lchild);</span><br><span class="line">	output(root-&gt;rchild);</span><br><span class="line">	<span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> ** argv)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> op, val;</span><br><span class="line">	Node* root = NIL;</span><br><span class="line">	<span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;op, &amp;val))&#123;</span><br><span class="line">		<span class="keyword">switch</span>(op)&#123;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">0</span>: root = erase(root, val); <span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">1</span>: root = insert(root, val); <span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		output(root);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;------------\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

</center></center></center></center>]]></content>
      <categories>
        <category>tree</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>二叉搜索树</title>
    <url>/OXygenPanda.github.io/2021/01/06/HugeFour/DataStructrues/tree/BinarySearchTree/</url>
    <content><![CDATA[<h1 id="二叉排序树"><a href="#二叉排序树" class="headerlink" title="二叉排序树"></a>二叉排序树</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><p><strong>名称 :</strong> 二叉排序树, 二叉搜索树</p>
<p><strong>性质 :</strong> </p>
<ol>
<li>左子树 &lt; 根节点</li>
<li>右子树 &gt; 根节点</li>
</ol>
<p><strong>用途 :</strong> 解决与排名有关的检索需求</p>
<p><strong>插入过程 :</strong> 根据插入节点值和根节点比较, 选择左子树或右子树继续比较, 最终放在叶子节点上</p>
<p><strong>删除过程 :</strong></p>
<ol>
<li><p>删除叶子节点</p>
<p> 直接删除</p>
</li>
<li><p>删除度为1的节点</p>
<p> 把孩子交给祖父节点</p>
</li>
<li><p>删除度为2的节点</p>
<p> 中序遍历 : 10 17 20 28 29 30 32</p>
<p> 性质 : 待删除节点的前驱无右子树, 后继无左子树, 因此前驱后继一定不是度为2的节点</p>
<p> 将前驱或后继直接覆盖待删除节点后, 问题转换为删除叶子节点或者是度为1的节点</p>
</li>
</ol>
<p><strong>优化 :</strong></p>
<ol>
<li>删除掉处理度为0的代码逻辑，不影响代码整体功能</li>
<li>解决排名相关的检索需求，修改二叉搜索树的定义，增加size字段，记录每棵树的节点数目<ol>
<li><code>K == LS - 1</code> : 根节点就是排名第k的元素</li>
<li><code>k &lt;= LS</code> : 排名第k位的元素在左子树中</li>
<li><code>k &gt; LS</code> : $search_k(root-&gt;rchild, k - LS - 1)$</li>
</ol>
</li>
<li>解决 top-k 问题，输出前k位的元素(找到小于第k位的所有元素)<ol>
<li>根节点就是第k位元素, 输出左子树所有节点和根节点值</li>
<li>第k位元素在左子树中, 前k位元素全部在左子树中</li>
<li>第k位元素在右子树中, 说明左子树中的所有节点和根节点都是前k位元素 </li>
</ol>
</li>
<li>二叉排序树和快速排序的关系<ol>
<li>二叉排序树是快速排序的逻辑结构</li>
<li>思考1: 快速排序算法的时间复杂度和二叉排序树建树时间复杂度之间的关系</li>
<li>思考2：快速选择算法和二叉排序树的关系</li>
</ol>
</li>
</ol>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> KEY(n)    (n ? n-&gt;key : 0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SIZE(n)   (n ? n-&gt;size : 0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> L(n)      (n ? n-&gt;lchild : 0)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">	<span class="keyword">int</span> key, size;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">lchild</span>, *<span class="title">rchild</span>;</span></span><br><span class="line">&#125;Node;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 二叉搜索树的若干操作:</span></span><br><span class="line"><span class="comment"> * 1. 创建节点</span></span><br><span class="line"><span class="comment"> * 2. 销毁节点</span></span><br><span class="line"><span class="comment"> * 3. 查找</span></span><br><span class="line"><span class="comment"> * 4. 插入</span></span><br><span class="line"><span class="comment"> * 5. 删除</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 优化1: 将删除度为0和度为1的节点的代码合并</span></span><br><span class="line"><span class="comment"> * 优化2: 实现查找第k位的元素</span></span><br><span class="line"><span class="comment"> * 优化3: 实现输出前k位的元素(TOP-K)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//更新树高</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update_size</span><span class="params">(Node * root)</span></span>&#123;</span><br><span class="line">	root-&gt;size = SIZE(root-&gt;lchild) + SIZE(root-&gt;rchild) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建节点</span></span><br><span class="line"><span class="function">Node * <span class="title">getNewNode</span><span class="params">(<span class="keyword">int</span> key)</span></span>&#123;</span><br><span class="line">	Node *p = (Node *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">	p-&gt;key = key;</span><br><span class="line">	p-&gt;size = <span class="number">1</span>;</span><br><span class="line">	p-&gt;lchild = <span class="literal">nullptr</span>, p-&gt;rchild = <span class="literal">nullptr</span>;</span><br><span class="line">	<span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//销毁树</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">(Node * root)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(root == <span class="literal">nullptr</span>)	<span class="keyword">return</span>;</span><br><span class="line">	clear(root-&gt;lchild);</span><br><span class="line">	clear(root-&gt;rchild);</span><br><span class="line">	<span class="built_in">free</span>(root);</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查找</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">search</span><span class="params">(Node* root, <span class="keyword">int</span> val)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(root == <span class="literal">nullptr</span>)		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span>(root-&gt;key == val)	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span>(root-&gt;key &gt; val)		<span class="keyword">return</span> search(root-&gt;lchild, val);</span><br><span class="line">	<span class="keyword">if</span>(root-&gt;key &lt; val)	    <span class="keyword">return</span> search(root-&gt;rchild, val);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查找第k大的元素</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">search_k</span><span class="params">(Node * root, <span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(root == <span class="literal">nullptr</span>)	<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">if</span>(SIZE(L(root)) == k - <span class="number">1</span>)	<span class="keyword">return</span> root-&gt;key;</span><br><span class="line">	<span class="keyword">if</span>(k &lt;= SIZE(L(root)))	&#123;</span><br><span class="line">		<span class="keyword">return</span> search_k(root-&gt;lchild, k);</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> search_k(root-&gt;rchild, k - SIZE(L(root)) - <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//插入</span></span><br><span class="line"><span class="function">Node * <span class="title">insert</span><span class="params">(Node * root, <span class="keyword">int</span> val)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(root == <span class="literal">nullptr</span>)	    <span class="keyword">return</span> getNewNode(val);</span><br><span class="line">	<span class="keyword">if</span>(root-&gt;key == val)	<span class="keyword">return</span> root;</span><br><span class="line">	<span class="keyword">if</span>(val &lt; root-&gt;key)     root-&gt;lchild = insert(root-&gt;lchild, val);</span><br><span class="line">	<span class="keyword">if</span>(val &gt; root-&gt;key)     root-&gt;rchild = insert(root-&gt;rchild, val);</span><br><span class="line">	update_size(root);	</span><br><span class="line">	<span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//寻找前驱(默认父节点有左孩子)</span></span><br><span class="line"><span class="function">Node * <span class="title">predecessor</span><span class="params">(Node * root)</span></span>&#123;</span><br><span class="line">	Node * tmp = root-&gt;lchild;</span><br><span class="line">	<span class="keyword">while</span>(tmp-&gt;rchild != <span class="literal">nullptr</span>)	tmp = tmp-&gt;rchild;</span><br><span class="line">	<span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除节点</span></span><br><span class="line"><span class="function">Node * <span class="title">erase</span><span class="params">(Node * root, <span class="keyword">int</span> val)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(root == <span class="literal">nullptr</span>)	    <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">	<span class="keyword">if</span>(root-&gt;key &gt; val)</span><br><span class="line">		root-&gt;lchild = erase(root-&gt;lchild, val);</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(root-&gt;key &lt; val)</span><br><span class="line">		root-&gt;rchild = erase(root-&gt;rchild, val);</span><br><span class="line">	<span class="keyword">else</span> &#123; <span class="comment">//删除节点本身</span></span><br><span class="line">		   <span class="comment">//删除度为0的节点和度为1的节点操作相同 </span></span><br><span class="line">		<span class="keyword">if</span>(root-&gt;lchild == <span class="literal">nullptr</span> || root-&gt;rchild == <span class="literal">nullptr</span>)&#123;</span><br><span class="line">			Node * tmp = root-&gt;lchild ? root-&gt;lchild : root-&gt;rchild;</span><br><span class="line">			<span class="built_in">free</span>(root);</span><br><span class="line">			<span class="keyword">return</span> tmp;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123; <span class="comment">//删除度为2的节点</span></span><br><span class="line">			Node * tmp = predecessor(root);</span><br><span class="line">			root-&gt;key = tmp-&gt;key;</span><br><span class="line">			root-&gt;lchild = erase(root-&gt;lchild, tmp-&gt;key);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	update_size(root);</span><br><span class="line">	<span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出整棵树的所有节点 - 中序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">(Node * root)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(root == <span class="literal">nullptr</span>)	<span class="keyword">return</span>;</span><br><span class="line">	output(root-&gt;lchild);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;[%d, %d, %d, size : %d]\n&quot;</span>,KEY(root),KEY(root-&gt;lchild),KEY(root-&gt;rchild),SIZE(root));</span><br><span class="line">	output(root-&gt;rchild);</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出前k个节点</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">output_k</span><span class="params">(Node *root, <span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(k == <span class="number">0</span> || root == <span class="literal">nullptr</span>)	<span class="keyword">return</span>;</span><br><span class="line">	<span class="keyword">if</span>(k &lt;= SIZE(L(root)))&#123;</span><br><span class="line">		output_k(root-&gt;lchild, k);</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		output(root-&gt;lchild);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;[%d, %d, %d, size : %d]\n&quot;</span>,KEY(root),KEY(root-&gt;lchild),KEY(root-&gt;rchild),SIZE(root));</span><br><span class="line">		output_k(root-&gt;rchild, k - SIZE(L(root)) - <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> ** argv)</span></span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">int</span> op, val;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/* op :</span></span><br><span class="line"><span class="comment">	 * 0 查找</span></span><br><span class="line"><span class="comment">	 * 1 插入</span></span><br><span class="line"><span class="comment">	 * 2 删除</span></span><br><span class="line"><span class="comment">	 * 3 查找第k位的元素</span></span><br><span class="line"><span class="comment">	 * 4 输出前k位的元素</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	Node * root = <span class="literal">nullptr</span>;</span><br><span class="line">	<span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;op, &amp;val))&#123;</span><br><span class="line">		<span class="keyword">switch</span>(op)&#123;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">0</span>: <span class="built_in">printf</span>(<span class="string">&quot;search %d, result : %d\n&quot;</span>, val, search(root, val)); <span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">1</span>: root = insert(root, val); <span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">2</span>: root = erase(root, val); <span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">3</span>: <span class="built_in">printf</span>(<span class="string">&quot;search k %d, result : %d\n&quot;</span>,val, search_k(root, val)); <span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">4</span>: &#123;</span><br><span class="line">						<span class="built_in">printf</span>(<span class="string">&quot;output top-%d elements\n&quot;</span>,val);</span><br><span class="line">						output_k(root, val);</span><br><span class="line">						<span class="built_in">printf</span>(<span class="string">&quot;----------------\n&quot;</span>);</span><br><span class="line">					&#125; <span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(op != <span class="number">0</span> &amp;&amp; op != <span class="number">4</span>)&#123;</span><br><span class="line">			output(root);</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;----------------\n&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>tree</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>剑指 Offer 45. 把数组排成最小的数</title>
    <url>/OXygenPanda.github.io/2020/12/18/leetcode/offer/%E5%89%91%E6%8C%87Offer%2045/</url>
    <content><![CDATA[<h2 id="剑指-Offer-45-把数组排成最小的数"><a href="#剑指-Offer-45-把数组排成最小的数" class="headerlink" title="剑指 Offer 45. 把数组排成最小的数"></a>剑指 Offer 45. 把数组排成最小的数</h2><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p><a class="btn" href="https://leetcode-cn.com/problems/ba-shu-zu-pai-cheng-zui-xiao-de-shu-lcof/" title="leetcode链接">剑指 Offer 45. 把数组排成最小的数</a></p>
<p><strong>难度:</strong><font color="orange">中等</font></p>
<p><strong>描述</strong></p>
<p>输入一个非负整数数组，把数组里所有数字拼接起来排成一个数，打印能拼接出的所有数字中最小的一个。</p>
<a id="more"></a>

<p><strong>示例</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">输入: [<span class="number">10</span>,<span class="number">2</span>]</span><br><span class="line">输出: <span class="string">&quot;102&quot;</span></span><br><span class="line">    </span><br><span class="line">输入: [<span class="number">3</span>,<span class="number">30</span>,<span class="number">34</span>,<span class="number">5</span>,<span class="number">9</span>]</span><br><span class="line">输出: <span class="string">&quot;3033459&quot;</span></span><br><span class="line"></span><br><span class="line">限制:</span><br><span class="line"><span class="number">0</span> &lt; nums.length &lt;= <span class="number">100</span></span><br><span class="line">输出结果可能非常大，所以你需要返回一个字符串而不是整数</span><br><span class="line">拼接起来的数字可能会有前导 <span class="number">0</span>，最后结果不需要去掉前导 <span class="number">0</span></span><br></pre></td></tr></table></figure>



<h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>思路是, 因为每一个数字内的相对关系是不能改变的, 因此不能把数字拆分成各个数位做排序. 因此, 可以寻找数字排列先后的规律, 比如, <code>10</code> 和 <code>2</code> 两个数字可以组成 <code>102</code> 和 <code>210</code> , 但是 <code>102 &lt; 210</code> 因此, <code>10</code> 在前. 这就是一种排序规则. 可以写一个 lambda 表达式指导 <code>sort()</code> 按照刚刚模拟的方式来排序所有数字. 最后拼接到目标串中.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">minNumber</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; strs;</span><br><span class="line">        <span class="built_in">string</span> res;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> n : nums)</span><br><span class="line">            strs.push_back(to_string(n));</span><br><span class="line">        sort(strs.begin(),strs.end(),[](<span class="keyword">const</span> <span class="built_in">string</span> &amp; a, <span class="keyword">const</span> <span class="built_in">string</span> &amp; b)-&gt;<span class="keyword">bool</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> a+b &lt; b+a; <span class="comment">// 102 &lt; 210</span></span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> str : strs)</span><br><span class="line">            res += str;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
        <category>剑指 Offer 专题</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>剑指 Offer 29. 顺时针打印矩阵</title>
    <url>/OXygenPanda.github.io/2020/12/15/leetcode/offer/%E5%89%91%E6%8C%87Offer%2029/</url>
    <content><![CDATA[<h2 id="剑指-Offer-29-顺时针打印矩阵"><a href="#剑指-Offer-29-顺时针打印矩阵" class="headerlink" title="剑指 Offer 29. 顺时针打印矩阵"></a>剑指 Offer 29. 顺时针打印矩阵</h2><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p><a class="btn" href="https://leetcode-cn.com/problems/shun-shi-zhen-da-yin-ju-zhen-lcof/" title="leetcode链接">剑指 Offer 29. 顺时针打印矩阵</a></p>
<p><strong>难度:</strong><font color="green">简单</font></p>
<p><strong>描述</strong></p>
<p>输入一个矩阵，按照从外向里以顺时针的顺序依次打印出每一个数字。</p>
<a id="more"></a>

<p><strong>示例</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">输入：matrix = [[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],[<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]]</span><br><span class="line">输出：[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">    </span><br><span class="line">输入：matrix = [[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],[<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>],[<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>]]</span><br><span class="line">输出：[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">8</span>,<span class="number">12</span>,<span class="number">11</span>,<span class="number">10</span>,<span class="number">9</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>]</span><br><span class="line"></span><br><span class="line">限制:</span><br><span class="line"><span class="number">0</span> &lt;= matrix.length &lt;= <span class="number">100</span></span><br><span class="line"><span class="number">0</span> &lt;= matrix[i].length &lt;= <span class="number">100</span></span><br></pre></td></tr></table></figure>



<h3 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h3><p>第一种思路是模拟法, 模拟我们正常地顺时针行走, 提供一个方向数组, 提前判断下一步会不会超出边界, 如果超出, 那么就转向, 也就是改变 <code>directionIndex</code> 的值, 因为可能会从北回到东, 所以需要 <code>mod 4</code> .</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> direction[<span class="number">4</span>][<span class="number">2</span>] = &#123;&#123;<span class="number">0</span>,<span class="number">1</span>&#125;, &#123;<span class="number">1</span>,<span class="number">0</span>&#125;, &#123;<span class="number">0</span>,<span class="number">-1</span>&#125;, &#123;<span class="number">-1</span>,<span class="number">0</span>&#125;&#125;; <span class="comment">// 方向数组,东-南-西-北</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">spiralOrder</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; matrix)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(matrix.size() == <span class="number">0</span> || matrix[<span class="number">0</span>].size() == <span class="number">0</span>) <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">        <span class="keyword">int</span> row = matrix.size(), col = matrix[<span class="number">0</span>].size();</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt;&gt; <span class="title">visit</span><span class="params">(row, <span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt;(col, <span class="literal">false</span>))</span></span>;</span><br><span class="line">        <span class="keyword">int</span> total = row * col;</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">res</span><span class="params">(total)</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> rows = <span class="number">0</span>, cols = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> directionIndex = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; total ; ++ i)&#123;</span><br><span class="line">            res[i] = matrix[rows][cols];</span><br><span class="line">            visit[rows][cols] = <span class="literal">true</span>; <span class="comment">// 已经访问过</span></span><br><span class="line">            <span class="keyword">int</span> nextrow = rows + direction[directionIndex][<span class="number">0</span>]; <span class="comment">// 下一个横坐标</span></span><br><span class="line">            <span class="keyword">int</span> nextcol = cols + direction[directionIndex][<span class="number">1</span>]; <span class="comment">// 下一个纵坐标</span></span><br><span class="line">            <span class="comment">//判断下一个坐标是否合法或者是否访问过, 访问过就改变方向</span></span><br><span class="line">            <span class="keyword">if</span>(nextrow &lt; <span class="number">0</span> || nextrow &gt;= row || nextcol &lt; <span class="number">0</span> || nextcol &gt;= col || visit[nextrow][nextcol])</span><br><span class="line">                directionIndex = (directionIndex + <span class="number">1</span>) % <span class="number">4</span>;</span><br><span class="line">            rows += direction[directionIndex][<span class="number">0</span>];</span><br><span class="line">            cols += direction[directionIndex][<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h3 id="解法二"><a href="#解法二" class="headerlink" title="解法二"></a>解法二</h3><p>第二种思路是缩小边界法, 它一共是四个边界 <code>l</code> <code>r</code> <code>u</code> <code>d</code> 来表示, 当前 <code>left</code> <code>right</code> <code>up</code> <code>down</code> 四个边界.因为每一次都是沿着四条边移动, 而且每一次访问完一条边, 一定会有一条边界向内缩. 循环体里的 4 个 <code>if</code> 用于最终退出.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">spiralOrder</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; matrix)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(matrix.size() == <span class="number">0</span> || matrix[<span class="number">0</span>].size() == <span class="number">0</span>) <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">        <span class="keyword">int</span> l = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> r = matrix[<span class="number">0</span>].size() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> u = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> d = matrix.size() - <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = l ; i &lt;= r ; ++ i)  res.push_back(matrix[u][i]);</span><br><span class="line">            <span class="keyword">if</span>(++ u &gt; d)    <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = u ; j &lt;= d ; ++ j)  res.push_back(matrix[j][r]);</span><br><span class="line">            <span class="keyword">if</span>(-- r &lt; l)    <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = r ; i &gt;= l ; -- i)  res.push_back(matrix[d][i]);</span><br><span class="line">            <span class="keyword">if</span>(-- d &lt; u)    <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = d ; j &gt;= u ; -- j)  res.push_back(matrix[j][l]);</span><br><span class="line">            <span class="keyword">if</span>(++ l &gt; r)    <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Leetcode</category>
        <category>剑指 Offer 专题</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>内存管理</title>
    <url>/OXygenPanda.github.io/2020/12/11/C++/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<h1 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h1><p align="center">
<a href="https://oxygenpanda.github.io/" target="_blank"><img alt="Website" src="https://img.shields.io/badge/博客-劳振煜的知識倉儲-faf2f2.svg?style=flat-square&logo=Blogger"></a>
<a href="https://www.github.com/OXygenPanda" target="_blank"><img src="https://img.shields.io/badge/Github-@劳振煜-f3e1e1.svg?style=flat-square&logo=GitHub"></a>
<a href="https://i.loli.net/2020/11/11/SBZ2mFJGKLjUtTO.jpg" target="_blank"><img src="https://img.shields.io/badge/微信-@OXygen-f1d1d1.svg?style=flat-square&logo=WeChat"></a>

<blockquote>
<p>  内存管理是一个很深刻的话题, 对于初学者来说, 内存管理看不到摸不着, 我们常使用 new / delete 来管理我们的堆内存. 仅此而已.</p>
</blockquote>
</p><p>本文记录了侯捷老师内存管理课程的学习笔记以及部分自己写的代码.</p>
<p>目的是了解C++如何进行内存管理, 剖析源码, 能够设计自己的内存池.</p>
<h2 id="C-中内存管理工具"><a href="#C-中内存管理工具" class="headerlink" title="C++中内存管理工具"></a>C++中内存管理工具</h2><table>
<thead>
<tr>
<th>分配</th>
<th>释放</th>
<th>类型</th>
<th>是否可以重载</th>
</tr>
</thead>
<tbody><tr>
<td>malloc()</td>
<td>free()</td>
<td>C函数</td>
<td>不可以</td>
</tr>
<tr>
<td>new</td>
<td>delete</td>
<td>C++表达式</td>
<td>不可以</td>
</tr>
<tr>
<td>::operator new()</td>
<td>::operator delete()</td>
<td>C++函数</td>
<td>可以</td>
</tr>
<tr>
<td>allocator&lt;T&gt;::allocate()</td>
<td>allocator&lt;T&gt;::deallocate()</td>
<td>C++标准库</td>
<td>可自由设计并搭配容器</td>
</tr>
</tbody></table>
<p>用法示例</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span>* p1 = <span class="built_in">malloc</span>(<span class="number">512</span>); <span class="comment">//512 bytes</span></span><br><span class="line"><span class="built_in">free</span>(p1);</span><br><span class="line"></span><br><span class="line"><span class="built_in">complex</span>&lt;<span class="keyword">int</span>&gt;* p2 = <span class="keyword">new</span> <span class="built_in">complex</span>&lt;<span class="keyword">int</span>&gt;; <span class="comment">//one object</span></span><br><span class="line"><span class="keyword">delete</span> p2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span>* p3 = ::<span class="keyword">operator</span> <span class="keyword">new</span>(<span class="number">512</span>); <span class="comment">//512 bytes</span></span><br><span class="line">::<span class="function"><span class="keyword">operator</span> <span class="title">delete</span><span class="params">(p3)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __GUNC__ <span class="comment">//GNUC 2.9</span></span></span><br><span class="line"></span><br><span class="line">		<span class="keyword">void</span>* p4 = alloc::allocate(<span class="number">512</span>);</span><br><span class="line">		alloc::deallocate(p4,<span class="number">512</span>); <span class="comment">//得记得当初申请了多少的内存,比较适用于容器</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*************************/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __GNUC__ <span class="comment">//GNUC 4.9</span></span></span><br><span class="line"></span><br><span class="line">		<span class="comment">//allocate() 和 deallocate() 是 non-static 必须由 object 调用</span></span><br><span class="line">		<span class="keyword">void</span>* p4 = allocator&lt;<span class="keyword">int</span>&gt;().allocate(<span class="number">7</span>); <span class="comment">//分配7个int的内存大小</span></span><br><span class="line">		allocator&lt;<span class="keyword">int</span>&gt;().deallocate((<span class="keyword">int</span>*)p4, <span class="number">7</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//allocate() 和 deallocate() 是 non-static 必须由 object 调用</span></span><br><span class="line">		<span class="keyword">void</span>* p5 = __gnu_cxx::__pool_alloc&lt;<span class="keyword">int</span>&gt;().allocate(<span class="number">9</span>); <span class="comment">//分配9个int的内存大小</span></span><br><span class="line">		__gnu_cxx::__pool_alloc&lt;<span class="keyword">int</span>&gt;().deallocate((<span class="keyword">int</span>*)p5, <span class="number">9</span>);</span><br><span class="line">	</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>

<h2 id="new-运算符"><a href="#new-运算符" class="headerlink" title="new 运算符"></a>new 运算符</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Complex* pc = <span class="keyword">new</span> Complex(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">编译器转换→</span><br><span class="line"></span><br><span class="line">Complex *pc;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">		<span class="keyword">void</span>* mem = <span class="keyword">operator</span> <span class="keyword">new</span>(<span class="keyword">sizeof</span>(Complex)); <span class="comment">//allocate</span></span><br><span class="line">		pc = <span class="keyword">static_cast</span>&lt;Complex*&gt;(mem);           <span class="comment">//cast</span></span><br><span class="line">		pc-&gt;Complex::Complex(<span class="number">1</span>,<span class="number">2</span>);                 <span class="comment">//construct</span></span><br><span class="line">		<span class="comment">//只有编译器才能够像上式直接调用 ctor</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (<span class="built_in">std</span>::bad_alloc) &#123;</span><br><span class="line">		<span class="comment">//allocate 失败, 不执行 ctor</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="operator-new-vc98默认版本"><a href="#operator-new-vc98默认版本" class="headerlink" title="operator new() vc98默认版本"></a>operator new() vc98默认版本</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> * <span class="keyword">operator</span> <span class="title">new</span><span class="params">(<span class="keyword">size_t</span> size, <span class="keyword">const</span> <span class="built_in">std</span>::nothrow t&amp;)</span> _<span class="title">THROW0</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="comment">//try to allocate size bytes</span></span><br><span class="line">		<span class="keyword">void</span> *p;</span><br><span class="line">		<span class="keyword">while</span>((p == <span class="built_in">malloc</span>(size)) == <span class="number">0</span>)&#123;</span><br><span class="line">				<span class="comment">//buy more memory or return null pointer</span></span><br><span class="line">				_TRY_BEGIN</span><br><span class="line">				<span class="keyword">if</span>(_callnewh(size) == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">				_CATCH(<span class="built_in">std</span>::bad_alloc)   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">				_CATCH_END</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> (p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="delete-运算符"><a href="#delete-运算符" class="headerlink" title="delete 运算符"></a>delete 运算符</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Complex* pc = <span class="keyword">new</span> Complex(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">...</span><br><span class="line"><span class="keyword">delete</span> pc;</span><br><span class="line"></span><br><span class="line">编译器转换-&gt;</span><br><span class="line"></span><br><span class="line">pc-&gt;~Complex();        <span class="comment">//先析构</span></span><br><span class="line"><span class="function"><span class="keyword">operator</span> <span class="title">delete</span><span class="params">(pc)</span></span>;   <span class="comment">//然后释放内存</span></span><br></pre></td></tr></table></figure>

<h2 id="operator-delete-vc98默认版本"><a href="#operator-delete-vc98默认版本" class="headerlink" title="operator delete() vc98默认版本"></a>operator delete() vc98默认版本</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> __cdecl <span class="keyword">operator</span> <span class="title">delete</span><span class="params">(<span class="keyword">void</span> * p)</span> _<span class="title">THROW0</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="comment">//free an allocated object</span></span><br><span class="line">		<span class="built_in">free</span>(p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="array-new-array-delete"><a href="#array-new-array-delete" class="headerlink" title="array new / array delete"></a>array new / array delete</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Complex * pca = <span class="keyword">new</span> Complex[<span class="number">3</span>];</span><br><span class="line"><span class="comment">//触发三次ctor</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">delete</span> [] pca; <span class="comment">//触发三次dtor</span></span><br></pre></td></tr></table></figure>

<p>内存分配的时候, 头部会有 cookie 方便回收.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> * pi = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">delete</span> pi;</span><br><span class="line"></span><br><span class="line">vc6 : cookie</span><br><span class="line"><span class="number">61</span>h(记录大小是<span class="number">60</span>字节,<span class="number">1</span>表示使用了这一块)</span><br><span class="line"><span class="function">Debugger <span class="title">Header</span><span class="params">(<span class="number">32</span> Bytes)</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span></span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">int</span></span><br><span class="line">no man land</span><br><span class="line">Pad(<span class="number">12</span> Bytes)</span><br><span class="line"><span class="number">61</span>h</span><br></pre></td></tr></table></figure>

<h2 id="placement-new"><a href="#placement-new" class="headerlink" title="placement new"></a>placement new</h2><figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> (p)</span><br></pre></td></tr></table></figure>

<p>允许我们在已经申请的堆内存上, 构建一个对象.</p>
<p>placement new 没有对应的 placement delete, 因为 placement new操作并没有分配内存.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> * buf = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="keyword">sizeof</span>(Complex)*<span class="number">3</span>];</span><br><span class="line">Complex * pc = <span class="keyword">new</span> (buf) Complex(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">...</span><br><span class="line"><span class="keyword">delete</span> [] buf;</span><br><span class="line"></span><br><span class="line">编译器-&gt;</span><br><span class="line"></span><br><span class="line">Complex * pc;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">	<span class="keyword">void</span> * mem = <span class="keyword">operator</span> <span class="keyword">new</span>(<span class="keyword">sizeof</span>(Complex), buf); <span class="comment">//实际上不操作</span></span><br><span class="line">	pc = <span class="keyword">static_cast</span>&lt;Complex*&gt;(mem);                 <span class="comment">//cast</span></span><br><span class="line">	pc-&gt;Complex::Complex(<span class="number">1</span>,<span class="number">2</span>);                       <span class="comment">//construct</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="C-应用程序分配内存的途径"><a href="#C-应用程序分配内存的途径" class="headerlink" title="C++应用程序分配内存的途径"></a>C++应用程序分配内存的途径</h2><p><strong>应用程序</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Foo *p = <span class="keyword">new</span> Foo(x);</span><br><span class="line"><span class="keyword">delete</span> p;</span><br><span class="line"></span><br><span class="line">编译器-&gt;不可以改变不可以重载</span><br><span class="line"></span><br><span class="line">Foo *p = (Foo*)<span class="keyword">operator</span> <span class="keyword">new</span>(<span class="keyword">sizeof</span>(Foo));</span><br><span class="line"><span class="keyword">new</span> (p) Foo(x);</span><br><span class="line"></span><br><span class="line">p-&gt;~Foo();</span><br><span class="line"><span class="function"><span class="keyword">operator</span> <span class="title">delete</span><span class="params">(x)</span></span>;</span><br></pre></td></tr></table></figure>

<p><strong>operator new / operator delete</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Foo *p = (Foo*)<span class="keyword">operator</span> <span class="keyword">new</span>(<span class="keyword">sizeof</span>(Foo));</span><br><span class="line">调用 -&gt; ::<span class="function"><span class="keyword">operator</span> <span class="title">new</span><span class="params">(<span class="keyword">size_t</span>)</span></span>;</span><br><span class="line">调用 -&gt; <span class="built_in">malloc</span>(<span class="keyword">size_t</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">operator</span> <span class="title">delete</span><span class="params">(x)</span></span>;</span><br><span class="line">调用 -&gt; ::<span class="function"><span class="keyword">operator</span> <span class="title">delete</span><span class="params">(<span class="keyword">void</span>*)</span></span>;</span><br><span class="line">调用 -&gt; <span class="built_in">free</span>(<span class="keyword">void</span>*);</span><br></pre></td></tr></table></figure>

<p><strong>在类中重载 <code>operator new</code> 和 <code>operator delete</code></strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Foo *p = (Foo*)<span class="keyword">operator</span> <span class="keyword">new</span>(<span class="keyword">sizeof</span>(Foo));</span><br><span class="line">重载 <span class="function">Foo::<span class="keyword">operator</span> <span class="title">new</span><span class="params">(<span class="keyword">size_t</span>)</span></span>; -&gt; 调用 ::<span class="function"><span class="keyword">operator</span> <span class="title">new</span><span class="params">(<span class="keyword">size_t</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">operator</span> <span class="title">delete</span><span class="params">(x)</span></span>;</span><br><span class="line">重载 <span class="function">Foo::<span class="keyword">operator</span> <span class="title">delete</span><span class="params">(<span class="keyword">void</span>*)</span></span>; -&gt; 调用 ::<span class="function"><span class="keyword">operator</span> <span class="title">delete</span><span class="params">(<span class="keyword">void</span>*)</span></span>;</span><br></pre></td></tr></table></figure>

<h2 id="C-容器分配内存的途径"><a href="#C-容器分配内存的途径" class="headerlink" title="C++容器分配内存的途径"></a>C++容器分配内存的途径</h2><p><strong>容器</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">T *p = allocate();</span><br><span class="line">construct();</span><br><span class="line"></span><br><span class="line">destroy();</span><br><span class="line">deallocate(p);</span><br></pre></td></tr></table></figure>

<p><strong>分配器</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">allocate();</span><br><span class="line">deallocate();</span><br><span class="line">调用 -&gt; ::<span class="keyword">operator</span> <span class="keyword">new</span> <span class="keyword">or</span> ::<span class="keyword">operator</span> <span class="keyword">delete</span></span><br></pre></td></tr></table></figure>

<h2 id="重载-operator-new-operator-delete"><a href="#重载-operator-new-operator-delete" class="headerlink" title="重载 ::operator new / ::operator delete"></a>重载 ::operator new / ::operator delete</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> * <span class="title">myAlloc</span><span class="params">(<span class="keyword">size_t</span> size)</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">malloc</span>(size);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">myFree</span><span class="params">(<span class="keyword">void</span> * ptr)</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">free</span>(ptr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> * <span class="keyword">operator</span> <span class="title">new</span><span class="params">(<span class="keyword">size_t</span> size)</span></span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;global new()&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">return</span> myAlloc(size);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">void</span> * <span class="keyword">operator</span> <span class="keyword">new</span>[](<span class="keyword">size_t</span> size)&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;global new[]&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">return</span> myAlloc(size);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="keyword">operator</span> <span class="title">delete</span><span class="params">(<span class="keyword">void</span> * ptr)</span></span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;global delete()&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		myFree(ptr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="keyword">operator</span> <span class="keyword">delete</span>[](<span class="keyword">void</span> * ptr)&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;global delete[]&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		myFree(ptr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="重载-operator-new-operator-delete-1"><a href="#重载-operator-new-operator-delete-1" class="headerlink" title="重载 operator new / operator delete"></a>重载 operator new / operator delete</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">		<span class="comment">/*重载这两个函数应该是 static, 编译器默认*/</span></span><br><span class="line">		<span class="function"><span class="keyword">void</span> * <span class="keyword">operator</span> <span class="title">new</span><span class="params">(<span class="keyword">size_t</span>)</span></span>;</span><br><span class="line">		<span class="function"><span class="keyword">void</span>   <span class="keyword">operator</span> <span class="title">delete</span><span class="params">(<span class="keyword">void</span> *, <span class="keyword">size_t</span>)</span></span>; <span class="comment">//第二参数 optional</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Foo *p = <span class="keyword">new</span> Foo;</span><br><span class="line">编译器-&gt;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">		<span class="keyword">void</span> * mem = <span class="keyword">operator</span> <span class="keyword">new</span>(<span class="keyword">sizeof</span>(Foo)); <span class="comment">//此处调用类中重载的 operator new</span></span><br><span class="line">		p = <span class="keyword">static_cast</span>&lt;Foo*&gt;(mem);</span><br><span class="line">		p-&gt;Foo::Foo(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> p; <span class="comment">//使用 ::delete p; 可以绕过重载的 operator delete</span></span><br><span class="line">编译器-&gt;</span><br><span class="line">p-&gt;~Foo();</span><br><span class="line"><span class="function"><span class="keyword">operator</span> <span class="title">delete</span><span class="params">(p)</span></span>; <span class="comment">//此处调用类中重载的 operator delete</span></span><br></pre></td></tr></table></figure>

<h2 id="重载-placement-new-placement-delete"><a href="#重载-placement-new-placement-delete" class="headerlink" title="重载 placement new / placement delete"></a>重载 placement new / placement delete</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> &#123;</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">/* 1,2默认版本; 3,4重载版本;*/</span></span><br><span class="line">	</span><br><span class="line">		<span class="function"><span class="keyword">void</span> * <span class="keyword">operator</span> <span class="title">new</span><span class="params">(<span class="keyword">size_t</span> size)</span></span>&#123; <span class="comment">// 调用 new Foo</span></span><br><span class="line">				<span class="keyword">return</span> <span class="built_in">malloc</span>(size);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="function"><span class="keyword">void</span> * <span class="keyword">operator</span> <span class="title">new</span><span class="params">(<span class="keyword">size_t</span> size, <span class="keyword">void</span> * start)</span></span>&#123; <span class="comment">// 调用 new (&amp;) Foo</span></span><br><span class="line">				<span class="keyword">return</span> start;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="function"><span class="keyword">void</span> * <span class="keyword">operator</span> <span class="title">new</span><span class="params">(<span class="keyword">size_t</span> size, <span class="keyword">long</span> extra)</span></span>&#123; <span class="comment">// 调用 new (100) Foo</span></span><br><span class="line">				<span class="keyword">return</span> <span class="built_in">malloc</span>(size + extra);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="function"><span class="keyword">void</span> * <span class="keyword">operator</span> <span class="title">new</span><span class="params">(<span class="keyword">size_t</span> size, <span class="keyword">long</span> extra, <span class="keyword">char</span> init)</span></span>&#123; <span class="comment">//调用 new(100,&#x27;a&#x27;) Foo</span></span><br><span class="line">				<span class="keyword">return</span> <span class="built_in">malloc</span>(size + extra);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">/*</span></span><br><span class="line"><span class="comment">		** placement new 重载时, 第一参数必须为 size_t</span></span><br><span class="line"><span class="comment">		** 否则, [Error] &#x27;operator new&#x27; takes type &#x27;size_t&#x27;(unsigned int) </span></span><br><span class="line"><span class="comment">		** as first parameter</span></span><br><span class="line"><span class="comment">		*/</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">/*</span></span><br><span class="line"><span class="comment">		** placement delete 重载时, 不会被 delete 调用</span></span><br><span class="line"><span class="comment">		** 除非 new 的时候抛出异常, 才会去调用对应的重载的 operator delete()</span></span><br><span class="line"><span class="comment">		*/</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>内存管理</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构 - 数组</title>
    <url>/OXygenPanda.github.io/2020/12/10/HugeFour/DataStructrues/01%E6%95%B0%E7%BB%84%20vector/</url>
    <content><![CDATA[<h1 id="数据结构-数组"><a href="#数据结构-数组" class="headerlink" title="数据结构 - 数组"></a>数据结构 - 数组</h1><p>该篇是数据结构的开篇. 数据结构学习拟定计划是学习 &lt;&lt;数据结构与算法 C++描述&gt;&gt; by Sartaj Sahni 的同时, 阅读 &lt;&lt;STL源码剖析&gt;&gt; by 侯捷, 完成对应数据结构在STL中的实现.</p>
<p>这一篇主要是 vector 的实现.</p>
<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>数组的特性较为简单, 在内存空间中连续, 存储同一类型元素, 查询时间复杂度为<code>O(1)</code>, 插入删除时间复杂度为<code>O(n)</code>. 数据与数据的关系只有先后关系.</p>
<h2 id="vector-未完成"><a href="#vector-未完成" class="headerlink" title="vector(未完成)"></a>vector(未完成)</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// linear.c</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by OXygen on 2020/12/9.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;linear.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">myvector</span> &#123;</span></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">	<span class="keyword">typedef</span> _Tp	           value_type;</span><br><span class="line">	<span class="keyword">typedef</span> value_type*    pointer;</span><br><span class="line">	<span class="keyword">typedef</span> pointer        iterator;</span><br><span class="line">	<span class="keyword">typedef</span> _Tp&amp;           reference;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	iterator start;</span><br><span class="line">	iterator finish;</span><br><span class="line">	iterator end_of_storage;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="comment">// Construction &amp; Deconstruction</span></span><br><span class="line">	myvector() &#123; start = finish = end_of_storage = <span class="literal">nullptr</span>; &#125;</span><br><span class="line">	myvector(<span class="keyword">int</span> capacity, value_type initElem = <span class="number">0</span>) &#123; <span class="keyword">if</span>(capacity &gt; <span class="number">0</span>) initalloc(capacity,initElem); &#125;</span><br><span class="line">	myvector(<span class="keyword">const</span> myvector&amp; LeftVector) &#123;</span><br><span class="line">		<span class="keyword">int</span> size = LeftVector.size();</span><br><span class="line">		<span class="keyword">this</span>-&gt;resize(size);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size ; ++ i)&#123;</span><br><span class="line">			<span class="keyword">this</span>[i] = LeftVector[i];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="comment">//	myvector(myvector &amp;&amp; RightVector) noexcept &#123;&#125;</span></span><br><span class="line">	~myvector() &#123;</span><br><span class="line">		<span class="keyword">this</span>-&gt;clear();</span><br><span class="line">		start = finish = end_of_storage = <span class="literal">nullptr</span>;</span><br><span class="line">	&#125;;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Operations</span></span><br><span class="line">	myvector &amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> myvector &amp; LeftVector) &#123;</span><br><span class="line">		<span class="keyword">if</span>(&amp;LeftVector == <span class="keyword">this</span>)</span><br><span class="line">			<span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">		<span class="keyword">if</span>(start != <span class="number">0</span>)&#123;</span><br><span class="line">			<span class="keyword">this</span>-&gt;clear();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> size = LeftVector.size();</span><br><span class="line">		<span class="keyword">this</span>-&gt;resize(size);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size ; ++ i)&#123;</span><br><span class="line">			<span class="keyword">this</span>[i] = LeftVector[i];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="comment">//	myvector &amp; operator=(myvector &amp;&amp; RightVector) noexcept &#123;&#125;</span></span><br><span class="line">	<span class="keyword">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> myvector &amp; LeftVector) &#123;</span><br><span class="line">		<span class="keyword">if</span>(&amp;LeftVector == <span class="keyword">this</span>)	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">		<span class="keyword">if</span>(<span class="keyword">this</span>-&gt;size() != LeftVector.size())	<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="keyword">this</span>-&gt;size() ; ++ i)&#123;</span><br><span class="line">			<span class="keyword">if</span>(<span class="keyword">this</span>[i] != LeftVector[i])</span><br><span class="line">				<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">bool</span> <span class="keyword">operator</span>!=(<span class="keyword">const</span> myvector &amp; LeftVector) &#123;</span><br><span class="line">		<span class="keyword">return</span> !<span class="keyword">operator</span>==(LeftVector);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Capacity</span></span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> (finish - start);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">capacity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> (end_of_storage - start);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">empty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> (<span class="keyword">this</span>-&gt;size() == <span class="number">0</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Visit</span></span><br><span class="line">	<span class="function">value_type <span class="title">front</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">//empty应该抛出异常</span></span><br><span class="line">		<span class="keyword">return</span> *begin();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">value_type <span class="title">back</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">//empty应该抛出异常</span></span><br><span class="line">		<span class="keyword">return</span> *(end() - <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">iterator <span class="title">begin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> start;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">iterator <span class="title">end</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> finish;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Modifiers</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(iterator location, value_type InsertElem)</span> </span>&#123;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">erase</span><span class="params">(iterator location)</span> </span>&#123;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">erase</span><span class="params">(iterator _begin, iterator _end)</span> </span>&#123;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">push_back</span><span class="params">(value_type PushElem)</span> </span>&#123;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">emplace_back</span><span class="params">(value_type PushElem)</span> </span>&#123;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">pop_back</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">resize</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">initalloc</span><span class="params">(<span class="keyword">int</span> capacity, value_type Elem)</span></span>&#123;</span><br><span class="line">		start = <span class="keyword">new</span> value_type[capacity];</span><br><span class="line">		iterator it = start;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; capacity ; ++ i, ++ it) &#123;</span><br><span class="line">			*it = Elem;</span><br><span class="line">		&#125;</span><br><span class="line">		end_of_storage = it + <span class="number">1</span>;</span><br><span class="line">		finish = it;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">growalloc</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>vector</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>剑指 Offer 14- I. 剪绳子</title>
    <url>/OXygenPanda.github.io/2020/12/07/leetcode/offer/%E5%89%91%E6%8C%87Offer%2014%20I/</url>
    <content><![CDATA[<h2 id="剑指-Offer-14-I-剪绳子"><a href="#剑指-Offer-14-I-剪绳子" class="headerlink" title="剑指 Offer 14- I. 剪绳子"></a>剑指 Offer 14- I. 剪绳子</h2><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p><a class="btn" href="https://leetcode-cn.com/problems/jian-sheng-zi-lcof/" title="leetcode链接">剑指 Offer 14- I. 剪绳子</a></p>
<p><strong>难度:</strong><font color="orange">中等</font></p>
<p><strong>描述</strong></p>
<p>给你一根长度为 n 的绳子，请把绳子剪成整数长度的 m 段（m、n都是整数，n&gt;1并且m&gt;1），每段绳子的长度记为 k[0],k[1]…k[m-1] 。请问 k[0]*k[1]*…*k[m-1] 可能的最大乘积是多少？例如，当绳子的长度是8时，我们把它剪成长度分别为2、3、3的三段，此时得到的最大乘积是18。</p>
<a id="more"></a>

<p><strong>示例</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">输入: <span class="number">2</span></span><br><span class="line">输出: <span class="number">1</span></span><br><span class="line">解释: <span class="number">2</span> = <span class="number">1</span> + <span class="number">1</span>, <span class="number">1</span> × <span class="number">1</span> = <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">输入: <span class="number">10</span></span><br><span class="line">输出: <span class="number">36</span></span><br><span class="line">解释: <span class="number">10</span> = <span class="number">3</span> + <span class="number">3</span> + <span class="number">4</span>, <span class="number">3</span> × <span class="number">3</span> × <span class="number">4</span> = <span class="number">36</span></span><br></pre></td></tr></table></figure>

<h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>这样的题目, 适合先枚举多个例子找规律.</p>
<p>我们枚举到6,7,8的时候, 应该可以感受到, 每个数需要尽量地拆分多的数字<code>3</code>, 但是最终拆分剩下<code>4</code>的时候, 需要转换成<code>2+2</code>.</p>
<p>我们不需要循环地去重复 : <code>n -= 3</code> 和 <code>res *= 3 </code> , 因为, 这样的循环可以计算出运算的次数.</p>
<p>使用<code>count  = n / 3</code> 得知以上的循环会进行多少次, <code>count % 3</code> 得知以上的循环会剩下什么数.</p>
<p>如果剩下的数字是 <code>1</code>  说明我们把<code>4</code>拆分成了<code>3+1</code>, 所以回退一步, 结果为<code>pow(3, count - 1) * 4</code></p>
<p>如果剩下的数字是 <code>0</code>  说明这个数字<code>n</code>可以全部拆分成<code>3</code>, 所以结果为<code>pow(3, count)</code></p>
<p>如果剩下的数字是 <code>2</code>  说明结果为<code>pow(3, count) * 2</code></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">cuttingRope</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        2 : 1 + 1 -&gt; 1</span></span><br><span class="line"><span class="comment">        3 : 2 + 1</span></span><br><span class="line"><span class="comment">        4 : 2 + 2</span></span><br><span class="line"><span class="comment">        5 : 3 + 2</span></span><br><span class="line"><span class="comment">        6 : 3 + 3</span></span><br><span class="line"><span class="comment">        7 : 3 + 2 + 2</span></span><br><span class="line"><span class="comment">        8 : 3 + 3 + 2</span></span><br><span class="line"><span class="comment">        </span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>( n == <span class="number">2</span> || n == <span class="number">3</span>)   <span class="keyword">return</span> (n - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> count = n / <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">int</span> rest = n % <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">return</span> (rest == <span class="number">1</span>) ? <span class="built_in">pow</span>(<span class="number">3</span>, count - <span class="number">1</span>) * <span class="number">4</span> : (rest == <span class="number">0</span>) ? <span class="built_in">pow</span>(<span class="number">3</span>, count) : rest * <span class="built_in">pow</span>(<span class="number">3</span>, count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Leetcode</category>
        <category>剑指 Offer 专题</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>2020.12.07 861. 翻转矩阵后的得分</title>
    <url>/OXygenPanda.github.io/2020/12/07/leetcode/daily/861.%20%E7%BF%BB%E8%BD%AC%E7%9F%A9%E9%98%B5%E5%90%8E%E7%9A%84%E5%BE%97%E5%88%86/</url>
    <content><![CDATA[<h2 id="861-翻转矩阵后的得分"><a href="#861-翻转矩阵后的得分" class="headerlink" title="861. 翻转矩阵后的得分"></a>861. 翻转矩阵后的得分</h2><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p><a class="btn" href="https://leetcode-cn.com/problems/score-after-flipping-matrix/" title="leetcode链接">861. 翻转矩阵后的得分</a></p>
<p><strong>难度:</strong><font color="orange">中等</font></p>
<p><strong>描述</strong></p>
<p>有一个二维矩阵 A 其中每个元素的值为 0 或 1 。</p>
<p>移动是指选择任一行或列，并转换该行或列中的每一个值：将所有 0 都更改为 1，将所有 1 都更改为 0。</p>
<p>在做出任意次数的移动后，将该矩阵的每一行都按照二进制数来解释，矩阵的得分就是这些数字的总和。</p>
<p>返回尽可能高的分数。</p>
<a id="more"></a>

<p><strong>示例</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">输入 : [[<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],[<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>],[<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>]]</span><br><span class="line">输出 : <span class="number">39</span></span><br><span class="line">解释 :</span><br><span class="line">转换为 [[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>],[<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>],[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>]]</span><br><span class="line"><span class="number">0b1111</span> + <span class="number">0b1001</span> + <span class="number">0b1111</span> = <span class="number">15</span> + <span class="number">9</span> + <span class="number">15</span> = <span class="number">39</span></span><br><span class="line"></span><br><span class="line">提示 :</span><br><span class="line"><span class="number">1</span> &lt;= A.length &lt;= <span class="number">20</span></span><br><span class="line"><span class="number">1</span> &lt;= A[<span class="number">0</span>].length &lt;= <span class="number">20</span></span><br><span class="line">A[i][j] 是 <span class="number">0</span> 或 <span class="number">1</span></span><br></pre></td></tr></table></figure>

<h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>首先, <code>16</code>一定比<code>8</code>大. 也就是说, 最高位的<code>b1</code>一定比低位的<code>b1</code>表示的数字要大. 因此, 可以通过反转行, 来使得最高位是<code>b1</code>. 其次, 行已经达到最优的情况, 该反转列了, 列的反转结果会导致<code>b0</code>和<code>b1</code>的数量交换, 因此, 如果一列上<code>b1</code>的数量大于<code>b0</code>时, 不需要反转, 否则反转.</p>
<p>经过行列反转后, 达到最优解. 计算结果.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">matrixScore</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; A)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> m = A.size();</span><br><span class="line">        <span class="keyword">if</span>(m == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> n = A[<span class="number">0</span>].size();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 反转行</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; m ; ++ i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(A[i][<span class="number">0</span>] == <span class="number">0</span>)&#123; <span class="comment">//首位是0才需要行反转</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span> ; j &lt; n ; ++ j)&#123;</span><br><span class="line">                    A[i][j] = A[i][j] == <span class="number">0</span> ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 反转列</span></span><br><span class="line">        <span class="keyword">int</span> mid = (m + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span> ; j &lt; n ; ++ j)&#123;</span><br><span class="line">            count = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; m ; ++ i)&#123;</span><br><span class="line">                count += A[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(count &lt; mid)&#123; <span class="comment">//1的数量小于一半时才需要列反转</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; m ; ++ i)</span><br><span class="line">                    A[i][j] = A[i][j] == <span class="number">0</span> ? <span class="number">1</span> : <span class="number">0</span>;                    </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 计算</span></span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; m ; ++ i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span> ; j &lt; n ; ++ j)&#123;</span><br><span class="line">                res += A[i][j] * <span class="built_in">pow</span>(<span class="number">2</span>, n - <span class="number">1</span> - j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Leetcode</category>
        <category>每日一题</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>仓库介绍</title>
    <url>/OXygenPanda.github.io/2020/11/24/github/%E4%BB%93%E5%BA%93%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<center>
<bold>
深入理解操作系统课程学习 - 清华大学
</bold>
    <br>
<font size="1.5">
    记录清华大学深入理解操作系统课程学习的笔记
    </font>
</center>

<left>
<a href="https://github.com/OXygenPanda/Deep_into_OperatingSystem" target="_blank"><img src="https://img.shields.io/badge/Github-@Deep_into_OperatingSystem-f3e1e1.svg?style=flat-square&logo=GitHub"></a>
</left>



]]></content>
      <categories>
        <category>github</category>
      </categories>
      <tags>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>深入理解计算机网络</title>
    <url>/OXygenPanda.github.io/2020/11/23/HugeFour/Network/Deep_into_Network/</url>
    <content><![CDATA[<p align="center">
<a href="https://oxygenpanda.github.io/" target="_blank"><img alt="Website" src="https://img.shields.io/badge/博客-劳振煜的知識倉儲-faf2f2.svg?style=flat-square&logo=Blogger"></a>
<a href="https://www.github.com/OXygenPanda" target="_blank"><img src="https://img.shields.io/badge/Github-@劳振煜-f3e1e1.svg?style=flat-square&logo=GitHub"></a>
<a href="https://i.loli.net/2020/11/11/SBZ2mFJGKLjUtTO.jpg" target="_blank"><img src="https://img.shields.io/badge/微信-@OXygen-f1d1d1.svg?style=flat-square&logo=WeChat"></a>
</p> 




<h1 id="计算机网络学习"><a href="#计算机网络学习" class="headerlink" title="计算机网络学习"></a>计算机网络学习</h1><p>本文章记录着小劳的计算机网络学习, 从2020.11.22开始学习, 目标能够掌握概念, 对网络编程有一个偏底层的理解. 学习自韩立刚老师的b站课程.</p>
<p>传送门 : <a class="btn" href="https://www.bilibili.com/video/BV17p411f7ZZ?p=1" title="传送门">b站 韩立刚 计算机网络</a></p>
<a id="more"></a>

<p><code>custom</code></p>
<h1 id="计算机网络-第一章"><a href="#计算机网络-第一章" class="headerlink" title="计算机网络 第一章"></a>计算机网络 第一章</h1><blockquote>
<p>  计算机网络第一章的主要内容是 : 概述</p>
</blockquote>
<h2 id="课程安排"><a href="#课程安排" class="headerlink" title="课程安排"></a>课程安排</h2><p>第一章 : 概述</p>
<p>第二章 : 物理层</p>
<p>第三章 : 数据链路层</p>
<p>第四章 : 网络层</p>
<p>第五章 : 运输层</p>
<p>第六章 : 应用层</p>
<p>第七章 : 网络安全</p>
<p>第八章 : 因特网上的音频,视频服务</p>
<p>第九章 : 无线网络</p>
<p>第十章 : 下一代因特网</p>
<h2 id="计算机网络在信息时代的作用"><a href="#计算机网络在信息时代的作用" class="headerlink" title="计算机网络在信息时代的作用"></a>计算机网络在信息时代的作用</h2><p>21世纪的特征 : 数字化, 网络化, 信息化</p>
<p>网络化 : 三网(电信网络, 计算机网络, 有线电视网络)</p>
<p>计算机网络 : 因特网, 其他网络(政府网络, 军用网络)</p>
<h3 id="计算机网络的重要功能"><a href="#计算机网络的重要功能" class="headerlink" title="计算机网络的重要功能"></a>计算机网络的重要功能</h3><p>连通性 : 彼此联通, 交换信息</p>
<p>共享 : 信息共享, 软硬件共享(软 : ssh ; 硬 : 打印机等设备)</p>
<h2 id="因特网概述"><a href="#因特网概述" class="headerlink" title="因特网概述"></a>因特网概述</h2><p>终端到网络(路由器)的距离大约是100米, 路由器与路由器的连接扩展了网络的距离和接入网设备的数量.</p>
<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>网络 : 许多计算机连接在一起</p>
<p>互联网 : 许多网络连接在一起 (internet)</p>
<p>因特网 : 全球最大的一个互联网 (Internet, 使用 TCP/IP 协议)</p>
<h3 id="因特网发展的三个阶段"><a href="#因特网发展的三个阶段" class="headerlink" title="因特网发展的三个阶段"></a>因特网发展的三个阶段</h3><p>1st : ARPANET向互联网发展 (上世纪60年代 - 80 年代中期)</p>
<ul>
<li>1969年 分组交换网</li>
<li>1975年 互联网</li>
<li>1983年 TCP/IP (因特网起源)</li>
</ul>
<p>2nd : 三级结构的因特网 (上世纪80年代中期 - 90 年代初期)</p>
<ul>
<li>分层次, 比如 : 学校网 - 区域网 - 主干网(带宽 : 45 M)</li>
</ul>
<p>3rd : 多层次ISP结构的因特网</p>
<ul>
<li>ISP : Internet Service Provider 因特网服务提供商</li>
<li>第一层ISP - 第二层ISP - 第三层ISP(提供接入) - 校园网等</li>
<li>如果服务器需要提供的客户范围较小, 应该接入越低层的ISP</li>
</ul>
<h3 id="因特网的标准化工作"><a href="#因特网的标准化工作" class="headerlink" title="因特网的标准化工作"></a>因特网的标准化工作</h3><p>因特网协会 : ISOC</p>
<p>因特网体系结构委员会 IAB :</p>
<ul>
<li>因特网研究部 IRTF :<ul>
<li>因特网研究指导小组 IRSG</li>
</ul>
</li>
<li>因特网工程部 IETF :<ul>
<li>因特网工程指导小组 IESG</li>
</ul>
</li>
</ul>
<h3 id="因特网的组成"><a href="#因特网的组成" class="headerlink" title="因特网的组成"></a>因特网的组成</h3><p><strong>因特网的核心部分</strong></p>
<p><strong>因特网的边缘部分</strong></p>
<p>主机之间的通信方式 :</p>
<ul>
<li>客户端服务器方式 (Client / Server 方式)</li>
<li>对等方式 (Peer-to-Peer 方式)</li>
</ul>
<p>数据交换方式 :</p>
<ul>
<li>电路交换 (Circuit Switching)<ul>
<li>交换机同时只能提供网络中的两个终端通信</li>
<li>过程 : 申请占用通信资源, 一直占用通信资源, 释放通信资源</li>
<li>适用于 : 实时性通信, 核心路由器之间可以使用电路交换</li>
</ul>
</li>
<li>报文交换 (Message Switching)<ul>
<li>报文一般比分组长的多</li>
<li>报文交换的时延较长</li>
</ul>
</li>
<li>分组交换 (Packet Switching)<ul>
<li>完整的一个数据包称为报文, 需要分为多个组进行发送</li>
<li>每一个分组带上一个首部</li>
<li>分组的优势在于, 通信时路径可以复用</li>
<li>接收端去电首部后, 拼接分组成报文</li>
<li>路由器有存储转发功能</li>
<li>优点 : 高效, 灵活, 迅速, 可靠</li>
<li>问题 : 时延, 开销</li>
</ul>
</li>
</ul>
<h2 id="计算机在我国的发展"><a href="#计算机在我国的发展" class="headerlink" title="计算机在我国的发展"></a>计算机在我国的发展</h2><p>中国在1994年4月20日正式接入互联网.</p>
<h2 id="计算机网络的类别"><a href="#计算机网络的类别" class="headerlink" title="计算机网络的类别"></a>计算机网络的类别</h2><p>计算机网络最简单的定义 : 一些互相连接的, 自治的计算机的集合</p>
<p>作用范围(使用的技术) :</p>
<p>广域网 : WAN (花钱买服务, 花钱买带宽</p>
<p>城域网 : MAN</p>
<p>局域网 : LAN (自己购买设备, 带宽固定, 自己维护, 距离100米之内)</p>
<p>使用者 : 公用网, 专用网</p>
<p>拓扑结构 : 总线型, 环型, 星型, 树型, 网状</p>
<p>交换方式 : 电路交换, 报文交换, 分组交换</p>
<p>工作方式 : 资源子网, 通信子网, 接入网</p>
<h2 id="计算机网络的性能"><a href="#计算机网络的性能" class="headerlink" title="计算机网络的性能"></a>计算机网络的性能</h2><p>以下5点是性能指标 :</p>
<h3 id="速率"><a href="#速率" class="headerlink" title="速率"></a>速率</h3><p>速率是指连接在计算机网络上的主机在<strong>数字信道</strong>上传送数据位数的速率, 也称为 data rate 或者 bit rate. 单位是 b/s kb/s Mb/s Gb/s</p>
<p>一般来说, 运营商告诉的100M是指100Mbps, 转换成下行速率是 100 / 8 = 12.5 Mbit / s</p>
<h3 id="带宽"><a href="#带宽" class="headerlink" title="带宽"></a>带宽</h3><p>带宽是指数据通信领域中, <strong>数字信道</strong>所能传送的最高速率</p>
<h3 id="吞吐量"><a href="#吞吐量" class="headerlink" title="吞吐量"></a>吞吐量</h3><p>吞吐量是指在单位时间内通过<strong>某个网络</strong>的数据量</p>
<h3 id="时延"><a href="#时延" class="headerlink" title="时延"></a>时延</h3><p>时延 = 发送时延 + 传播时延 + 处理时延 + 排队时延</p>
<p>发送时延 = 数据块长度(比特) / 信道带宽(比特/秒)</p>
<p>传播时延 = 信道长度(米) / 信号在信道上的传播速率(米/秒)</p>
<p>处理时延 = 网络节点存储转发处理时间</p>
<p>排队时延 = 网络节点缓存队列排队时间</p>
<h3 id="利用率"><a href="#利用率" class="headerlink" title="利用率"></a>利用率</h3><p>信道利用率 = 有数据通过时间 / (有 + 无) 数据通过时间</p>
<p>网络利用率 = 信道利用率加权平均值</p>
<p>D = D0 / (1 - U) [D0 : 网络空闲时延 D : 网络当前时延 U : 信道利用率]</p>
<p>以下7点是非性能指标 : 费用, 质量, 标准化, 可靠性, 可扩展性, 可升级性, 管理与维护</p>
<h2 id="计算机网络的体系机构"><a href="#计算机网络的体系机构" class="headerlink" title="计算机网络的体系机构"></a>计算机网络的体系机构</h2><h3 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h3><p>ISO : 国际标准化组织</p>
<p>OSI/RM : 互联网法律上的国际标准</p>
<p>TCP/IP Suite : 因特网事实上的国际标准</p>
<p>Network Protocols : 数据交换遵守的规则, 标准或约定</p>
<p>网络体系结构 : 计算机网络各层及协议的集合</p>
<h3 id="OSI-参考模型"><a href="#OSI-参考模型" class="headerlink" title="OSI 参考模型"></a>OSI 参考模型</h3><p><strong>OSI 是七层模型 :</strong></p>
<p>​    应用层 - 能够产生网络流量, 能够和用户交互的应用程序</p>
<p>​    表示层 - 加密, 压缩, 编解码 (开发人员考虑)</p>
<p>​    会话层 - 服务和客户端建立的会话 查木马 netstat -nb | more</p>
<p>​    传输层 - 可靠传输建立会话, 不可靠传输不建立会话(QQ发消息, DNS解析), 流量控制</p>
<p>​    网络层 - IP地址编址 选择最佳路径 动态路由</p>
<p>​    链路层 - 数据如何封装 为数据包添加物理层地址(MAC地址)</p>
<p>​    物理层 - 电压 接口标准</p>
<p><strong>分层的作用 :</strong> 1.标准化 ; 2.降低耦合度</p>
<p>开发者考虑应用层到会话层, 网络工程师考虑传输层到链路层</p>
<p><strong>网络排错 :</strong> 从底层往上检查(比如 : 先看网线, IP, 浏览器检查)</p>
<p><strong>网络安全和OSI参考模型 :</strong></p>
<p>​    物理层安全 - 给别人提供了接入网络的机会</p>
<p>​    链路层安全 - ADSL密码, 无线网卡密码</p>
<p>​    网络层安全 - 网关设置内网中某些网段可以访问外网, 某一些不可以</p>
<p>​    应用层安全 - SQL注入漏洞, 上传漏洞(文件类型检查)</p>
<h3 id="TCP-IP模型"><a href="#TCP-IP模型" class="headerlink" title="TCP/IP模型"></a>TCP/IP模型</h3><p><strong>TCP/IP 是五层模型 :</strong></p>
<p>​    应用层</p>
<p>​    传输层</p>
<p>​    网络层</p>
<p>​    链路层</p>
<p>​    物理层</p>
<p><strong>开放系统信息交换涉及的概念 :</strong></p>
<p>实体 : 交换信息的硬件和软件的进程</p>
<p>协议 : 控制两个对等实体通信的规则</p>
<p>服务 : 下层向上层提供服务, 上层需要使用下层提供的服务来实现本层的功能</p>
<p>服务访问点 : 相邻两层实体间交换信息的地方</p>
<p><strong>TCP/IP 模型的数据单元 :</strong></p>
<p>​    应用层 - 传输数据单元 PDU</p>
<p>​    运输层 - 运输层报文</p>
<p>​    网络层 - IP数据报(IP分组)</p>
<p>​    数据链路层 - 数据帧</p>
<p>​    物理层 - bits</p>
<h1 id="计算机网络-第二章"><a href="#计算机网络-第二章" class="headerlink" title="计算机网络 第二章"></a>计算机网络 第二章</h1><p>由于是物理层, 暂时先跳过学习</p>
<h1 id="计算机网络-第三章"><a href="#计算机网络-第三章" class="headerlink" title="计算机网络 第三章"></a>计算机网络 第三章</h1><blockquote>
<p>  第三章的主要内容是 : 数据链路层</p>
</blockquote>
<h2 id="数据链路层基本概念及基本问题"><a href="#数据链路层基本概念及基本问题" class="headerlink" title="数据链路层基本概念及基本问题"></a>数据链路层基本概念及基本问题</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>数据发送模型 :</p>
<ul>
<li>主机1 - 电话网 - 路由器1 - 局域网 - 路由器2 - 广域网 - 路由器3 - 局域网 - 主机2.</li>
<li>在路由器上数据上升到网络层, 再进行转发.</li>
</ul>
<p>数据链路层的信道类型 :</p>
<ul>
<li>点对点信道</li>
<li>广播信道</li>
</ul>
<p>链路与数据链路 :</p>
<ul>
<li>链路 (link) 是一条点对点的物理线路段</li>
<li>数据链路 (data link) 除了物理线路外, 还必须有通信协议来控制这些数据的传输</li>
</ul>
<p>帧 :</p>
<ul>
<li>链路层传输的数据单元</li>
<li>获得网络层的数据报增加帧头和帧尾, 传递给物理层</li>
</ul>
<h3 id="三个基本问题"><a href="#三个基本问题" class="headerlink" title="三个基本问题"></a>三个基本问题</h3><ol>
<li><p>封装成帧(一定要知道哪里开始哪里结束)</p>
<p>封装成帧就是在一段数据的前后分别添加首部和尾部, 然后就构成一个帧, 确定帧的边界.</p>
<p>首部和尾部的一个重要作用就是进行帧定界.</p>
<p>帧的数据部分长度最大为1500字节.</p>
<p>帧首部和帧尾部定界的作用 : 确保数据的完整性</p>
</li>
<li><p>透明传输(数据中存在开始和结束的标识, 进行转变)</p>
<p>在帧数据部分出现了SOH帧首部或EOT帧尾部内容, 会出现提前结束.</p>
<p>解决方法 :</p>
<ul>
<li>发送端的数据链路层在数据中出现控制字符”SOH”或者”EOT”的前面插入转义字符”ESC”(十六进制编码为1B).</li>
<li>字节填充或字符填充——接收端的数据链路层在将数据送往网络层之前删除插入的转义字符.</li>
<li>如果转义字符也出现在数据中, 那么应该在转义字符前插入一个转义字符. 当接收端收到连续的两个转义字符时, 就删除前面一个.</li>
</ul>
</li>
<li><p>差错控制(检查帧的正确性)</p>
<p>传输过程中可能会产生比特差错 : 1 可能会变成 0 , 0 可能会变成 1.</p>
<p>在一段时间内, 传输错误的比特占所传输比特总数的比率称为误码率 BER (bit error rate).</p>
<p>误码率与信噪比有很大的关系.</p>
<p>为了保证数据传输的可靠性, 在计算机网络传输数据时, 必须采用各种差错检测措施.</p>
<p>循环冗余检验 CRC :</p>
<ul>
<li>在数据链路层传送的帧中, 广泛使用了 CRC 的技术.</li>
<li>在发送端, 先把数据划分为组. 假定每组为 k 个比特</li>
<li>假设待传送的一组数据 M = 101001 (k = 6), 我们在 M 的后面再添加供差错检测用的 n 位冗余码一起发送.</li>
<li>101001 - 000 (增加3位0, 要求除数是4位) / 1101 = 001 (FCS) , 把001加在101001后面, 组成 101001001 , 接收方除以相同的四位数 1101, 如果最终结果是 0 , 说明没有出错. 这个四位数 1101 或者更多位的数, 是链路层保证双方相同的.</li>
<li>链路层的差错控制, 是无差错接收, 只接受没有比特差错的情况, 不需要重传.(重传是传输层的要求)</li>
</ul>
<p>帧检验序列 FCS :</p>
<ul>
<li>在数据后面添加上的冗余码称为帧检验序列 FCS.</li>
<li>循环冗余检验 CRC 和帧检验序列 FCS 并不等同. (CRC 不是获得 FCS 的唯一途径)</li>
</ul>
</li>
</ol>
<h2 id="两种情况下的数据链路层"><a href="#两种情况下的数据链路层" class="headerlink" title="两种情况下的数据链路层"></a>两种情况下的数据链路层</h2><h3 id="使用点对点信道的数据链路层"><a href="#使用点对点信道的数据链路层" class="headerlink" title="使用点对点信道的数据链路层"></a>使用点对点信道的数据链路层</h3><p><strong>PPP协议( Pointer-to-Pointer Protocol)</strong></p>
<p>用户使用拨号电话线接入因特网的时候, 一般都是使用PPP协议. 具有拨号, 身份验证, 可以记账的特性.</p>
<p><strong>PPP协议应该满足的要求 :</strong> 简单, 封装成帧, 透明性, 多层网络层协议, 多种类型链路, 差错检测, 检测连接状态, 最大传送单元, 网络层地址协商, 数据压缩协商.</p>
<p><strong>PPP协议不需要满足的要求 :</strong> 纠错, 流量控制, 序号, 多点线路, 半双工或单工链路.</p>
<p><strong>PPP协议的组成 :</strong></p>
<ul>
<li>数据链路层协议可以用于异步串行或同步串行介质.</li>
<li>它使用LCP(链路控制协议)建立并维护数据链路连接.</li>
<li>网络控制协议(NCP)允许在点到点连接上使用多种网络层协议.</li>
</ul>
<p>|3. 上层协议 : IP IPX AppleTalk |</p>
<p>|2. 网络控制协议 NCP 针对每一个网络层协议 |</p>
<p>|2. 链路控制协议 LCP |</p>
<p>|2. 高级数据链路控制协议 HDLC |</p>
<p>|1. 物理层 |</p>
<p><strong>PPP协议帧格式 :</strong></p>
<p>首部 : | F{1} | A{1} | C{1} | 协议{2} | . 其中, A,C = FF,03 是固定的. 一般 首部和尾部的 : F(=7E)</p>
<ul>
<li>协议{2} :<ul>
<li>0x0021 - PPP帧的信息字段就是IP数据报</li>
<li>0xC021 - 信息字段是PPP链路控制数据</li>
<li>0x8021 - 网络控制数据</li>
<li>0xC023 - 安全性认证PAP</li>
<li>0xC025 - LQR</li>
<li>0xC223 - 安全性认证CHAP</li>
</ul>
</li>
</ul>
<p>数据部分 : IP数据报不超过1500字节.</p>
<p>尾部 : | FCS{2} | F{1} | . PPP协议的头尾的 F(=7E) 字段相同.</p>
<p>使用PPP协议以字节为单位还是以比特为单位发送数据时, 填充方案不相同, 具体如下 :</p>
<p><strong>字节填充 :</strong></p>
<ul>
<li>信息字段出现标志字段的值的问题 : 信息字段的 0x7E 被拆分称为0x7D 0x5E, 信息字段的 0x7D 被拆分成0x7D 0x5D, ASCII 控制符(数值小于0x20)前加一个 0x7D 字节.(因此实际传输的信息可能是达不到1500字节)</li>
</ul>
<p><strong>零比特填充方法 :</strong></p>
<ul>
<li>避免出现和 0x7E 一样的比特序列, 0111,1110, 因此连续5个1补一个0</li>
<li>PPP协议用在SONET/SDH链路时, 是使用同步传输一连串的比特连续传送). 这时, PPP协议采用零比特填充方法来实现透明传输.</li>
<li>在发送端, 只要连续发现5个连续的1, 就立即填充一个0. 接收端扫描时, 5个连续的1后删除1个0.(可以用于避免0x7E的出现)</li>
</ul>
<p><strong>PPP协议的工作状态 :</strong></p>
<ul>
<li>当用户拨号接入ISP时, 路由器的调制解调器对拨号做出确认, 并建立一条物理连接.</li>
<li>PC机向路由器发送一系列的LCP分组(封装成多个PPP帧).</li>
<li>这些分组及其响应选择一些PPP参数, 和进行网络层配置, NCP给新接入的PC机分配一个临时的IP地址, 使PC机称为因特网上的一个主机.</li>
<li>通信完毕时, NCP释放网络层连接, 收回原来分配出去的IP地址. 接着, LCP释放数据链路层连接. 最后释放的是物理层连接.</li>
</ul>
<h3 id="使用广播信道的数据链路层"><a href="#使用广播信道的数据链路层" class="headerlink" title="使用广播信道的数据链路层"></a>使用广播信道的数据链路层</h3><p><strong>补充知识 : 局域网的特定与优点</strong></p>
<p>局域网最主要的特点是 : 网络为一个单位所拥有, 且地理范围和结点数目均有限.</p>
<p>局域网具有如下的一些主要优点 :</p>
<ul>
<li>具有广播功能, 从一个站点可以很方便地访问全网. 局域网上的主机可以共享连接在局域网上的各种硬件和软件资源.</li>
<li>便于系统的扩展和逐渐地演变, 各设备的位置可灵活调整和改变.</li>
<li>提高了系统的可靠性, 可用性和生存性.</li>
</ul>
<p><strong>共享通信媒体</strong></p>
<p>静态划分信道 : 频分复用, 时分复用, 波分复用, 码分复用.</p>
<p>动态媒体接入控制(多点接入) : 随机接入(被以太网采用), 受控接入(已不被采用)</p>
<p><strong>认识以太网</strong></p>
<p>最初的以太网是将许多计算机都连接在一根总线上. 当初认为这样的链接方式既简单又可靠, 因为总线上没有有源器件. 问题是, 同时只有一个设备发送数据, 而且所有的设备都可以接收到数据包, 不够安全.</p>
<p><strong>以太网协议 :</strong></p>
<p>以太网使用的是CSMA/CD协议 (带冲突检测的多点接入技术)</p>
<p>多点接入 : 表示许多计算机以多点接入的方式连接在一根总线上</p>
<p>载波监听 : 是指每一个站在发送数据之前先要检测一下总线上是否有其他计算机在发送数据, 如果有, 则暂时不要发送数据, 以免碰撞.</p>
<p><em>(P35 以太网的冲突检测暂时跳过)</em></p>
<h2 id="以太局域网"><a href="#以太局域网" class="headerlink" title="以太局域网"></a>以太局域网</h2><p><strong>以太网的两个标准 :</strong></p>
<ol>
<li>DIX Ethernet V2 是世界上第一个局域网产品(以太网)的规约.</li>
<li>IEEE 的 802.3 标准.</li>
</ol>
<p><strong>以太网与数据链路层的两个子层 :</strong></p>
<p>为了使数据链路层能更好地适应多种局域网标准, 802 委员会就将局域网的数据链路层拆成两个子层 :</p>
<ol>
<li>逻辑链路控制 LLC 子层</li>
<li>媒体接入控制 MAC 子层</li>
</ol>
<p><strong>以太网提供的服务 :</strong></p>
<p>以太网提供的服务是不可靠的交付, 即尽最大努力的交付.</p>
<p>当接收站收到有差错的数据帧时就丢弃此帧, 其他什么都不做. 差错的纠正由高层来决定.</p>
<p>如果高层发现丢弃一些数据而进行重传, 但以太网并不知道这是一个重传的帧, 而是当做一个新的数据帧来发送.</p>
<p><em>(集线器部分暂时跳过)</em></p>
<p>以太网的<strong>信道利用率 :</strong></p>
<p>以太网的信道被占用的情况 :</p>
<p>争用期长度为 2tao , 即端到端传播时延的两倍. 检测到碰撞后不发送干扰信号.</p>
<p>帧长为 L (bit) , 数据发送速率为 C (b/s) , 因而帧的发送时间为 L/C = T0 (s)</p>
<p>信道利用率的最大值 : 各站发送数据都不发生碰撞的话, Smax = T0 / (T0 + tao)</p>
<p><strong>MAC层 :</strong></p>
<p>在局域网中, 硬件地址又称为物理地址, 或 MAC 地址.</p>
<p>MAC地址一共是48位二进制位, 其中高24位为厂家地址段, 低24位由厂家自行指派.</p>
<p>适配器检查MAC地址 :</p>
<p>适配器从网络上每收到一个MAC帧就首先用硬件检查MAC帧中的MAC地址 :</p>
<ul>
<li>如果是发送往本站的帧则手下, 然后再进行其他的处理.</li>
<li>否则就将此帧丢弃, 不再进行其他的处理.</li>
</ul>
<p>“发往本站的帧” 包括以下三种类型的帧 :</p>
<ol>
<li>单播帧 (一对一)</li>
<li>广播帧 (一对全体) (MAC地址全1)</li>
<li>多播帧 (一对多)</li>
</ol>
<p><strong>以太网帧格式 :</strong></p>
<p>MAC帧 : | 目的地址{6} | 源地址{6} | 类型{2} | IP数据报{46 - 1500} | FCS{4} |  最短是64字节</p>
<p>物理层 : | 前同步码{7} | 帧开始定界符{1} | MAC帧 |</p>
<p><strong>无效的MAC帧 :</strong></p>
<ul>
<li>帧的长度不是整数个字节;</li>
<li>用收到的帧检验序列 FCS 查出有差错;</li>
<li>数据字段的长度不在 46 ~ 1500 字节之间;</li>
<li>有效的MAC帧长度为 64 ~ 1518 字节之间;</li>
<li>对于检查出的无效的MAC帧就简单地丢弃. 以太网不负责重传丢弃的帧.</li>
</ul>
<p><strong>帧间最小间隔 :</strong></p>
<p>帧间最小间隔为 9.6 us , 相当于 96 bit 的发送时间.</p>
<p>一个站在检测到总线开始空闲时, 还要等待 9.6 us 才能再次发送数据.</p>
<p>这样做是为了使刚刚收到的数据帧的站的接收缓存来得及清理, 做好接收下一帧的准备.</p>
<h2 id="扩展以太网"><a href="#扩展以太网" class="headerlink" title="扩展以太网"></a>扩展以太网</h2><p>集线器<strong>扩展 :</strong> 主机使用光纤和一对光纤调制解调器连接到集线器. 使用集线器连接最好低于30台机器, 冲突域变少, 冲突增大.</p>
<p><strong>网桥扩展 :</strong> 在一个较小的冲突域里收发数据, 网桥不会转发到其他冲突域中, 可以减少冲突. 网桥有自学习算法并且建立转发表.</p>
<p>透明网桥使用了生成树算法 : 为了避免产生转发的帧在网络中不断地兜圈子.</p>
<p><strong>交换机(多接口的高速网桥)扩展 :</strong> 安全, 效率高, 10M的交换机指的是每一个端口都是10M, 每一个端口都是全双工</p>
<p>交换机学习到的转发表格式 : | Vlan | Mac Address | Type | Ports |</p>
<h3 id="虚拟局域网"><a href="#虚拟局域网" class="headerlink" title="虚拟局域网"></a>虚拟局域网</h3><p><strong>LAN和VLAN :</strong></p>
<p>交换机的使用使得VLAN的创建成为可能.</p>
<p>虚拟局域网 VLAN 是由一些局域网网段构成的与物理位置无关的逻辑组.</p>
<ul>
<li>这些网段具有某些共同的需求.</li>
<li>每一个 VLAN 的帧都有一个明确的标识符, 指明发送这个帧的工作站是属于哪一个 VLAN.</li>
</ul>
<p>虚拟局域网其实只是局域网给用户提供的一种服务, 而不是一种新型局域网.</p>
<p>一个 VLAN = 一个广播域 = 逻辑网段(子网)</p>
<p><strong>ISL 标记(思科方式) :</strong></p>
<p>ISL 干道使 VLAN 能够跨骨干</p>
<ul>
<li>通过特定集成电路来实现</li>
<li>不需要再客户计算机上采取配置, 客户机不能够看到ISL头</li>
<li>在交换机之间, 路由器和交换机, 交换机和支持ISL网卡的服务器之间配置</li>
</ul>
<p>ISL 封装 : | DA | Type | User | SA | LEN | AAAA03 | HSA | VLAN | BPDU | INDEX | RES | 以太网帧 | CRC |</p>
<p><strong>虚拟局域网帧格式 :</strong></p>
<p>虚拟局域网协议允许在以太网的帧格式中插入一个4字节的标识符, 称为 VLAN 标记 (tag) , 用来指明发送该帧的工作站属于哪一个虚拟局域网.</p>
<p>格式 : | 目的地址{6} | 源地址{6} | VLAN标记{4} | 类型{2} | 数据{46 ~ 1500} | FCS{4} |</p>
<h2 id="高速以太网"><a href="#高速以太网" class="headerlink" title="高速以太网"></a>高速以太网</h2><p>速率达到或超过 100 Mb/s 的以太网称为高速以太网.</p>
<p><strong>100BASE-T 以太网 :</strong> 可以全双工方式下工作而无冲突发生. 因此, 不使用 CSMA/CD 协议. MAC帧格式仍然是 802.3 标准规定的. 帧间时间间隔从 9.6 us 变成了 0.96 us.</p>
<p><strong>吉比特以太网 :</strong> 允许在1 Gb/s 下全双工和半双工两种方式工作. 使用 802.3 协议规定的帧格式. 在半双工方式下使用 CSMA/CD 协议, 全双工不需要. 与 10BASE-T 和 100BASE-T 技术向后兼容.</p>
<p><strong>10吉比特以太网 :</strong> 以太网的工作范围已经从局域网(校园网, 企业网)扩大到城域网和广域网, 从而实现了端到端的以太网传输. 这种工作方式的好处是 : 成熟的技术, 互操作性好, 在广域网中使用以太网时价格便宜, 统一的帧格式简化了操作和管理.</p>
<h3 id="Cisco建网3层模型"><a href="#Cisco建网3层模型" class="headerlink" title="Cisco建网3层模型"></a>Cisco建网3层模型</h3><p>普通的交换机 : 连接计算机, 需要接口数量多</p>
<p>汇聚层交换机 : 连接普通的交换机, 一般单位是整栋楼</p>
<p>核心层交换机 : 连接汇聚层交换机, 一般单位是一个一个区域</p>
<h3 id="交换机安全"><a href="#交换机安全" class="headerlink" title="交换机安全"></a>交换机安全</h3><p>交换机可以设置某一个端口只能和指定的MAC地址的主机交换数据, 保证链路层安全. 也可以设置某个端口只能连接一台计算机. 否则, 关闭端口.</p>
<h1 id="计算机网络-第四章"><a href="#计算机网络-第四章" class="headerlink" title="计算机网络 第四章"></a>计算机网络 第四章</h1><blockquote>
<p>  第四章的主要内容是 : 网络层</p>
</blockquote>
<h2 id="网络层提供的两种服务"><a href="#网络层提供的两种服务" class="headerlink" title="网络层提供的两种服务"></a>网络层提供的两种服务</h2><p>网络层关注的是如何将分组从源端沿着网络路径送达目的端.</p>
<p>两种服务 :</p>
<ol>
<li>虚电路服务</li>
<li>数据报服务</li>
</ol>
<h3 id="虚电路-专线-固定-不需要写IP地址"><a href="#虚电路-专线-固定-不需要写IP地址" class="headerlink" title="虚电路(专线,固定. 不需要写IP地址)"></a>虚电路(专线,固定. 不需要写IP地址)</h3><p>虚电路表示这是一条逻辑上的连接, 分组都沿着这条逻辑连接按照存储转发方式传送, 而并不是真正建立了一条物理连接. 电路交换的电话通信是先建立一条真正的连接. 因此分组交换的虚连接和电路交换的连接只是类似, 并不完全一样.</p>
<h3 id="数据报-灵活-低耦合-需要写IP地址"><a href="#数据报-灵活-低耦合-需要写IP地址" class="headerlink" title="数据报(灵活,低耦合. 需要写IP地址)"></a>数据报(灵活,低耦合. 需要写IP地址)</h3><p>网络层向上只提供简单灵活的, 无连接的, 尽最大努力交付的数据报服务. 网络在发送分组时不需要先建立连接. 每一个分组(IP数据报)独立发送, 与其前后的分组无关. 网络层不提供服务质量的承诺. 即所传送的分组可能出错, 丢失, 重复和失序, 当然也不保证分组传送的时限.</p>
<p>尽最大努力交付的好处 :</p>
<ul>
<li>由于传输网络不提供端到端的可靠传输服务, 这就使网络中的路由器可以做的比较简单, 而且价格低廉.</li>
<li>如果主机中的进程通信需要是可靠的, 那么就由网络的主机中的运输层负责(包括差错处理, 流量控制等).</li>
<li>采用这种设计思路的好处是 : 网络的造价大大降低, 运行方式灵活, 能够适应多种应用.</li>
<li>因特网能够发展到今日的规模, 充分证明了当初采用这种设计思路的正确性.</li>
</ul>
<h3 id="虚电路服务和数据报服务的比较"><a href="#虚电路服务和数据报服务的比较" class="headerlink" title="虚电路服务和数据报服务的比较"></a>虚电路服务和数据报服务的比较</h3><p><strong>虚电路</strong></p>
<p>思路 : 可靠通信应当由网络来保证</p>
<p>连接的建立 : 必须有</p>
<p>终点地址 : 仅在连接建立阶段使用, 每个分组使用短的虚电路号</p>
<p>分组的转发 : 属于同一条虚电路的分组均按照同一路由进行转发</p>
<p>当结点出故障时 : 所有通过出故障的结点的虚电路均不能工作</p>
<p>分组的顺序 : 总是按发送顺序到达终点</p>
<p>端到端的差错处理和流量控制 : 可以由网络负责, 也可以由用户主机负责</p>
<p><strong>数据报</strong></p>
<p>思路 : 可靠通信应当由用户主机来保证</p>
<p>连接的建立 : 不需要</p>
<p>终点地址 : 每个分组都有终点的完整地址</p>
<p>分组的转发 : 每个分组独立选择路由进行转发</p>
<p>当结点出故障时 : 由故障的结点可能会丢失分组, 一些路由可能会发生变化</p>
<p>分组的顺序 : 到达终点时不一定按发送顺序</p>
<p>端到端的差错处理和流量控制 : 由用户主机负责</p>
<h2 id="网际协议-IP"><a href="#网际协议-IP" class="headerlink" title="网际协议 IP"></a>网际协议 IP</h2><h3 id="虚拟互联网"><a href="#虚拟互联网" class="headerlink" title="虚拟互联网"></a>虚拟互联网</h3><p><strong>网络互连的设备</strong></p>
<p>中间设备又称为中间系统或者中继系统.</p>
<ul>
<li>物理层中继系统 : 转发器 或者 集线器</li>
<li>数据链路层中继系统 : 网桥 或者 交换机</li>
<li>网络层中继系统 : 路由器</li>
<li>网络层以上的中继系统 : 网关</li>
</ul>
<p>当中继系统是集线器或网桥时, 一般不称为网络互连, 因为这仅仅是把一个网络扩大了, 而这仍然是一个网络.</p>
<p>网关由于比较复杂, 目前使用的较少.</p>
<p>互联网都是指用路由器进行互连的网络.</p>
<p>由于历史原因, 许多有关 TCP/IP 的文献将网络层使用的路由器称为网关.</p>
<p><strong>网络互联的问题</strong></p>
<p>互联在一起的网络要进行通信, 会遇到许多问题需要解决, 如 : 不同的寻址方案, 不同的最大分组长度, 不同的网络接入机制, 不同的超时控制, 不同的差错恢复方法, 不同的状态报告方法, 不同的路由选择技术, 不同的用户接入控制, 不同的服务, 不同的管理与控制方式.</p>
<p><strong>IP协议简介</strong></p>
<p>网际协议IP 是 TCP/IP 体系中两个最主要的协议之一. 与 IP协议配合使用的还有四个协议 :</p>
<ol>
<li>地址解析协议 ARP <em>(Address Resolution Protocol)</em></li>
<li>逆地址解析协议 RARP <em>(Reserve Address Resolution Protocol)</em></li>
<li>网际控制报文协议 ICMP <em>(Internet Control Message Protocol)</em></li>
<li>网际组管理协议 IGMP <em>(Internet Group Management Protocol)</em></li>
</ol>
<h3 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a>IP地址</h3><p><strong>IP层次结构</strong></p>
<p>层次化IP地址 : 层次化IP地址将32位的IP地址分为网络ID和主机ID</p>
<p><strong>网络地址</strong></p>
<p>网络地址唯一指定了每一个网络. 同一网络中的每台计算机都共享相同的网络地址, 并用它作为自己IP地址的一部分.</p>
<p>A类地址 : 8位网络号 (net-id : 0…….)</p>
<ul>
<li>最大网络数 126 第一个可用的网络号 1 最后一个可用的网络号 127 每个网络的最大主机数 16777214</li>
</ul>
<p>B类地址 : 16位网络号(net-id : 10…… ……..)</p>
<ul>
<li>最大网络数 16383 第一个可用的网络号 128.1 最后一个可用的网络号 191.255 每个网络的最大主机数 65534</li>
</ul>
<p>C类地址 : 24位网络号(net-id : 110….. …….. ………)</p>
<ul>
<li>最大网络数 2097151 第一个可用的网络号 192.0.1 最后一个可用的网络号 223.255.255 每个网络的最大主机数 254</li>
</ul>
<p>D类地址 : 组播 (1110 28.)</p>
<p>E类地址 : 研究 (1111 28.)</p>
<p>特殊的几个地址 : ****</p>
<p>127.0.0.1 本地回环地址</p>
<p>169.254.0.0 无法自动分配地址时,分配这个网段</p>
<p>RFC1918指明的专用地址(private address):</p>
<ul>
<li>10.0.0.0 - 10.255.255.255</li>
<li>172.16.0.0 - 172.31.255.255</li>
<li>192.168.0.0 - 192.168.255.255</li>
</ul>
<p><strong>子网掩码</strong></p>
<p>子网掩码的作用是确定IP地址的网络号的位数.</p>
<h3 id="划分子网和构造超网"><a href="#划分子网和构造超网" class="headerlink" title="划分子网和构造超网"></a>划分子网和构造超网</h3><p><strong>划分子网</strong></p>
<p>划分子网可以让一个网络号继续拆分出多个子网, 使得使用更加地充分.</p>
<p>比如, 一个C类地址的网络号是24位, 可以容纳254台主机, 可以进一步使用第25位主机号用于子网络号, 拆分126台和126台主机的两个子网.同时, 子网掩码也要往后移动一位.</p>
<p>划分四个子网时, 取2位作为子网络号, 因此可以用的主机号范围是 :</p>
<p>A: (0网络) 1 - 62 (63广播)</p>
<p>B: 65 - 126</p>
<p>C: 129 - 190</p>
<p>D: 192 - 254</p>
<p>网关是主机号为1的IP地址, 是路由器的出口IP地址.</p>
<p>广播是主机号为最大的IP地址.</p>
<p>最小划分到, 网络号为24位,子网络号为6位,主机号为2位: 00网络,01网关,02主机,03广播.</p>
<p><strong>构造超网</strong></p>
<p>将网络号左移若干位, 可以构造超网.</p>
<h3 id="IP地址与硬件地址"><a href="#IP地址与硬件地址" class="headerlink" title="IP地址与硬件地址"></a>IP地址与硬件地址</h3><p>使用IP地址通信, 而不是直接使用MAC地址通信, 是因为, IP地址可以确定源地址和目标地址, 而MAC地址在每一次转发的时候都需要改变. 除非没有网络层设备, 所有主机全部使用超大的交换机相连, 每一次广播都可以得知目标MAC地址的主机进行转发.</p>
<p><strong>ARP协议</strong></p>
<p>IP地址 → ARP → MAC地址</p>
<p>ARP欺骗: 在同一个网段里的计算机在需要知道一个IP地址的MAC地址时,会进行广播, 这个时候本应只有网关会回复你, 但是有其他主机告诉你MAC地址的话, 你就会受到ARP欺骗, 他把他自己作为”网关”, 可以控制每一个主机的带宽.</p>
<p><strong>RARP协议</strong></p>
<p>MAC地址 → RARP → IP地址(地址请求的过程)</p>
<h3 id="IP数据报格式"><a href="#IP数据报格式" class="headerlink" title="IP数据报格式"></a>IP数据报格式</h3><p>首部{20} | 数据部分</p>
<p>首部{20} :</p>
<p>| 版本{4b} | 首部长度{4b} | 区分服务{1} | 总长度{2} |</p>
<p>| 标识{2} | 标志{3b} | 片偏移{29b} |</p>
<p>| 生存时间{1} | 协议{1} | 首部检验和{2} |</p>
<p>| 源地址{4} |</p>
<p>| 目的地址{4} |</p>
<p>可变部分 : | 可选字段 | 填充至4字节的整数倍 |</p>
<p>| 数据部分 |</p>
<p>版本 : 4位,指定IP协议版本(IPv4, IPv6)</p>
<p>首部长度 : 4位,除数据部分以外的首部有多长(4位能够表示0-15,一个数代表4个字节,因此最大值为60字节)</p>
<p>区分服务 : 8位,只有使用区分服务,该字段才起作用.</p>
<p>总长度 : 16位,首部和数据之和的长度.(因此最大值为65535字节,不能超过最大传送单元MTU)</p>
<p>标识 : 16位,计数器,用来产生数据报的标识,不是序号,每产生一个数据包+1</p>
<p>标志 : 3位,目前只有前两位有意义,标志字段的最低位是MF.MF=1标识后面还有分片,MF=0标识后面没有分片.标识字段中间位是DF,只有DF=0才允许分片.</p>
<p>片偏移 : 13位,较长的分组在分片后,某片在原分组中的相对位置,片偏移以8个字节为偏移单位.比如1400/8 = 175</p>
<p>生存时间 : 8位,记为TTL,经过路由器的C++最大跳数</p>
<p>协议 : 8位,标记数据报携带的数据使用的协议</p>
<p>首部校验和 : 16位,用于检错,反码算术运算求和</p>
<p>可变部分 : 支持排错,测量以及安全等措施,1字节-40字节,很少被用到.</p>
<h3 id="IP转发分组的流程"><a href="#IP转发分组的流程" class="headerlink" title="IP转发分组的流程"></a>IP转发分组的流程</h3><p>数据路由: 路由器在不同网段转发数据报</p>
<p>网络畅通的条件: 能去能回,沿途的路由器都必须知道到源地址和目标地址网络下一跳给哪个接口</p>
<h2 id="网际控制报文协议-ICMP"><a href="#网际控制报文协议-ICMP" class="headerlink" title="网际控制报文协议 ICMP"></a>网际控制报文协议 ICMP</h2><h3 id="ICMP简介"><a href="#ICMP简介" class="headerlink" title="ICMP简介"></a>ICMP简介</h3><p>为了提高IP数据报交付成功的机会,在网际层使用了网际控制报文协议ICMP(Internet Control Message Protocol)</p>
<p>ICMP允许主机或路由器报告差错情况和提供有关异常情况的报告</p>
<p>ICMP不是高层协议,而是IP层协议</p>
<p>ICMP报文作为IP层数据报的数据,加上数据报的首部,组成IP数据报发送出去.</p>
<h3 id="ICMP种类"><a href="#ICMP种类" class="headerlink" title="ICMP种类"></a>ICMP种类</h3><p>ICMP报文的种类有两种,即ICMP差错报告报文和ICMP询问报文.</p>
<p>ICMP的前4个字节是统一的格式,共有三个字段: 即类型,代码和检验和.接着的4个字节的内容与ICMP的类型有关.</p>
<p><strong>差错报告报文(ping指令收到的是差错报告)</strong></p>
<p>有五种: 终点不可达,源点抑制,时间超过,参数问题,改变路由(重定向)</p>
<p><strong>询问报文(ping指令发送的是询问)</strong></p>
<p>有两种: 回送请求和回答报文,时间戳请求和回答报文</p>
<h3 id="ping的过程"><a href="#ping的过程" class="headerlink" title="ping的过程"></a>ping的过程</h3><p>A —ping—&gt; B</p>
<p>A 创建一个数据报, 格式如: | IP数据报首部 | 8字节 | IP数据报的数据字段(前面的8字节也属于IP数据报数据) |</p>
<p>B 收到ICMP询问报文后, 丢弃8字节以外的IP数据报的数据字段,组装ICMP的前8字节, 格式如: | 首部 | ICMP前8字节 | IP数据报首部 | 8字节 | 再发送给 A</p>
<h2 id="因特网的路由选择协议"><a href="#因特网的路由选择协议" class="headerlink" title="因特网的路由选择协议"></a>因特网的路由选择协议</h2><h3 id="RIP动态路由协议"><a href="#RIP动态路由协议" class="headerlink" title="RIP动态路由协议"></a>RIP动态路由协议</h3><p>RIP协议最早, 每30秒周期性地广播, 每一个目的地告诉相邻路由器0跳能到自己,路由器告诉相邻路由器1跳能到,然后不断地告诉其他路由器,如果某一条路径断开,30秒之后又能重新选择到一条通路.(依据跳数不一定是最佳路径,有一些跳数大的路径带宽大)</p>
<h3 id="OSPF内部网关协议"><a href="#OSPF内部网关协议" class="headerlink" title="OSPF内部网关协议"></a>OSPF内部网关协议</h3><p>向本自治系统中所有路由器发送信息,这里使用的方法是洪泛法. 发送的信息就是与本路由器相邻的所有路由器的链路状态, 但这是路由器所知道的部分信息. 只有当链路状态发生变化时,路由器才用洪泛法向所有路由器发送此信息.</p>
<p>相比RIP协议,OSPF是触发式更新路由表.</p>
<p>OSPF维护三个表:</p>
<ol>
<li>邻居表 hello包(局域网2s一次)</li>
<li>链路状态表 互相交换邻居表,构造网络拓扑图</li>
<li>计算路由表 迪杰斯特拉算法来计算最短路径,路径值是带宽</li>
</ol>
<h3 id="BGP外部网关协议"><a href="#BGP外部网关协议" class="headerlink" title="BGP外部网关协议"></a>BGP外部网关协议</h3><p>BGP是不同自治系统的路由器之间交换路由信息的协议.边界网关协议BGP只能是力求寻找一条能够到达目的网络且较好的路由(不能成环),而非寻找一条最佳的路径.每一个自治系统的管理员要选择至少一个路由器作为该自治系统的BGP发言人.</p>
<h2 id="虚拟专用网-VPN"><a href="#虚拟专用网-VPN" class="headerlink" title="虚拟专用网 VPN"></a>虚拟专用网 VPN</h2><p>VPN: 在互联网上传输私网数据, 因为私网数据不能在广域网上传输,所以在数据报前面再增加一个目标网络网关的目标地址和自己的网关源地址. 目标网关获得数据报之后解析得到一个数据报,目标地址是私网中的某个主机.</p>
<p>例如:</p>
<p>局域网数据报: | 10.0.0.2 | 10.0.0.8 | 数据 |</p>
<p>广域网数据报: | 23.23.2.2 | 23.23.2.20 | 10.0.0.2 | 10.0.0.8 | 数据 |</p>
<h2 id="网络地址转换-NAT"><a href="#网络地址转换-NAT" class="headerlink" title="网络地址转换 NAT"></a>网络地址转换 NAT</h2><p>1994年提出.</p>
<p>需要在专用网连接到因特网的路由器上安装NAT软件. 装有NAT软件的路由器叫做NAT路由器.它至少有一个有效的外部全球地址IPg.  所有使用本地地址的主机和外界通信时都要在NAT路由器上将其本地地址转换成IPg才能和因特网连接.</p>
<p>私网里的IP和端口号都被NAT路由器进行了转换,端口使用的是NAT的端口,存储一张IP与端口映射表即可.</p>
]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
      <tags>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>剑指 Offer 13. 机器人的运动范围</title>
    <url>/OXygenPanda.github.io/2020/11/20/leetcode/offer/%E5%89%91%E6%8C%87Offer%2013/</url>
    <content><![CDATA[<h2 id="剑指-Offer-13-机器人的运动范围"><a href="#剑指-Offer-13-机器人的运动范围" class="headerlink" title="剑指 Offer 13. 机器人的运动范围"></a>剑指 Offer 13. 机器人的运动范围</h2><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p><a class="btn" href="https://leetcode-cn.com/problems/ji-qi-ren-de-yun-dong-fan-wei-lcof/" title="leetcode链接">剑指 Offer 13. 机器人的运动范围</a></p>
<p><strong>难度:</strong><font color="orange">中等</font></p>
<p><strong>描述</strong></p>
<p>地上有一个m行n列的方格，从坐标<code> [0,0]</code> 到坐标<code> [m-1,n-1]</code> 。一个机器人从坐标 [0, 0] 的格子开始移动，它每次可以向左、右、上、下移动一格（不能移动到方格外），也不能进入行坐标和列坐标的数位之和大于k的格子。例如，当k为18时，机器人能够进入方格 [35, 37] ，因为3+5+3+7=18。但它不能进入方格 [35, 38]，因为3+5+3+8=19。请问该机器人能够到达多少个格子？</p>
<a id="more"></a>

<p><strong>示例</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">输入：m = <span class="number">2</span>, n = <span class="number">3</span>, k = <span class="number">1</span></span><br><span class="line">输出：<span class="number">3</span></span><br><span class="line"></span><br><span class="line">输入：m = <span class="number">3</span>, n = <span class="number">1</span>, k = <span class="number">0</span></span><br><span class="line">输出：<span class="number">1</span></span><br><span class="line"></span><br><span class="line">限制:</span><br><span class="line"><span class="number">1</span> &lt;= n,m &lt;= <span class="number">100</span></span><br><span class="line"><span class="number">0</span> &lt;= k &lt;= <span class="number">20</span></span><br></pre></td></tr></table></figure>

<h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>机器人的运动范围虽然是在一个左上顶点为<code>[0,0]</code>, 右下顶点为<code>[m-1,n-1]</code>的矩形中运动, 但是机器人必须从<code>[0,0]</code>出发, 也就是说虽然有一些点是符合各数位之和小于 k 的, 但是机器人不可达就不应该计算在内.</p>
<p>这里, 我直接把所有符合要求的点全部记录在一个二维数组中, 然后通过 dfs 来求出 “岛屿” 的大小.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">bool</span> _legalArea(<span class="keyword">int</span> i, <span class="keyword">int</span> j, <span class="keyword">int</span> k)&#123;</span><br><span class="line">        <span class="comment">//true : i 和 j 的各个位之后小于k</span></span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i)&#123;</span><br><span class="line">            sum += i % <span class="number">10</span>;</span><br><span class="line">            i /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(j)&#123;</span><br><span class="line">            sum += j % <span class="number">10</span>;</span><br><span class="line">            j /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (sum &lt;= k);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; &amp; <span class="built_in">map</span>)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(i&lt;<span class="number">0</span> || i&gt;=<span class="built_in">map</span>.size() || j&lt;<span class="number">0</span> || j&gt;= <span class="built_in">map</span>[<span class="number">0</span>].size() || <span class="built_in">map</span>[i][j] == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        count++;</span><br><span class="line">        <span class="built_in">map</span>[i][j] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> dx[<span class="number">4</span>]&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">1</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> dy[<span class="number">4</span>]&#123;<span class="number">-1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span> ; k &lt; <span class="number">4</span>; ++ k)&#123;</span><br><span class="line">            dfs(i+dx[k],j+dy[k],<span class="built_in">map</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">movingCount</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">map</span><span class="params">(m, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(n,<span class="number">0</span>))</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; m ; ++ i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span> ; j &lt; n ; ++ j)&#123;</span><br><span class="line">                <span class="keyword">if</span>(_legalArea(i,j,k) == <span class="literal">true</span>)&#123;</span><br><span class="line">                    <span class="built_in">map</span>[i][j] = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        dfs(<span class="number">0</span>,<span class="number">0</span>,<span class="built_in">map</span>);</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Leetcode</category>
        <category>剑指 Offer 专题</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
        <tag>DFS</tag>
      </tags>
  </entry>
  <entry>
    <title>剑指 Offer 12. 矩阵中的路径</title>
    <url>/OXygenPanda.github.io/2020/11/18/leetcode/offer/%E5%89%91%E6%8C%87Offer%2012/</url>
    <content><![CDATA[<h2 id="剑指-Offer-12-矩阵中的路径"><a href="#剑指-Offer-12-矩阵中的路径" class="headerlink" title="剑指 Offer 12. 矩阵中的路径"></a>剑指 Offer 12. 矩阵中的路径</h2><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p><a class="btn" href="https://leetcode-cn.com/problems/ju-zhen-zhong-de-lu-jing-lcof/" title="leetcode链接">剑指 Offer 12. 矩阵中的路径</a></p>
<p><strong>难度:</strong><font color="orange">中等</font></p>
<p><strong>描述</strong></p>
<p>请设计一个函数，用来判断在一个矩阵中是否存在一条包含某字符串所有字符的路径。路径可以从矩阵中的任意一格开始，每一步可以在矩阵中向左、右、上、下移动一格。如果一条路径经过了矩阵的某一格，那么该路径不能再次进入该格子。例如，在下面的3×4的矩阵中包含一条字符串“bfce”的路径（路径中的字母用加粗标出）。</p>
<p>[[“a”,<strong>“b”</strong>,”c”,”e”],<br> [“s”,<strong>“f”</strong>,<strong>“c”</strong>,”s”],<br> [“a”,”d”,<strong>“e”</strong>,”e”]]</p>
<p>但矩阵中不包含字符串“abfb”的路径，因为字符串的第一个字符b占据了矩阵中的第一行第二个格子之后，路径不能再次进入这个格子。</p>
<a id="more"></a>

<p><strong>示例</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">输入: board = [[<span class="string">&quot;A&quot;</span>,<span class="string">&quot;B&quot;</span>,<span class="string">&quot;C&quot;</span>,<span class="string">&quot;E&quot;</span>],[<span class="string">&quot;S&quot;</span>,<span class="string">&quot;F&quot;</span>,<span class="string">&quot;C&quot;</span>,<span class="string">&quot;S&quot;</span>],[<span class="string">&quot;A&quot;</span>,<span class="string">&quot;D&quot;</span>,<span class="string">&quot;E&quot;</span>,<span class="string">&quot;E&quot;</span>]], word = <span class="string">&quot;ABCCED&quot;</span></span><br><span class="line">输出: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">输入: board = [[<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>],[<span class="string">&quot;c&quot;</span>,<span class="string">&quot;d&quot;</span>]], word = <span class="string">&quot;abcd&quot;</span></span><br><span class="line">输出: <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">限制:</span><br><span class="line"><span class="number">1</span> &lt;= board.length &lt;= <span class="number">200</span></span><br><span class="line"><span class="number">1</span> &lt;= board[i].length &lt;= <span class="number">200</span></span><br></pre></td></tr></table></figure>

<h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>这是一道很经典的走迷宫题目了, 而且学习过DFS的话, 一定也看到过或者做过这道题目.</p>
<p>DFS: 深度优先搜索的意图是通过迭代的方式穷极一条路径, 如果最终无法匹配则舍弃(可以提前剪枝), 然后再选择其他路径再一往无前走到底.</p>
<p>在这个题目里的意思是, 我先从每一个位置 <code>(i,j)</code> 递归出<code>N</code>条长度和字符串长度相同的路径, 如果路径正好能够和字符串匹配则返回 <code>true</code> , 如果不匹配则再去寻找其他路径.</p>
<p>但是有几个优化的地方 : </p>
<ul>
<li>提前剪枝 : 判断边界不在 <code>board</code> 范围内, 或者当前位置的字符和我期待的字符串的某个字符不同就提前结束</li>
<li>board[i][j] = ‘#’ : 可以不使用 visit 数组来标记是否访问过该节点, 通过先把当前字符修改后还原节约空间</li>
<li>或运算的短路 : 像注释里那么写的话, 每一层递归都会做四次运算, 递归深度过大的话, 会超时; 而像 <code>13:16</code> 这么写, 可以有效利用”短路”, 当某一个<code>dfs</code>返回<code>true</code>时, 不需要去执行后续的递归操作, 大大节约了时间.</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt;&gt; &amp; board, <span class="built_in">string</span> word, <span class="keyword">int</span> start)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(i&lt;<span class="number">0</span> || i&gt;=n || j&lt;<span class="number">0</span> || j&gt;=m || board[i][j] != word[start])</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(word.length() == start + <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">char</span> tmp = board[i][j];</span><br><span class="line">        board[i][j] = <span class="string">&#x27;#&#x27;</span>;</span><br><span class="line">        <span class="keyword">int</span> dx[<span class="number">4</span>] = &#123;<span class="number">1</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> dy[<span class="number">4</span>] = &#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">1</span>&#125;;</span><br><span class="line">        <span class="keyword">bool</span> ret = dfs(i+dx[<span class="number">0</span>], j+dy[<span class="number">0</span>], board, word, start + <span class="number">1</span>) ||</span><br><span class="line">                   dfs(i+dx[<span class="number">1</span>], j+dy[<span class="number">1</span>], board, word, start + <span class="number">1</span>) ||</span><br><span class="line">                   dfs(i+dx[<span class="number">2</span>], j+dy[<span class="number">2</span>], board, word, start + <span class="number">1</span>) ||</span><br><span class="line">                   dfs(i+dx[<span class="number">3</span>], j+dy[<span class="number">3</span>], board, word, start + <span class="number">1</span>);</span><br><span class="line">        <span class="comment">//        for(int index = 0; index &lt; 4; ++index)&#123;</span></span><br><span class="line">        <span class="comment">//            ret |= dfs(i+dx[index], j+dy[index], board, word, start + 1);</span></span><br><span class="line">        board[i][j] = tmp;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">exist</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt;&gt;&amp; board, <span class="built_in">string</span> word)</span> </span>&#123;</span><br><span class="line">        n = board.size(), m = board[<span class="number">0</span>].size();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; m; ++j)</span><br><span class="line">                <span class="keyword">if</span>(dfs(i, j, board, word, <span class="number">0</span>))</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Leetcode</category>
        <category>剑指 Offer 专题</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
        <tag>DFS</tag>
      </tags>
  </entry>
  <entry>
    <title>剑指 Offer 11. 旋转数组的最小数字</title>
    <url>/OXygenPanda.github.io/2020/11/17/leetcode/offer/%E5%89%91%E6%8C%87Offer%2011/</url>
    <content><![CDATA[<h2 id="剑指-Offer-11-旋转数组的最小数字"><a href="#剑指-Offer-11-旋转数组的最小数字" class="headerlink" title="剑指 Offer 11. 旋转数组的最小数字"></a>剑指 Offer 11. 旋转数组的最小数字</h2><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p><a class="btn" href="https://leetcode-cn.com/problems/xuan-zhuan-shu-zu-de-zui-xiao-shu-zi-lcof/" title="leetcode链接">剑指 Offer 11. 旋转数组的最小数字</a></p>
<p><strong>难度:</strong><font color="green">简单</font></p>
<p><strong>描述</strong></p>
<p>把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。输入一个递增排序的数组的一个旋转，输出旋转数组的最小元素。例如，数组<code> [3,4,5,1,2]</code> 为 <code>[1,2,3,4,5]</code> 的一个旋转，该数组的最小值为1。  </p>
<a id="more"></a>

<p><strong>示例</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">输入：[<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">输出：<span class="number">1</span></span><br><span class="line"></span><br><span class="line">输入：[<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">1</span>]</span><br><span class="line">输出：<span class="number">0</span></span><br></pre></td></tr></table></figure>

<h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>遥记得很久以前写斐波那契数列的问题时, 不考虑时间空间复杂度. 一股脑把所有的斐波那契数存下来, 现在针对这一题来说, 它没有必要存下每一个斐波那契数, 只需要返回第<code>n</code>个,所以就把DP问题优化了一下,减少了空间复杂度.<code>mod</code>的位置比较重要, 因为中途计算的时候可能会使得dp_2超出整形范围,所以在运算时就得<code>mod</code>.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">fib</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">0</span> || n == <span class="number">1</span>)    <span class="keyword">return</span> n;</span><br><span class="line">        <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line">        <span class="keyword">int</span> dp_0 = <span class="number">0</span>, dp_1 = <span class="number">1</span>, dp_2;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i)&#123;</span><br><span class="line">            dp_2 = (dp_0 + dp_1) % mod;</span><br><span class="line">            dp_0 = dp_1;</span><br><span class="line">            dp_1 = dp_2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp_2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Leetcode</category>
        <category>剑指 Offer 专题</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title>剑指 Offer 10- I. 斐波那契数列</title>
    <url>/OXygenPanda.github.io/2020/11/17/leetcode/offer/%E5%89%91%E6%8C%87Offer%2010/</url>
    <content><![CDATA[<h2 id="剑指-Offer-10-I-斐波那契数列"><a href="#剑指-Offer-10-I-斐波那契数列" class="headerlink" title="剑指 Offer 10- I. 斐波那契数列"></a>剑指 Offer 10- I. 斐波那契数列</h2><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p><a class="btn" href="https://leetcode-cn.com/problems/fei-bo-na-qi-shu-lie-lcof/" title="leetcode链接">剑指 Offer 10. 斐波那契数列</a></p>
<p><strong>难度:</strong><font color="green">简单</font></p>
<p><strong>描述</strong></p>
<p>写一个函数，输入 <code>n</code> ，求斐波那契（Fibonacci）数列的第 <code>n</code> 项。斐波那契数列的定义如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">F(<span class="number">0</span>) = <span class="number">0</span>,   F(<span class="number">1</span>) = <span class="number">1</span></span><br><span class="line">F(N) = F(N - <span class="number">1</span>) + F(N - <span class="number">2</span>), 其中 N &gt; <span class="number">1.</span></span><br></pre></td></tr></table></figure>

<p>斐波那契数列由 0 和 1 开始，之后的斐波那契数就是由之前的两数相加而得出。</p>
<p>答案需要取模 1e9+7（1000000007），如计算初始结果为：1000000008，请返回 1。</p>
<p><strong>示例</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">输入：n = <span class="number">2</span></span><br><span class="line">输出：<span class="number">1</span></span><br><span class="line"></span><br><span class="line">输入：n = <span class="number">5</span></span><br><span class="line">输出：<span class="number">5</span></span><br><span class="line">   </span><br><span class="line">限制：</span><br><span class="line"><span class="number">0</span> &lt;= n &lt;= <span class="number">100</span></span><br></pre></td></tr></table></figure>

<h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>遥记得很久以前写斐波那契数列的问题时, 不考虑时间空间复杂度. 一股脑把所有的斐波那契数存下来, 现在针对这一题来说, 它没有必要存下每一个斐波那契数, 只需要返回第<code>n</code>个,所以就把DP问题优化了一下,减少了空间复杂度.<code>mod</code>的位置比较重要, 因为中途计算的时候可能会使得dp_2超出整形范围,所以在运算时就得<code>mod</code>.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">fib</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">0</span> || n == <span class="number">1</span>)    <span class="keyword">return</span> n;</span><br><span class="line">        <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line">        <span class="keyword">int</span> dp_0 = <span class="number">0</span>, dp_1 = <span class="number">1</span>, dp_2;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i)&#123;</span><br><span class="line">            dp_2 = (dp_0 + dp_1) % mod;</span><br><span class="line">            dp_0 = dp_1;</span><br><span class="line">            dp_1 = dp_2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp_2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Leetcode</category>
        <category>剑指 Offer 专题</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title>shared_ptr的简单实现</title>
    <url>/OXygenPanda.github.io/2020/11/12/C++/smart_ptr/</url>
    <content><![CDATA[<h1 id="智能指针的实现"><a href="#智能指针的实现" class="headerlink" title="智能指针的实现"></a>智能指针的实现</h1><p align="center">
<a href="https://oxygenpanda.github.io/" target="_blank"><img alt="Website" src="https://img.shields.io/badge/博客-劳振煜的知識倉儲-faf2f2.svg?style=flat-square&logo=Blogger"></a>
<a href="https://www.github.com/OXygenPanda" target="_blank"><img src="https://img.shields.io/badge/Github-@劳振煜-f3e1e1.svg?style=flat-square&logo=GitHub"></a>
<a href="https://i.loli.net/2020/11/11/SBZ2mFJGKLjUtTO.jpg" target="_blank"><img src="https://img.shields.io/badge/微信-@OXygen-f1d1d1.svg?style=flat-square&logo=WeChat"></a>

</p><p>程序运行时需要分配内存释放内存, 在C++中我们使用关键词 <code>new</code> 和 <code>delete</code> . </p>
<p><code>new</code> 是一个运算符, 负责申请堆内存, 分为两个步骤 : 1.malloc 2.operator new, 即先申请内存, 再构造对象. 最后返回该堆内存的指针. </p>
<p><code>delete</code>也是一个运算符, 负责释放堆内存, 分为两个步骤 :1.operator delete 2.free, 即先调用对象的析构函数, 再释放内存.</p>
<p>堆内存需要程序员手动释放, 因此如果程序抛出异常, 来不及释放内存或者忘记释放内存都会导致内存泄漏. </p>
<a id="more"></a>

<p>因此, C++11以后有了三种更加安全, 更加智能的”指针”. 说是指针, 其实是用起来像指针的类. 这一种思想和STL的仿函数, 迭代器中类似.</p>
<p>标准库提供的三种智能指针的区别在于管理底层指针的方法不同, <code>shared_ptr</code> 允许多个指针指向同一个对象, <code>unique_ptr</code> 则”独占”所指向的对象. 标准库还定义了一种名为<code>weak_ptr</code>的伴随类, 它是一种弱引用, 指向<code>shared_ptr</code>所管理的对象, 这三种智能指针都定义在<code>memory</code>头文件中.</p>
<p>这一篇文章主要是手动实现了一下 <code>shared_ptr</code> 和 <code>unique_ptr</code> 类. </p>
<h2 id="shared-ptr"><a href="#shared-ptr" class="headerlink" title="shared_ptr"></a>shared_ptr</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">myshared_ptr</span>&#123;</span></span><br><span class="line">	<span class="keyword">private</span>:</span><br><span class="line">		T * _ptr;</span><br><span class="line">		<span class="keyword">int</span> * _count;</span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">		<span class="comment">// 构造函数</span></span><br><span class="line">		myshared_ptr():_ptr(<span class="literal">nullptr</span>),_count(<span class="literal">nullptr</span>)&#123;</span><br><span class="line">			<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;default ctor&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		myshared_ptr(T * ptr):_ptr(ptr),_count(<span class="keyword">new</span> <span class="keyword">int</span>(<span class="number">1</span>))&#123;</span><br><span class="line">			<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;raw pointer ctor : &quot;</span> &lt;&lt; *ptr  &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		myshared_ptr(myshared_ptr &amp; ref):_ptr(ref._ptr),_count(&amp;(++*(ref._count)))&#123;</span><br><span class="line">			<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;shared_ptr ctor : &quot;</span> &lt;&lt; *ref._ptr &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// 析构函数</span></span><br><span class="line">		~myshared_ptr()&#123;</span><br><span class="line">			<span class="keyword">if</span>(--*(<span class="keyword">this</span>-&gt;_count) == <span class="number">0</span>)&#123;</span><br><span class="line">				<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; *_ptr &lt;&lt; <span class="string">&quot; dector!&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">				<span class="keyword">delete</span> _ptr;</span><br><span class="line">				<span class="keyword">delete</span> _count;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// 拷贝赋值</span></span><br><span class="line">		myshared_ptr &amp; <span class="keyword">operator</span>=(myshared_ptr &amp; ref)&#123;</span><br><span class="line">			<span class="keyword">if</span>(&amp;ref == <span class="keyword">this</span>)</span><br><span class="line">				<span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">			++*ref._count;</span><br><span class="line">			<span class="keyword">if</span>(--*(<span class="keyword">this</span>-&gt;_count) == <span class="number">0</span>)&#123;</span><br><span class="line">				<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; *_ptr &lt;&lt; <span class="string">&quot; dector!&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">				<span class="keyword">delete</span> <span class="keyword">this</span>-&gt;_ptr;</span><br><span class="line">				<span class="keyword">delete</span> <span class="keyword">this</span>-&gt;_count;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">this</span>-&gt;_ptr = ref._ptr;</span><br><span class="line">			<span class="keyword">this</span>-&gt;_count = ref._count;</span><br><span class="line">			<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;operator = success&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">			<span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">		<span class="comment">// 引用</span></span><br><span class="line">	    T <span class="keyword">operator</span>*()&#123;</span><br><span class="line">			<span class="keyword">if</span>(_count == <span class="number">0</span>)</span><br><span class="line">				<span class="keyword">return</span> (T)<span class="number">0</span>;</span><br><span class="line">			<span class="keyword">return</span> *<span class="keyword">this</span>-&gt;_ptr;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// 箭头</span></span><br><span class="line">	    T * <span class="keyword">operator</span>-&gt;()&#123;</span><br><span class="line">			<span class="keyword">if</span>(_count == <span class="number">0</span>)</span><br><span class="line">				<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">this</span>-&gt;_ptr;</span><br><span class="line">		&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//main()</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span>&#123;</span><br><span class="line">    <span class="function">myshared_ptr&lt;<span class="built_in">string</span>&gt; <span class="title">pstr1</span><span class="params">(<span class="keyword">new</span> <span class="built_in">string</span>(<span class="string">&quot;hello&quot;</span>))</span></span>;</span><br><span class="line">    <span class="function">myshared_ptr&lt;<span class="built_in">string</span>&gt; <span class="title">pstr2</span><span class="params">(pstr1)</span></span>;</span><br><span class="line">    <span class="function">myshared_ptr&lt;<span class="built_in">string</span>&gt; <span class="title">pstr3</span><span class="params">(<span class="keyword">new</span> <span class="built_in">string</span>(<span class="string">&quot;world&quot;</span>))</span></span>;</span><br><span class="line">    pstr3 = pstr1;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//运行结果</span></span><br><span class="line">--------------------</span><br><span class="line">raw pointer ctor : hello</span><br><span class="line"><span class="built_in">shared_ptr</span> ctor : hello</span><br><span class="line">raw pointer ctor : world</span><br><span class="line">world dector!</span><br><span class="line"><span class="keyword">operator</span> = success</span><br><span class="line">hello dector!</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="unique-ptr"><a href="#unique-ptr" class="headerlink" title="unique_ptr"></a>unique_ptr</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Deleter</span>&#123;</span></span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">		<span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">		<span class="function"><span class="keyword">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">(T *p)</span></span>&#123;</span><br><span class="line">			<span class="keyword">delete</span> p;</span><br><span class="line">		&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> D = Deleter&gt;</span><br><span class="line">class myunique_ptr&#123;</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * 1. 一个对象只能有一个 unique_ptr 指向, 当指针销毁,对象也销毁</span></span><br><span class="line"><span class="comment">	 * 2. 初始化 unique_ptr 只能采用直接初始化的方式(explicit 修饰构造函数)</span></span><br><span class="line"><span class="comment">	 * 3. 不支持拷贝构造和拷贝赋值</span></span><br><span class="line"><span class="comment">	 * 4. 支持搬移构造和搬移赋值获得函数返回值或者函数局部变量</span></span><br><span class="line"><span class="comment">	 * 5. 必须提供删除器</span></span><br><span class="line"><span class="comment">	 *</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">private</span>:</span><br><span class="line">		T * _ptr;</span><br><span class="line">		D del;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">		<span class="function"><span class="keyword">explicit</span> <span class="title">myunique_ptr</span><span class="params">(T *pointer = <span class="literal">nullptr</span>, <span class="keyword">const</span> D &amp;dd = D())</span></span></span><br><span class="line">			:_ptr(pointer),del(dd)&#123;&#125;</span><br><span class="line">		~myunique_ptr()&#123;</span><br><span class="line">			<span class="keyword">delete</span> _ptr;</span><br><span class="line">		&#125;</span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">		myunique_ptr(<span class="keyword">const</span> myunique_ptr&amp;) = <span class="keyword">delete</span>;</span><br><span class="line">		myunique_ptr &amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> myunique_ptr&amp;) = <span class="keyword">delete</span>;</span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">		myunique_ptr(myunique_ptr &amp;&amp; right_value)</span><br><span class="line">			:_ptr(right_value._ptr),del(<span class="built_in">std</span>::move(right_value.del))&#123;</span><br><span class="line">				right_value._ptr = <span class="literal">nullptr</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		myunique_ptr &amp; <span class="keyword">operator</span>=(myunique_ptr &amp;&amp; right_value) <span class="keyword">noexcept</span>&#123;</span><br><span class="line">			<span class="keyword">if</span>(<span class="keyword">this</span> != &amp;right_value)&#123;</span><br><span class="line">				<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;operator &amp;&amp; right_value&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">				del(*<span class="keyword">this</span>);</span><br><span class="line">				_ptr = right_value._ptr;</span><br><span class="line">				del = <span class="built_in">std</span>::move(right_value.del);</span><br><span class="line">				right_value._ptr = <span class="literal">nullptr</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">		<span class="comment">// release() 返回资源,释放管理</span></span><br><span class="line">		<span class="function">T * <span class="title">release</span><span class="params">()</span></span>&#123;</span><br><span class="line">			T * tmp = _ptr;</span><br><span class="line">			_ptr = <span class="literal">nullptr</span>;</span><br><span class="line">			<span class="keyword">return</span> tmp;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// reset()</span></span><br><span class="line">		<span class="comment">// reset(T * ptr)</span></span><br><span class="line">		<span class="function"><span class="keyword">void</span> <span class="title">reset</span><span class="params">()</span></span>&#123;</span><br><span class="line">			del(_ptr);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="function"><span class="keyword">void</span> <span class="title">reset</span><span class="params">(T * ptr)</span></span>&#123;</span><br><span class="line">			<span class="keyword">if</span>(_ptr != <span class="literal">nullptr</span>)&#123;</span><br><span class="line">				del(_ptr);</span><br><span class="line">				_ptr = ptr;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// swap()</span></span><br><span class="line">		<span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(myunique_ptr &amp; other)</span> <span class="keyword">noexcept</span></span>&#123;</span><br><span class="line">			<span class="keyword">using</span> <span class="built_in">std</span>::swap;</span><br><span class="line">			swap(_ptr, other._ptr);</span><br><span class="line">			swap(del, other.del);</span><br><span class="line">		&#125;</span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">		<span class="function">T* <span class="title">get</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> _ptr; &#125;</span><br><span class="line">		<span class="function">D&amp; <span class="title">get_deleter</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> del;   &#125;</span><br><span class="line">		T&amp; <span class="keyword">operator</span>*()   &#123; <span class="keyword">return</span> *_ptr; &#125;</span><br><span class="line">		T* <span class="keyword">operator</span>-&gt;()  &#123; <span class="keyword">return</span> _ptr;  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//main</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">base</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	base()&#123;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;ctor&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	~base()&#123;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;dector&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	base(<span class="keyword">const</span> base&amp;)&#123;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;left_value ctor&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	base(base&amp;&amp;)&#123;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;right_value ctor&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">base_deleter</span>&#123;</span></span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">		<span class="function"><span class="keyword">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">(base* p)</span> <span class="keyword">const</span></span>&#123;</span><br><span class="line">			<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;deleter function call&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">			<span class="keyword">delete</span> p;</span><br><span class="line">		&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> ** argv)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// myunique_ptr&lt;string&gt; uptr1;</span></span><br><span class="line">		<span class="comment">// myunique_ptr&lt;string&gt; uptr2(new string(&quot;abc&quot;));</span></span><br><span class="line">		<span class="comment">// myunique_ptr&lt;string&gt; uptr3(nullptr);</span></span><br><span class="line">		<span class="comment">//</span></span><br><span class="line">		base_deleter d;</span><br><span class="line">		myunique_ptr&lt;base,base_deleter&gt; uptr1;</span><br><span class="line">		myunique_ptr&lt;base,base_deleter&gt; uptr2(nullptr);</span><br><span class="line">		myunique_ptr&lt;base,base_deleter&gt; uptr3(new base);</span><br><span class="line">		myunique_ptr&lt;base,base_deleter&gt; uptr4(new base, d);</span><br><span class="line">		base* fp = uptr4.release();</span><br><span class="line">		assert(uptr4.get() == <span class="literal">nullptr</span>);</span><br><span class="line">		<span class="keyword">delete</span> fp;</span><br><span class="line">		uptr3.reset(<span class="keyword">new</span> base());</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//结果</span></span><br><span class="line">--------------------</span><br><span class="line">ctor</span><br><span class="line">ctor</span><br><span class="line">dector</span><br><span class="line">ctor</span><br><span class="line">deleter function call</span><br><span class="line">dector</span><br><span class="line">dector</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++11</tag>
        <tag>智能指针</tag>
      </tags>
  </entry>
  <entry>
    <title>深入理解操作系统学习笔记</title>
    <url>/OXygenPanda.github.io/2020/11/08/HugeFour/OperatingSystem/QingHua/Deep_into_OperatingSystem_all/</url>
    <content><![CDATA[<p align="center">
<a href="https://oxygenpanda.github.io/" target="_blank"><img alt="Website" src="https://img.shields.io/badge/博客-劳振煜的知識倉儲-faf2f2.svg?style=flat-square&logo=Blogger"></a>
<a href="https://www.github.com/OXygenPanda" target="_blank"><img src="https://img.shields.io/badge/Github-@劳振煜-f3e1e1.svg?style=flat-square&logo=GitHub"></a>
<a href="https://i.loli.net/2020/11/11/SBZ2mFJGKLjUtTO.jpg" target="_blank"><img src="https://img.shields.io/badge/微信-@OXygen-f1d1d1.svg?style=flat-square&logo=WeChat"></a>



</p><h1 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h1><blockquote>
<p>  第一章的主要内容是 : 操作系统的一些知识</p>
</blockquote>
<h3 id="操作系统是什么？"><a href="#操作系统是什么？" class="headerlink" title="操作系统是什么？"></a>操作系统是什么？</h3><p>用户角度：操作系统是一个控制软件</p>
<a id="more"></a>

<ul>
<li>管理应用程序</li>
<li>为应用程序提供服务</li>
<li>杀死应用程序</li>
</ul>
<p>程序角度：操作系统是资源管理器</p>
<ul>
<li>管理外设、分配资源</li>
<li>抽象<ul>
<li>将CPU抽象成进程</li>
<li>将磁盘抽象成文件</li>
<li>将内存抽象成地址空间</li>
</ul>
</li>
</ul>
<h3 id="操作系统层次"><a href="#操作系统层次" class="headerlink" title="操作系统层次"></a>操作系统层次</h3><p>位于硬件之上，应用程序之下。</p>
<h3 id="操作系统的界面和内核"><a href="#操作系统的界面和内核" class="headerlink" title="操作系统的界面和内核"></a>操作系统的界面和内核</h3><p>Linux Windows Android 的界面属于外壳(Shell) ，而不是内核(kernel)。操作系统研究的是内核，处于Shell之下。</p>
<h3 id="操作系统内部组件"><a href="#操作系统内部组件" class="headerlink" title="操作系统内部组件"></a>操作系统内部组件</h3><ul>
<li>CPU调度器</li>
<li>物理内存管理</li>
<li>虚拟内存管理</li>
<li>文件系统管理</li>
<li>中断处理与设备驱动</li>
</ul>
<h3 id="操作系统特征"><a href="#操作系统特征" class="headerlink" title="操作系统特征"></a>操作系统特征</h3><ul>
<li>并发<ul>
<li>一段时间内运行多个进程（并行 : 一个时间点运行多个进程，一般要求有多个CPU)</li>
<li>需要OS管理和调度</li>
</ul>
</li>
<li>共享<ul>
<li>“同时”共享</li>
<li>互斥共享</li>
</ul>
</li>
<li>虚拟<ul>
<li>让每一个用户觉得的有一个计算机专门为他服务</li>
</ul>
</li>
<li>异步<ul>
<li>程序是走走停停，而不是一直运行</li>
</ul>
</li>
</ul>
<h1 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h1><blockquote>
<p>  第二章的主要内容是 : 操作系统的异常/中断/系统调用</p>
</blockquote>
<h2 id="探究计算机启动过程"><a href="#探究计算机启动过程" class="headerlink" title="探究计算机启动过程"></a>探究计算机启动过程</h2><p><strong>作用解析</strong></p>
<p>Disk : 存放OS和Bootloader</p>
<p>BOIS : 基于I/O处理系统</p>
<p>Bootloader : 加载OS，将OS放入内存</p>
<p><strong>结构</strong></p>
<p>Disk</p>
<p>   |___ OS</p>
<p>   |___ Bootloader</p>
<p><strong>开机流程</strong></p>
<ol>
<li><p>BIOS</p>
<ul>
<li>开机后，寻找显卡和执行BIOS (此时, <code>CS : IP = 0xF000 : 0xFFF0</code>,  CS/IP 两个寄存器) </li>
<li>将Bootloader从磁盘的引导扇区加载到0x7C00 (Bootloader一共占用512M字节的内存)</li>
<li>跳转到 <code>CS : IP = 0x0000 : 0x7C00</code></li>
</ul>
</li>
<li><p>Bootloader</p>
<ul>
<li>将操作系统的代码和数据从硬盘加载到内存中</li>
<li>跳转到操作系统的起始地址</li>
</ul>
</li>
</ol>
<h2 id="中断、异常、系统调用"><a href="#中断、异常、系统调用" class="headerlink" title="中断、异常、系统调用"></a>中断、异常、系统调用</h2><h3 id="中断"><a href="#中断" class="headerlink" title="中断"></a>中断</h3><p>中断来源于外设，来自不同的硬件设备的计时器和网络的中断。</p>
<p><strong>中断流程</strong></p>
<p>硬件：设置中断标记（CPU初始化）</p>
<ol>
<li>将内部、外部事件设置中断标记</li>
<li>中断事件的ID</li>
</ol>
<p>软件</p>
<ol>
<li>保存当前处理状态（寄存器之类的一些数据）</li>
<li>根据中断事件的ID跳转到中断服务程序，中断服务程序处理</li>
<li>清楚中断标记</li>
</ol>
<h3 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h3><p>异常来源于不良的应用程序，非法指令或者其他坏的处理状态（如：内存出错）。</p>
<p><strong>异常处理流程</strong></p>
<ol>
<li>保存现场</li>
<li>异常处理<ol>
<li>杀死了产生异常的程序</li>
<li>重新执行异常指令</li>
</ol>
</li>
<li>恢复现场</li>
</ol>
<h3 id="系统调用"><a href="#系统调用" class="headerlink" title="系统调用"></a>系统调用</h3><p>系统调用来源于应用程序，应用程序主动向操作系统发出服务请求。程序访问主要是通过高层次的API，而不是直接调用系统调用函数。</p>
<p><strong>APIs</strong></p>
<ul>
<li>Win32 API 用于Windows</li>
<li>POSIX API 用于 POSIX-based systems（包括UNIX，LINUX，Mac OS X）</li>
<li>Java API 用于JAVA虚拟机</li>
</ul>
<p><strong>特点</strong></p>
<ul>
<li>通常情况下，每个系统调用有对应的序号<ul>
<li>系统调用接口根据这些序号来维护表的索引</li>
</ul>
</li>
<li>系统调用接口调用内核态中预期的系统调用<ul>
<li>并返回系统调用的状态和其他任何返回值</li>
</ul>
</li>
<li>用户不需要知道系统调用是如何实现的<ul>
<li>只需要获取API和了解操作系统将什么作为返回结果</li>
<li>操作系统接口的细节大部分都隐藏在API中</li>
</ul>
</li>
</ul>
<p><strong>用户态</strong>：操作系统运行中，CPU处于的特权级别，不能直接执行特权指令</p>
<p><strong>内核态</strong>：操作系统运行中，CPU处于的特权级别，可以执行任何一条指令</p>
<p><strong>系统调用</strong>：触发CPU从用户态到内核态的转换，切换程序和内核的堆栈，需要一定的开销</p>
<p><strong>跨越操作系统边界的开销（值得的且必须的，保证了操作系统的安全性）</strong></p>
<ul>
<li>在执行时间上的开销超过程序调用</li>
<li>开销：<ul>
<li>建立中断、异常、系统调用号与对应服务例程映射关系的初始化开销</li>
<li>建立内核堆栈</li>
<li>验证参数</li>
<li>内核态映射到用户态的地址空间（更新页面映射权限）</li>
<li>内核态独立地址空间（TLB）</li>
</ul>
</li>
</ul>
<h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><table>
<thead>
<tr>
<th>类型</th>
<th>源头</th>
<th>处理时间</th>
<th>响应</th>
</tr>
</thead>
<tbody><tr>
<td>中断</td>
<td>外设</td>
<td>异步</td>
<td>持续，对应用程序透明</td>
</tr>
<tr>
<td>异常</td>
<td>应用程序意向不到的行为</td>
<td>同步</td>
<td>杀死或重新执行指令</td>
</tr>
<tr>
<td>系统调用</td>
<td>应用程序请求系统提供服务</td>
<td>同步或异步</td>
<td>等待和持续</td>
</tr>
</tbody></table>
<blockquote>
<p>  异步：应用程序不知道什么时候会发生中断</p>
</blockquote>
<blockquote>
<p>  同步：执行到某一条指令一定会发生该事件</p>
</blockquote>
<h3 id="为什么应用程序不能直接访问硬件？"><a href="#为什么应用程序不能直接访问硬件？" class="headerlink" title="为什么应用程序不能直接访问硬件？"></a>为什么应用程序不能直接访问硬件？</h3><ul>
<li>在计算机运行时，内核是被信任的第三方</li>
<li>只有内核可以执行特权指令</li>
<li>为了方便应用程序</li>
</ul>
<h1 id="第三章"><a href="#第三章" class="headerlink" title="第三章"></a>第三章</h1><blockquote>
<p>  第三章的主要内容是 : 操作系统的物理内存管理</p>
</blockquote>
<h2 id="计算机体系结构"><a href="#计算机体系结构" class="headerlink" title="计算机体系结构"></a>计算机体系结构</h2><ol>
<li>CPU</li>
<li>内存</li>
<li>I/O</li>
</ol>
<h2 id="内存分层体系"><a href="#内存分层体系" class="headerlink" title="内存分层体系"></a>内存分层体系</h2><h3 id="内存分层体系-1"><a href="#内存分层体系-1" class="headerlink" title="内存分层体系"></a>内存分层体系</h3><p>运行内存(主存) / 磁盘(虚拟内存). 主存是在运行程序时所需要保存的数据空间，而磁盘是用于持久化数据保存的数据空间.</p>
<p>CPU可以访问的内存包括两大类 : 寄存器 / cache(L1缓存 / L2缓存)</p>
<p><strong>层次</strong></p>
<p>微处理器(CPU访问)</p>
<p>|___CPU寄存器 / L1缓存</p>
<p>|___L2缓存</p>
<p>主存(程序访问)</p>
<p>磁盘(程序访问)</p>
<blockquote>
<p>  从CPU寄存器到磁盘，读写速度不断降低，单位成本不断降低，大小不断增大。</p>
</blockquote>
<h3 id="内存管理目标"><a href="#内存管理目标" class="headerlink" title="内存管理目标"></a>内存管理目标</h3><ul>
<li><p>抽象：逻辑地址空间</p>
</li>
<li><p>保护：独立地址空间</p>
</li>
<li><p>共享：访问相同内存</p>
</li>
<li><p>虚拟：更多的地址空间</p>
</li>
</ul>
<h3 id="内存管理方法"><a href="#内存管理方法" class="headerlink" title="内存管理方法"></a>内存管理方法</h3><ul>
<li>程序重定位</li>
<li>分段</li>
<li>分页</li>
<li>虚拟内存</li>
<li>按需分页虚拟内存</li>
</ul>
<blockquote>
<p>  实现高度依赖于硬件, 其中内存管理单元(MMU)负责处理CPU的内存访问请求</p>
</blockquote>
<h2 id="地址空间"><a href="#地址空间" class="headerlink" title="地址空间"></a>地址空间</h2><p>地址空间的定义</p>
<ul>
<li>物理地址空间 —— 硬件支持的地址空间( address : [0, Max_sys] )</li>
<li>逻辑地址空间 —— 一个运行在程序所拥有的的内存范围( address : [0, Max_prog] )</li>
</ul>
<h2 id="连续内存分配"><a href="#连续内存分配" class="headerlink" title="连续内存分配"></a>连续内存分配</h2><h3 id="内存碎片问题"><a href="#内存碎片问题" class="headerlink" title="内存碎片问题"></a>内存碎片问题</h3><p>内存碎片问题指的是空闲的内存无法被利用</p>
<ul>
<li>外部碎片 : 分配单元间的未使用内存</li>
<li>内部碎片 : 分配单元内的未使用内存</li>
</ul>
<h3 id="分区的动态分配"><a href="#分区的动态分配" class="headerlink" title="分区的动态分配"></a>分区的动态分配</h3><p>分区的动态分配方式有以下三种 :</p>
<ol>
<li>第一匹配分配 : 在内存中找到第一个比需求大的空闲块, 分配给应用程序</li>
<li>最优适配分配 : 在内存中找到最小的空闲块, 分配给应用程序</li>
<li>最差适配分配 : 在内存中找到最大的空闲块, 分配给应用程序</li>
</ol>
<p>分配方式的区别</p>
<table>
<thead>
<tr>
<th>分配方式</th>
<th>第一匹配分配</th>
<th>最优适配分配</th>
<th>最差适配分配</th>
</tr>
</thead>
<tbody><tr>
<td>分配方式实现需求</td>
<td>1. 按地址排序的空闲块列表<br>2. 分配需要寻找一个合适的分区<br>3. 重分配需要检查是否可以合并相邻空闲分区</td>
<td>1. 按尺寸排序的空闲块列表<br>2. 分配需要寻找一个合适的分区<br>3. 重分配需要检查是否可以合并相邻空闲分区</td>
<td>1. 按尺寸排序的空闲块列表<br>2. 分配最大的分区<br>3. 重分配需要检查是否可以合并相邻空闲分区</td>
</tr>
<tr>
<td>优势</td>
<td>简单 / 易于产生更大空闲块</td>
<td>比较简单 / 大部分分配是小尺寸时高效</td>
<td>分配很快 / 大部分分配是中尺寸时高效</td>
</tr>
<tr>
<td>劣势</td>
<td>产生外部碎片 / 不确定性</td>
<td>产生外部碎片 / 重分配慢 / 产生很多没用的微小碎片</td>
<td>产生外部碎片 / 重分配慢 / 易于破碎大的空闲块以致大分区无法被分配</td>
</tr>
</tbody></table>
<blockquote>
<p>  三种分配方式并无优劣之分，因为我们无法判断内存请求的大小</p>
</blockquote>
<h2 id="碎片整理方法"><a href="#碎片整理方法" class="headerlink" title="碎片整理方法"></a>碎片整理方法</h2><p>可以看到的是，三种分区动态分配的方式都会产生外部碎片，因此我们可以对碎片进行一定的整理来解决碎片问题。</p>
<ol>
<li><p>压缩式碎片整理</p>
<ul>
<li>重置程序以合并碎片</li>
<li>要求所有程序是动态可重置的</li>
<li>问题 : <ul>
<li>何时重置 ? (在程序处于等待状态时才可以重置)</li>
<li>需要考虑内存拷贝的开销</li>
</ul>
</li>
</ul>
</li>
<li><p>交换式碎片整理</p>
<ul>
<li><p>运行程序需要更多的内存时，抢占等待的程序并且回收它们的内存</p>
</li>
<li><p>问题 :</p>
<ul>
<li>哪些程序应该被回收 ?</li>
</ul>
</li>
<li><p>情况 :</p>
<p>运行中 : P3</p>
<p>等待中 : P1 P2 P4</p>
<p>内存分布 -&gt; 主存 : OS / P1 / P3 / P2 / P4 磁盘 : 空</p>
<p>当P3程序需要更大的内存时 -&gt;</p>
<p>内存分布 -&gt; 主存 : OS / P1 / P3 / P2         磁盘 : P4</p>
</li>
</ul>
</li>
</ol>
<h1 id="第四章"><a href="#第四章" class="headerlink" title="第四章"></a>第四章</h1><blockquote>
<p>  第四章的主要内容是：操作系统的非连续内存分配</p>
</blockquote>
<p>第三章介绍的是连续内存管理, 即 : 操作系统加载到内存以及程序加载到内存中时, 分配一块连续的空闲(内存)块. 但是容易出现碎片问题, 这一章介绍的非连续内存分配可以有效的减少碎片的出现.</p>
<h2 id="非连续内存分配的必要性"><a href="#非连续内存分配的必要性" class="headerlink" title="非连续内存分配的必要性"></a>非连续内存分配的必要性</h2><h3 id="连续内存分配的缺点"><a href="#连续内存分配的缺点" class="headerlink" title="连续内存分配的缺点"></a>连续内存分配的缺点</h3><ol>
<li>分配给一个程序的物理内存是连续的</li>
<li>内存利用率低</li>
<li>有外碎片 / 内碎片的问题</li>
</ol>
<h3 id="非连续内存分配的优点"><a href="#非连续内存分配的优点" class="headerlink" title="非连续内存分配的优点"></a>非连续内存分配的优点</h3><ol>
<li><p>一个程序的物理地址空间是非连续的</p>
</li>
<li><p>更好的内存利用和管理</p>
</li>
<li><p>允许共享代码与数据(共享库等…)</p>
</li>
<li><p>支持动态加载和动态链接</p>
</li>
</ol>
<h3 id="非连续内存分配的缺点"><a href="#非连续内存分配的缺点" class="headerlink" title="非连续内存分配的缺点"></a>非连续内存分配的缺点</h3><ol>
<li><p>建立虚拟地址和物理地址的转换难度大</p>
<ul>
<li><p>软件方案</p>
</li>
<li><p>硬件方案(采用硬件方案) : 分段 / 分页</p>
</li>
</ul>
</li>
</ol>
<h2 id="非连续内存分配"><a href="#非连续内存分配" class="headerlink" title="非连续内存分配"></a>非连续内存分配</h2><h3 id="分段-Segmentation"><a href="#分段-Segmentation" class="headerlink" title="分段(Segmentation)"></a>分段(Segmentation)</h3><p><strong>段 :</strong> 在程序中会有来自不同文件的函数 ; 在程序执行时, 不同的数据也有不同的字段, 比如 : 堆 / 栈 / .bss / .data 等</p>
<p>**分段 : ** 更好的分离和共享</p>
<p>程序的分段地址空间如下图所示 : </p>
<img src="https://camo.githubusercontent.com/9db208b68e844759210535e7ec1929186e60dae2153ac930d2e662a782ca7bd1/68747470733a2f2f692e6c6f6c692e6e65742f323032302f31312f31312f4e416e7a484b6a3574454d343136682e6a7067">

<p><strong>分段寻址方案</strong></p>
<p>逻辑地址空间连续，但是物理地址空间不连续，使用映射机制进行关联.</p>
<p>一个段 : 一个内存”块”</p>
<p>程序访问内存地址需要 : 一个二维的二元组(s, addr) → (段号, 地址)</p>
<p>操作系统维护一张段表, 存储(段号, 物理地址中的起始地址, 长度限制)</p>
<p>物理地址 : 段表中的起始地址 + 二元组中的偏移地址</p>
<h3 id="分页-Paging"><a href="#分页-Paging" class="headerlink" title="分页(Paging)"></a>分页(Paging)</h3><h4 id="分页地址空间"><a href="#分页地址空间" class="headerlink" title="分页地址空间"></a>分页地址空间</h4><p>划分物理内存至固定大小的帧(Frame)</p>
<ul>
<li>大小是2的幂, 512 / 4096 / 8192</li>
</ul>
<p>划分逻辑地址空间至相同大小的页(Page)</p>
<ul>
<li>大小是2的幂, 512 / 4096 / 8192</li>
</ul>
<p>建立方案 → 转换逻辑地址为物理地址(pages to frames)</p>
<ul>
<li>页表</li>
<li>MMU / TLB</li>
</ul>
<p><strong>帧(Frame)</strong></p>
<p>物理内存被分割为大小相等的帧. 一个内存物理地址是一个二元组(f, o) → (帧号, 帧内偏移)</p>
<p>帧号 : F位, 共有2^F个帧</p>
<p>帧内偏移 : S位, 每帧有2^S个字节</p>
<p>物理地址 = 2^S * f + o</p>
<p>(例子 : 16-bit地址空间, 9-bit(512 byte) 大小的页帧 物理地址 = (3,6) 物理地址 = 2^9 * 3 + 6 = 1542)</p>
<blockquote>
<p>  分页和分段的最大区别 : 这里的 S 是一个固定的数, 而分段中的长度限制不定</p>
</blockquote>
<p><strong>页(Page)</strong></p>
<p>一个程序的逻辑地址空间被划分为大小相等的页. 页内偏移的大小 = 帧内偏移的大小 页号大小 &lt;&gt; 帧号大小</p>
<p>一个逻辑地址是一个二元组(p, o) → (页号, 页内偏移)</p>
<p>页号 : P位, 共有2^P个页</p>
<p>页内偏移 : S位, 每页有2^S个字节</p>
<p>虚拟地址  = 2^S * p + o</p>
<h4 id="页寻址方案"><a href="#页寻址方案" class="headerlink" title="页寻址方案"></a>页寻址方案</h4><p>操作系统维护一张页表, 页表保存了逻辑地址——物理地址之间的映射关系</p>
<p>存储 : (页号, 帧号)</p>
<ul>
<li>逻辑地址空间应当大于物理内存空间</li>
<li>页映射到帧</li>
<li>页是连续的虚拟内存</li>
<li>帧是非连续的物理内存(有助于减少碎片的产生)</li>
<li>不是所有的页都有对应的帧</li>
</ul>
<h3 id="页表-Page-Table"><a href="#页表-Page-Table" class="headerlink" title="页表(Page Table)"></a>页表(Page Table)</h3><h4 id="页表概述"><a href="#页表概述" class="headerlink" title="页表概述"></a>页表概述</h4><p>每一个运行的程序都有一个页表</p>
<ul>
<li>属于程序运行状态, 会动态变化</li>
<li>PTBR : 页表基址寄存器</li>
</ul>
<p><strong>转换流程</strong></p>
<p>CPU根据程序的page的页号的若干位, 计算出索引值index, 在页表中搜索这个index, 得到的是帧号, 帧号和原本的offset组成物理地址.</p>
<p>页表中还有一些特殊标志位</p>
<ul>
<li>dirty bit,</li>
<li>resident bit, (0 : 对应的物理页帧在内存中不存在 ; 1 : 存在)</li>
<li>clock / reference bit</li>
</ul>
<p><strong>转换实例</strong></p>
<p>16位地址的系统</p>
<ul>
<li>32KB的物理内存</li>
<li>每页的 1024 byte</li>
</ul>
<p>逻辑地址空间 : (4, 0) … (3, 1023)</p>
<p>页表 :</p>
<p>Flags |  Frame nums</p>
<p>1 0 1    0 0 0 0 0          → 内存访问异常(可能要杀死程序)</p>
<p>0 1 1    0 0 1 0 0           → 页帧是4 偏移是 1023 → 物理地址 (4, 1023)</p>
<h4 id="分页机制的性能问题"><a href="#分页机制的性能问题" class="headerlink" title="分页机制的性能问题"></a>分页机制的性能问题</h4><p>访问一个内存单元需要2次内存访问</p>
<ul>
<li>一次用于获取页表项</li>
<li>一次用于访问数据</li>
</ul>
<p>页表可能非常大</p>
<ul>
<li>64位机器如果每页1024字节, 那么一个页表的大小会是多少？(2^64 / 2^10 = 2^54 存放不下)</li>
<li>每一个运行的程序都需要有一个页表</li>
</ul>
<p>如何处理？</p>
<ul>
<li>缓存(Caching)</li>
<li>间接(Indirection)访问</li>
</ul>
<h4 id="转换后备缓冲区-TLB"><a href="#转换后备缓冲区-TLB" class="headerlink" title="转换后备缓冲区(TLB)"></a>转换后备缓冲区(TLB)</h4><p>缓解时间问题</p>
<p>Translation Look-aside Buffer(TLB) 是一个缓冲区. CPU中有快表TLB(可以将经常访问的页表存放在这边)</p>
<p>缓存近期访问的页帧转换表项</p>
<ul>
<li>TLB使用关联内存实现, 具备快速访问性能</li>
<li>如果TLB命中, 物理页号可以很快被获取</li>
<li>如果TLB未命中, 对应的表项被更新到TLB中(x86的CPU由硬件实现, 其他的可能是由操作系统实现)</li>
</ul>
<h4 id="二级-多级页表"><a href="#二级-多级页表" class="headerlink" title="二级/多级页表"></a>二级/多级页表</h4><p>时间换空间</p>
<p>二级页表</p>
<ul>
<li>将页号分为两个部分, 页表分为两个, 一级页号对应一级页表, 二级页号对应二级页表.</li>
<li>一级页号查表获得在二级页表的起始地址, 地址加上二级页号的值, 在二级页表中获得帧号</li>
<li>节约了一定的空间, 在一级页表中如果resident bit = 0, 可以使得在二级页表中不存储相关index,而只有一张页表的话, 这一些index都需要保留</li>
</ul>
<p>多级页表</p>
<ul>
<li>通过把页号分为k个部分, 来实现多级间接页表, 建立一棵页表”树”</li>
</ul>
<h4 id="反向页表"><a href="#反向页表" class="headerlink" title="反向页表"></a>反向页表</h4><p>解决大地址空间问题</p>
<p>目的 : 根据帧号获得页号</p>
<p>反向页表只需要存在一张即可</p>
<ul>
<li>有大地址空间(64-bits), 前向映射页表变得繁琐. 比如 : 使用了5级页表</li>
<li>不是让页表与逻辑地址空间的大小相对应, 而是当页表与物理地址空间的大小相对应. 逻辑地址空间增长速度快于物理地址空间</li>
</ul>
<h5 id="基于页寄存器-Page-Registers-的方案"><a href="#基于页寄存器-Page-Registers-的方案" class="headerlink" title="基于页寄存器(Page Registers)的方案"></a>基于页寄存器(Page Registers)的方案</h5><p>存储 (帧号, 页号) 使得表大小与物理内存大小相关, 而与逻辑内存关联减小.</p>
<p>每一个帧和一个寄存器关联, 寄存器内容包括 :</p>
<ul>
<li>resident bit : 此帧是否被占用</li>
<li>occupier : 对应的页号 p</li>
<li>protection bits : 保护位</li>
</ul>
<p>实例 :</p>
<ul>
<li>物理内存大小是 : 4096 * 4096 = 4K * 4KB = 16 MB</li>
<li>页面大小是 : 4096 bytes = 4 KB</li>
<li>页帧数 : 4096 = 4 K</li>
<li>页寄存器使用的空间(假设8 bytes / register) : 8 * 4096 = 32 Kbytes</li>
<li>页寄存器带来的额外开销 : 32K / 16M = 0.2%</li>
<li>虚拟内存大小 : 任意</li>
</ul>
<p>优势 :</p>
<ul>
<li>转换表的大小相对于物理内存来说很小</li>
<li>转换表的大小跟逻辑地址空间的大小无关</li>
</ul>
<p>劣势 :</p>
<ul>
<li>需要的信息对调了, 即根据帧号可以找到页号</li>
<li>如何转换回来? (如何根据页号找到帧号)</li>
<li>在需要在反向页表中搜索想要的页号</li>
</ul>
<h5 id="基于关联内存-associative-memory-的方案"><a href="#基于关联内存-associative-memory-的方案" class="headerlink" title="基于关联内存(associative memory)的方案"></a>基于关联内存(associative memory)的方案</h5><p>硬件设计复杂, 容量不大, 需要放置在CPU中</p>
<ul>
<li>如果帧数较少, 页寄存器可以被放置在关联内存中</li>
<li>在关联内存中查找逻辑页号<ul>
<li>成功 : 帧号被提取</li>
<li>失败 : 页错误异常 (page fault)</li>
</ul>
</li>
<li>限制因素:<ul>
<li>大量的关联内存非常昂贵(难以在单个时钟周期内完成 ; 耗电)</li>
</ul>
</li>
</ul>
<h5 id="基于哈希-hash-的方案"><a href="#基于哈希-hash-的方案" class="headerlink" title="基于哈希(hash)的方案"></a>基于哈希(hash)的方案</h5><p>哈希函数 : h(PID, p) 从 PID 标号获得页号</p>
<p>在反向页表中通过哈希算法来搜索一个页对应的帧号</p>
<ul>
<li>对页号做哈希计算, 为了在帧表中获取对应的帧号</li>
<li>页 i 被放置在表 f(i) 位置, 其中 f 是设定的哈希函数</li>
<li>为了查找页 i , 执行下列操作 :<ul>
<li>计算哈希函数 f(i) 并且使用它作为页寄存器表的索引, 获取对应的页寄存器</li>
<li>检查寄存器标签是否包含 i, 如果包含, 则代表成功, 否则失败</li>
</ul>
</li>
</ul>
<h1 id="第五章"><a href="#第五章" class="headerlink" title="第五章"></a>第五章</h1><blockquote>
<p>  第五章的主要内容是：操作系统的虚拟内存管理技术</p>
</blockquote>
<h2 id="虚拟内存的起因"><a href="#虚拟内存的起因" class="headerlink" title="虚拟内存的起因"></a>虚拟内存的起因</h2><p>使用硬盘/磁盘使更多的程序在有限的内存中运行</p>
<p>理想的存储器 : 更大更快更便宜和非易失性的存储区</p>
<h2 id="覆盖技术"><a href="#覆盖技术" class="headerlink" title="覆盖技术"></a>覆盖技术</h2><p>如果是程序太大, 超出了内存的容量, 可以采用手动的概率(overlay)技术, 只把需要的指令和数据保存在内存当中</p>
<p>目的 : 是在较小的可用内存中运行较大的程序, 常用于多道程序系统, 与分区存储管理配合使用.</p>
<p>原理 :</p>
<p>把程序按照其自身逻辑结构, 划分为若干个功能上相互独立的程序模块, 那些不会同时执行的模块共享同一块内存区域, 按时间先后来运行.</p>
<ul>
<li>必要部分(常用功能)的代码和数据常驻内存;</li>
<li>可选部分(不常用功能)在其他程序模块中实现, 平时存放在外存中, 在需要用到时才装入内存;</li>
<li>不存在调用关系的模块不必同时装入到内存, 从而可以相互覆盖, 即这些模块共用一个分区.</li>
</ul>
<blockquote>
<p>  也就是说,程序松耦合的部分可以按需装入内存,不需要的时候放在外存中,多个不常用部分共用一个分区.</p>
</blockquote>
<p>实例 :</p>
<p>A(20k) <strong>__B(50k) __</strong> D(30k)<br>        | <strong>__ C(30k) __</strong> E(20k)<br>                             |____ F(40k)</p>
<p>因此不需要将整个程序190k的数据全部放入内存中, 而是划分为 常驻区(20k) 覆盖区0(50k) 覆盖区1(40k) 压缩至了110k的内存空间使用</p>
<p>缺点 :</p>
<ul>
<li>由程序员来把一个大的程序划分为若干个小的功能模块, 并确定各个模块之间的覆盖关系, 费时费力, 增加了编程的复杂度;</li>
<li>覆盖模块并从外存装入内存, 实际上是以时间延长来换取空间节省.</li>
</ul>
<h2 id="交换技术"><a href="#交换技术" class="headerlink" title="交换技术"></a>交换技术</h2><p>如果是程序太多, 超过了内存的容量, 可以采用自动的交换(swapping)技术, 把暂时不能执行的程序送到外存中</p>
<p>目的 : 多道程序在内存时, 让正在运行的程序或需要运行的程序获得更多的内存资源</p>
<p>原理 :</p>
<p>可将暂时不能运行的程序送到外存, 从而获得空闲内存空间. 操作系统把一个进程的整个地址空间的内容保存到外存中(换出 swap out), 而将外存中的某个进程的地址空间读入到内存中(换入 swap in). 换入换出内容的大小为整个程序的地址空间.</p>
<p>存在问题 :</p>
<ul>
<li>交换时机的确定 : 何时需要发生交换? 只当内存空间不够或有不够的危险时换出;</li>
<li>交换区的大小 : 必须足够大以存放所有用户进程的所有内存映像的拷贝, 必须能够对这些内存映像进行直接存取</li>
<li>程序换入时的重定位 : 换出后再换入的内存位置一定要在原来的位置上嘛?(可能出现寻址问题) 最好采用动态地址映射的方法</li>
</ul>
<h2 id="覆盖技术和交换技术的对比"><a href="#覆盖技术和交换技术的对比" class="headerlink" title="覆盖技术和交换技术的对比"></a>覆盖技术和交换技术的对比</h2><p>特点 :</p>
<ul>
<li>覆盖只能发生在那些相互之间没有调用关系的程序模块之间, 因此程序员必须给出程序内的各个模块之间的逻辑覆盖结构.</li>
<li>交换技术是以在内存中的程序大小为单位进行的, 它不需要程序员给出各个模块之间的逻辑覆盖结构.</li>
<li>换言之, 交换发生在内存中程序与管理程序或操作系统之间, 而覆盖则发生在运行程序的内部.</li>
</ul>
<p>在内存不够用的情形下, 可以采用覆盖技术和交换技术, 但是 :</p>
<ul>
<li>覆盖技术 : 需要程序要自己把整个程序划分为若干个小的功能模块, 并确定各个模块之间的覆盖关系, 增加了程序员的负担.</li>
<li>交换技术 : 以进程作为交换的单位, 需要把进程的整个地址空间都换入换出, 增加了处理器的开销.</li>
</ul>
<h2 id="虚拟内存管理技术"><a href="#虚拟内存管理技术" class="headerlink" title="虚拟内存管理技术"></a>虚拟内存管理技术</h2><p>如果想要在有限容量的内存中, 以更小的页粒度为单位装入更多更大的程序, 可以采用自动的虚拟存储技术</p>
<ul>
<li><p>目标</p>
<p>像覆盖技术那样, 不是把程序的所有内容都放在内存中, 因而能够运行比当前的空闲内存空间还要大的程序. 但做的更好, 由操作系统自动来完成, 无需程序员的干涉.</p>
<p>像交换技术那样, 能够实现进程在内存与外存之间的交换, 因而获得更多的空闲内存空间. 但做的更好, 只对进程的部分内容在内存和外存之间进行交换.</p>
</li>
<li><p>程序局部性原理</p>
<p>程序的局部性原理(principle of locality) : 指程序在执行过程中的一个较短时期, 所执行的指令地址和指令的操作数地址, 分别局限于一定的区域.</p>
<ul>
<li>时间局部性 : 一条指令的一次执行和下次执行, 一个数据的一次访问和下次访问都集中在一个较短时期内 ;</li>
<li>空间局部性 : 当前指令和邻近的几条指令, 当前访问的数据和邻近的几个数据都集中在一个较小区域内.</li>
</ul>
<p>程序的局部性原理表明, 从理论上来说, 虚拟存储技术是能够实现的. 而且在实现了以后应该是能够取得一个满意的效果.</p>
<p>实例 :</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">题目描述 :</span><br><span class="line">页面大小为<span class="number">4</span>k, 分配给每个进程的物理页面是<span class="number">1.</span> </span><br><span class="line">在一个进程中, 定义了如下的二维数组 <span class="keyword">int</span> A[<span class="number">1024</span>][<span class="number">1024</span>]. 该数组按行存放在内存, 每一行放在一个页面中.</span><br><span class="line">考虑一下程序的编写方法对缺页率的影响?</span><br><span class="line"></span><br><span class="line">程序编写方法<span class="number">1</span> : (发生了<span class="number">1024</span>*<span class="number">1024</span>次缺页中断)</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">1024</span>; j++)</span><br><span class="line">		<span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">1024</span>; i++)</span><br><span class="line">				A[i][j] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">程序编写方法<span class="number">2</span> : (发生了<span class="number">1024</span>次缺页中断)</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">1024</span>; i++)</span><br><span class="line">		<span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">1024</span>; j++)</span><br><span class="line">				A[i][j] = <span class="number">0</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>基本概念</p>
<p>可以在页式或段式内存管理的基础上实现</p>
<ul>
<li>在装入程序时, 不必将其全部装入内存, 而只需将当前需要执行的部分页面或段装入到内存中, 就可以让程序开始执行;</li>
<li>在程序执行过程中, 如果需执行的指令或访问的数据尚未在内存中(称为缺页或缺段), 则由处理器通知操作系统将相应的页面或段调入到内存, 然后继续执行程序;</li>
<li>另一方面, 操作系统将内存中暂时不使用的页面或段调出保存在外存上, 从而腾出更多空闲内存空间存放将要装入的程序以及将要调入的页面或段.</li>
</ul>
</li>
<li><p>基本特征</p>
<ul>
<li>大的用户空间 : 通过把物理内存和外存相结合, 提供给用户的虚拟内存空间通常大于实际的物理内存, 即实现了这两者的分离. 如32位的虚拟地址理论上可以访问4GB, 而可能计算机上仅有256M的物理内存, 但硬盘容量大于4GB.</li>
<li>部分交换 : 与交换技术相比较, 虚拟存储的调入和调出是对部分虚拟地址空间进行的;</li>
<li>不连续性 : 物理内存分配的不连续性, 虚拟地址空间使用的不连续性.</li>
</ul>
</li>
<li><p>虚拟页式内存管理</p>
<p>页式内存管理</p>
<p>页表 : 完成逻辑页到物理页帧的映射</p>
<p>根据页号去页表中寻找索引, 先查看 resident bit 是否为0, 0表示不存在, 1表示映射关系存在, 获得帧号加上原本的偏移, 获得了物理地址.</p>
<p>虚拟页式内存管理</p>
<ul>
<li><p>大部分虚拟存储系统都采用虚拟页式存储管理技术, 即在页式存储管理的基础上, 增加请求调页和页面置换功能.</p>
</li>
<li><p>基本思路</p>
<ul>
<li>当一个用户程序要调入内存运行时, 不是将该程序的所有页面都装入内存, 而是只装入部分的页面, 就可启动程序运行.</li>
<li>在运行的过程中, 如果发现要运行的程序或要访问的数据不再内存, 则向系统发出缺页的中断请求, 系统在处理这个中断时, 将外存中相应的页面调入内存, 使得该程序能够继续运行.</li>
</ul>
</li>
<li><p>页表表项</p>
<p>逻辑页号 | 访问位 | 修改位 | 保护位 | 驻留位 | 物理页帧号</p>
<p>驻留位 : 表示该页是在内存中还是在外存.</p>
<p>保护位 : 表示允许对该页做何种类型的访问, 如只读, 可读写, 可执行等</p>
<p>修改位 : 表示此页在内存中是否被修改过. 当系统回收该物理页面时, 根据此位来决定是否把它的内容写回外存</p>
<p>访问位 : 如果该页被访问过(包括读写操作), 则设置此位. 用于页面置换算法.</p>
</li>
<li><p>缺页中断处理过程 :</p>
<ol>
<li>如果在内存中有空闲的物理页面, 则分配一物理页帧f, 然后转第4步; 否则转到第2步;</li>
<li>采用某种页面置换算法, 选择一个将被替换的物理页帧f, 它所对应的逻辑页为q, 如果该页在内存期间被修改过, 则需要把它写回外存;</li>
<li>对q所对应的页表项修改, 把驻留位置为0;</li>
<li>将需要访问的页p装入到物理页面f当中;</li>
<li>修改p所对应的页表项的内容, 把驻留位置为1, 把物理页帧号置为f;</li>
<li>重新运行被中断是指令.</li>
</ol>
<blockquote>
<p>  在何处保存未被映射的页?</p>
<ul>
<li>能够简单地识别在二级存储器中的页</li>
<li>交换空间(磁盘或者文件) : 特殊格式, 用于存储未被映射的页面</li>
</ul>
</blockquote>
<p>后备存储(二级存储) :</p>
<ul>
<li>一个虚拟地址空间的页面可以被映射到一个文件(在二级存储中)的某个位置</li>
<li>代码段 : 映射到可执行二进制文件</li>
<li>动态加载的共享库程序段 : 映射到动态调用的库文件</li>
<li>其他段 : 可能被映射到交换文件(swap file)</li>
</ul>
</li>
<li><p>虚拟内存性能</p>
<p>为了便于理解分页的开销, 使用有效存储器访问时间 effective memory access time (EAT)</p>
<p>EAT = 访存时间 * 页表命中几率 + page fault处理时间 * page fault几率</p>
<p>实例 :</p>
<p>访存时间 : 10 ns</p>
<p>磁盘访问时间 : 5 ms</p>
<p>参数 p  = page fault 几率</p>
<p>参数 q = dirty page 几率(对页面写操作)</p>
<p>EAT = 10*(1-p) + 5000000*p*(1+q)</p>
</li>
</ul>
</li>
</ul>
<h1 id="第六章"><a href="#第六章" class="headerlink" title="第六章"></a>第六章</h1><blockquote>
<p>  第六章的主要内容是：操作系统的虚拟内存管理技术中的页面置换算法</p>
</blockquote>
<h2 id="功能与目标"><a href="#功能与目标" class="headerlink" title="功能与目标"></a>功能与目标</h2><p>功能 : 当缺页中断发生, 需要调入新的页面而内存已满时, 选择内存当中哪个物理页面被置换.</p>
<p>目标 : 尽可能地减少页面的换进换出次数(即缺页中断的次数). 具体来说, 把未来不再使用的或短期内较少使用的页面换出, 通常只能在局部性原理指导下依据过去的统计数据来进行预测.</p>
<p>页面锁定 : 用于描述必须常驻内存的操作系统的关键部分或时间关键的应用进程. 实现的方式是 : 在页表中添加锁定标记位(lock bit).</p>
<h2 id="实验设置与评价方法"><a href="#实验设置与评价方法" class="headerlink" title="实验设置与评价方法"></a>实验设置与评价方法</h2><p>实例 :</p>
<p>记录一个进程对页访问的一个轨迹</p>
<ul>
<li>举例 : 虚拟地址跟踪(页号, 偏移)…<ul>
<li>(3,0) (1,9) (4,1) (2,1) (5,3) (2,0) …</li>
</ul>
</li>
<li>生成的页面轨迹<ul>
<li>3, 1, 4, 2, 5, 2, 1, …</li>
</ul>
</li>
</ul>
<p>模拟一个页面置换的行为并且记录产生页缺失数的数量</p>
<ul>
<li>更少的缺失, 更好的性能</li>
</ul>
<h2 id="局部页面置换算法"><a href="#局部页面置换算法" class="headerlink" title="局部页面置换算法"></a>局部页面置换算法</h2><h3 id="最优页面置换算法"><a href="#最优页面置换算法" class="headerlink" title="最优页面置换算法"></a>最优页面置换算法</h3><p>基本思路 : 当一个缺页中断发生时, 对于保存在内存当中的每一个逻辑页面, 计算在它的下一次访问之前, 还需等待多长时间, 从中选择等待时间最长的那个, 作为被置换的页面.</p>
<p>这是一种理想情况, 在实际系统中是无法实现的, 因为操作系统无法知道每一个页面要等待多长时间以后才会再次被访问.</p>
<p>可用作其他算法的性能评价的依据.(在一个模拟器上运行某个程序, 并记录每一次的页面访问情况, 在第二遍运行时即可使用最优算法)</p>
<h3 id="先进先出算法"><a href="#先进先出算法" class="headerlink" title="先进先出算法"></a>先进先出算法</h3><p>基本思路 : 选择在内存中驻留时间最长的页面淘汰. 具体来说, 系统维护着一个链表, 记录了所有位于内存当中的逻辑页面. 从链表的排列顺序来看, 链首页面的驻留时间最长, 链尾页面的驻留时间最短. 当发生一个缺页中断时, 把链首页面淘汰出去, 并把新的页面添加到链表的末尾.</p>
<p>性能较差, 调出的页面有可能是经常要访问的页面. 并且有 belady现象. FIFO算法很少单独使用.</p>
<h3 id="最近最久未使用算法"><a href="#最近最久未使用算法" class="headerlink" title="最近最久未使用算法"></a>最近最久未使用算法</h3><p>LRU(Least Recently Used)</p>
<p>基本思路 : 当一个缺页中断发生时, 选择最久未使用的那个页面, 并淘汰.</p>
<p>它是对最优页面置换算法的一个近似, 其依据是程序的局部性原理, 即在最近一小段时间(最近几条指令)内, 如果某些页面被频繁地访问, 那么再将来的一小段时间内, 他们还可能会再一次被频繁地访问. 反过来说, 如果过去某些页面长时间未被访问, 那么在将来它们还可能会长时间地得不到访问.</p>
<p>LRU算法需要记录各个页面使用时间的先后顺序, 开销比较大.</p>
<p>两种可能的实现方法是 :</p>
<ul>
<li>系统维护一个页面链表, 最近刚刚使用过的页面作为首节点, 最久未使用的作为尾结点. 再一次访问内存时, 找出相应的页面, 把它从链表中摘下来, 再移动到链表首. 每次缺页中断发生时, 淘汰链表末尾的页面.</li>
<li>设置一个活动页面栈, 当访问某页时, 将此页号压入栈顶, 然后, 考察栈内是否有与此页面相同的页号, 若有则抽出. 当需要淘汰一个页面时, 总是选择栈底的页面, 它就是最久未使用的.</li>
</ul>
<h3 id="时钟页面置换算法"><a href="#时钟页面置换算法" class="headerlink" title="时钟页面置换算法"></a>时钟页面置换算法</h3><p>基本思路 :</p>
<p>需要用到页表项的访问位, 当一个页面被装入内存时, 把该位初始化为0. 然后如果这个页面被访问, 则把该位置设为1;</p>
<p>把各个页面组织成环形链表(类似钟表面), 把指针指向最老的页面(最先进来);</p>
<p>当发生一个缺页中断时, 考察指针所指向的最老页面, 若它的访问位为0, 立即淘汰; 若访问位为0, 然后指针往下移动一格. 如此下去, 直到找到被淘汰的页面, 然后把指针移动到下一格.</p>
<p>流程 :</p>
<p>如果访问页在物理内存中, 访问位置1.</p>
<p>如果不在物理页, 从指针当前指向的物理页开始, 如果访问位0, 替换当前页, 指针指向下一个物理页; 如果访问位为1, 置零以后访问下一个物理页再进行判断. 如果所有物理页的访问位都被清零了, 又回到了第一次指针所指向的物理页进行替换.</p>
<h3 id="二次机会算法"><a href="#二次机会算法" class="headerlink" title="二次机会算法"></a>二次机会算法</h3><p>因为考虑到时钟页面置换算法, 有时候会把一些 dirty bit 为1(有过写操作)的页面进行置换, 这样的话, 代价会比较大. 因此, 可以结合访问位和脏位一起来决定应该置换哪一页.</p>
<p>used   dirty     →  used   dirty</p>
<p> 0         0                  replace</p>
<p> 0         1                  0         0</p>
<p> 1          0                 0         0 </p>
<p> 1          1                 0         1 </p>
<p>相当于说, 替换的优先级, 没有读写也没写过, 那么直接走, 如果写过或者访问过, 那么给你一次机会, 如果又写过, 又访问过, 那么久给你两次机会.</p>
<h3 id="最不常用算法"><a href="#最不常用算法" class="headerlink" title="最不常用算法"></a>最不常用算法</h3><p>Least Frequently used, LFU</p>
<p>基本思路 : 当一个缺页中断发生时, 选择访问次数最少的那个页面, 并淘汰.</p>
<p>实现方法 : 对每一个页面设置一个访问计数器, 每当一个页面被访问时, 该页面的访问计数器加1. 当发生缺页中断时, 淘汰计数值最小的那个页面.</p>
<p>LRU和LFU的对比 : LRU考察的是多久未访问, 时间越短越好. 而LFU考察的是访问的次数和频度, 访问次数越多越好.</p>
<h3 id="Belady现象-科学家名字"><a href="#Belady现象-科学家名字" class="headerlink" title="Belady现象(科学家名字)"></a>Belady现象(科学家名字)</h3><p>在采用FIFO算法时, 有时会出现分配的物理页面数增加, 缺页率反而提高的异常现象;</p>
<p>出现原因 : FIFO算法的置换特征与进程访问内存的动态特征是矛盾的, 与置换算法的目标是不一致的(即替换较少使用的页面), 因此, 被他置换出去的页面不一定是进程不会访问的.</p>
<h3 id="LRU-FIFO-和-Clock-的比较"><a href="#LRU-FIFO-和-Clock-的比较" class="headerlink" title="LRU / FIFO 和 Clock 的比较"></a>LRU / FIFO 和 Clock 的比较</h3><p>LRU和FIFO都是先进先出的思路, 只不过LRU是针对页面最近访问时间来进行排序, 所以需要在每一次页面访问的时候动态地调整各个页面之间的先后顺序(有一个页面的最近访问时间变了). 而FIFO是针对页面进入内存的时间来进行排序, 这个时间是固定不变的, 所以各个页面之间的先后顺序是固定的. 如果一个页面在进入内存后没有被访问, 那么它的最近访问时间就是它进入内存的时间. 换句话说, 如果内存当中的所有页面都未曾访问过, 那么LRU算法就退化为了FIFO算法.</p>
<p>例如 : 给进程分配3个物理页面, 逻辑页面的访问顺序是 : 1,2,3,4,5,6,1,2,3 …</p>
<h2 id="全局页面置换算法"><a href="#全局页面置换算法" class="headerlink" title="全局页面置换算法"></a>全局页面置换算法</h2><h3 id="工作集模型"><a href="#工作集模型" class="headerlink" title="工作集模型"></a>工作集模型</h3><p>前面介绍的各种页面置换算法, 都是基于一个前提, 即程序的局部性原理. 但是此原理是否成立?</p>
<ul>
<li>如果局部性原理不成立, 那么各种页面置换算法就没有说明分别, 也没有什么意义. 例如 : 假设进程对逻辑页面的访问顺序是1,2,3,4,5,6,6,7,8,9…, 即单调递增, 那么在物理页面数有限的前提下, 不管采用何种置换算法, 每次的页面访问都必然导致缺页中断.</li>
<li>如果局部性原理是成立的, 那么如何来证明它的存在, 如何来对它进行定量地分析? 这就是工作集模型.</li>
</ul>
<h3 id="工作集"><a href="#工作集" class="headerlink" title="工作集"></a>工作集</h3><p>工作集 : 一个进程当前正在使用的逻辑页面集合.</p>
<p>可以使用一个二元函数 W(t, delta) 来表示 :</p>
<p>t 是当前的执行时刻;</p>
<p>delta 称为工作集窗口, 即一个定长的页面访问的时间窗口;</p>
<p>W(t, delta) = 在当前时刻 t 之前的 delta 时间窗口当中的所有页面所组成的集合(随着 t 的变化, 该集合也在不断的变化)</p>
<p>|W(t, delta)| 是工作集的大小, 即逻辑页的数量.</p>
<p>工作集大小的变化 : 进程开始执行后, 随着访问新页面逐步建立较稳定的工作集. 当内存访问的局部性区域的位置大致稳定时, 工作集大小也大致稳定; 局部性区域的位置改变时, 工作集快速扩张和收缩过渡到下一个稳定值.</p>
<h3 id="常驻集"><a href="#常驻集" class="headerlink" title="常驻集"></a>常驻集</h3><p>常驻集是指在当前时刻, 进程实际驻留在内存当中的页面集合.</p>
<ul>
<li>工作集是进程在运行过程中固有的性质, 而常驻集取决于系统分配给进程的物理页面数目, 以及所采用的页面置换算法;</li>
<li>如果一个进程的整个工作集都在内存当中, 即常驻集 包含 工作集, 那么进程将很顺利地运行, 而不会造成太多的缺页中断(直到工作集发生剧烈变动, 从而过渡到另一个状态);</li>
<li>当进程常驻集的大小达到某个数目之后, 再给它分配更多的物理页面, 缺页率也不会明显下降.</li>
</ul>
<h3 id="工作集页置换算法"><a href="#工作集页置换算法" class="headerlink" title="工作集页置换算法"></a>工作集页置换算法</h3><p>当工作集窗口在滑动过程中, 如果页面不在集合中, 那么就会直接丢失这个不在窗口中页面, 而不会等待缺页中断再丢弃.</p>
<h3 id="缺页率置换算法"><a href="#缺页率置换算法" class="headerlink" title="缺页率置换算法"></a>缺页率置换算法</h3><p>可变分配策略 : 常驻集大小可变. 例如 : 每个进程在刚开始运行的时候, 先根据程序大小给它分配一定数目的物理页面, 然后在进程运行过程中, 再动态地调整常驻集的大小.</p>
<ul>
<li>可采用全局页面置换的方式, 当发生一个缺页中断时, 被置换的页面可以是在其他进程当中, 各个并发进程竞争地使用物理页面.</li>
<li>优缺点 : 性能较好, 但增加了系统开销.</li>
<li>具体实现 : 可以使用缺页率算法来动态调整常驻集的大小.</li>
</ul>
<p>缺页率 : 表示 “缺页次数 / 内存访问次数”</p>
<p>影响因素 : 页面置换算法, 分配给进程的物理页面数目, 页面本身的大小, 程序的编写方法.</p>
<h3 id="抖动问题"><a href="#抖动问题" class="headerlink" title="抖动问题"></a>抖动问题</h3><ul>
<li>如果分配给一个进程的物理页面太少, 不能包含整个的工作集, 即常驻集 属于 工作集, 那么进程将会造成很多的缺页中断, 需要频繁的在内存与外存之间替换页面, 从而使进程的运行速度变得很慢, 我们把这种状态称为 “抖动”.</li>
<li>产生抖动的原因 : 随着驻留内存的进程数目增加, 分配给每个进程的物理页面数不断就减小, 缺页率不断上升. 所以OS要选择一个适当的进程数目和进程需要的帧数, 以便在并发水平和缺页率之间达到一个平衡.</li>
</ul>
<h1 id="第七章"><a href="#第七章" class="headerlink" title="第七章"></a>第七章</h1><blockquote>
<p>  第七章的主要内容是：进程</p>
</blockquote>
<h2 id="进程-process-描述"><a href="#进程-process-描述" class="headerlink" title="进程(process)描述"></a>进程(process)描述</h2><h3 id="进程定义"><a href="#进程定义" class="headerlink" title="进程定义"></a>进程定义</h3><p>进程 : 一个具有一定独立功能的程序在一个数据集合上的一次动态执行过程.</p>
<h3 id="进程的组成"><a href="#进程的组成" class="headerlink" title="进程的组成"></a>进程的组成</h3><p>进程包括 :</p>
<ul>
<li>程序的代码</li>
<li>程序处理的数据</li>
<li>程序计数器中的值, 指示下一条将运行的指令</li>
<li>一组通用的寄存器的当前值, 堆, 栈</li>
<li>一组系统资源(如打开的文件)</li>
</ul>
<p>进程和程序的联系 :</p>
<ul>
<li>程序是产生进程的基础</li>
<li>程序的每次运行构成不同的进程</li>
<li>进程是程序功能的体现</li>
<li>通过多次执行, 一个程序可以对应多个进程, 通过调用关系, 一个进程可包括多个程序.</li>
</ul>
<p>进程和程序的区别 :</p>
<ul>
<li>进程是动态的,  程序是静态的 : 程序是有序代码的集合. 进程是程序的执行, 进程有核心态 / 用户态.</li>
<li>进程是暂时的, 程序是永久的. 进程是一个状态变化的过程, 程序可以长久保存.</li>
<li>进程和程序的组成不同 : 进程的组成包括程序, 数据和进程控制块(进程状态信息)</li>
</ul>
<h3 id="进程的特点"><a href="#进程的特点" class="headerlink" title="进程的特点"></a>进程的特点</h3><p><strong>动态性</strong> : 可动态地创建, 结果进程;</p>
<p><strong>并发性</strong> : 进程可以被独立调度并占用处理机运行; (并发:一段, 并行:一时刻)</p>
<p><strong>独立性</strong> : 不同进程的工作不相互影响;(页表是保障措施之一)</p>
<p><strong>制约性</strong> : 因访问共享数据, 资源或进程间同步而产生制约.</p>
<blockquote>
<p>  抛出了一个问题 : 如果你要设计一个OS, 怎么样来实现其中的进程管理机制?</p>
</blockquote>
<h3 id="进程控制结构"><a href="#进程控制结构" class="headerlink" title="进程控制结构"></a>进程控制结构</h3><p>描述进程的数据结构 : 进程控制块 (Process Control Block)</p>
<p>操作系统为每个进程都维护了一个PCB, 用来保存与该进程有关的各种状态信息.</p>
<p><strong>进程控制块 :</strong> 操作系统管理控制进程运行所用的信息集合.</p>
<p>进程的创建 : 为该进程生成一个PCB</p>
<p><strong>进程的终止 :</strong> 回收它的PCB</p>
<p><strong>进程的组织管理 :</strong> 通过对PCB的组织管理来实现</p>
<p>(PCB具体包含什么信息? 如何组织的? 进程的状态转换?)</p>
<p><strong>PCB有以下三大类信息 :</strong></p>
<ul>
<li>进程标志信息. 如本进程的标志, 本进程的产生者标志(父进程标志). 用户标志</li>
<li>处理机状态信息保存区 : 保存进程的运行现场信息 :<ul>
<li>用户可见寄存器. 用户程序可以使用的数据, 地址等寄存器</li>
<li>控制和状态寄存器. 如程序计数器(PC), 程序状态字(PSW)</li>
<li>栈指针. 过程调用, 系统调用, 中断处理和返回时需要用到它</li>
</ul>
</li>
<li>进程控制信息<ul>
<li>调度和状态信息. 用于操作系统调度进程并占用处理机使用.</li>
<li>进程间通信信息. 为支持进程间与通信相关的各种标志, 信号, 信件等, 这些信息都存在接收方的进程控制块中.</li>
<li>存储管理信息. 包含有指向本进程映像存储空间的数据结构.</li>
<li>进程所用资源. 说明由进程打开, 使用的系统资源. 如打开的文件等.</li>
<li>有关数据结构的链接信息. 进程可以连接到一个进程队列中, 或连接到相关的其他进程的PCB.</li>
</ul>
</li>
</ul>
<p><strong>进程的组织方式</strong></p>
<p>链表 : 同一状态的进程其PCB成一链表, 多个状态对应多个不同的链表.(各状态的进程形成不同的链表 : 就绪链表, 阻塞链表)</p>
<p>索引表 : 同一状态的进程归入一个index表(由index指向PCB), 多个状态对应多个不同的index表(各状态的进行形成不同的索引表 : 就绪索引表, 阻塞索引表)</p>
<h2 id="进程状态-state"><a href="#进程状态-state" class="headerlink" title="进程状态(state)"></a>进程状态(state)</h2><h3 id="进程的生命期管理"><a href="#进程的生命期管理" class="headerlink" title="进程的生命期管理"></a>进程的生命期管理</h3><h4 id="进程创建"><a href="#进程创建" class="headerlink" title="进程创建"></a>进程创建</h4><p>引起进程创建的3个主要事件 :</p>
<ul>
<li>系统初始化;</li>
<li>用户请求创建一个新进程;</li>
<li>正在运行的进程执行了创建进程的系统调用.</li>
</ul>
<h4 id="进程运行"><a href="#进程运行" class="headerlink" title="进程运行"></a>进程运行</h4><p>内核选择一个就绪的进程, 让它占用处理机并执行</p>
<p>(为何选择?如何选择?)</p>
<h4 id="进程等待-阻塞"><a href="#进程等待-阻塞" class="headerlink" title="进程等待(阻塞)"></a>进程等待(阻塞)</h4><p>在以下情况下, 进程等待(阻塞):</p>
<ol>
<li>请求并等待系统服务, 无法马上完成</li>
<li>启动某种操作, 无法马上完成</li>
<li>需要的数据没有到达</li>
</ol>
<p>进程只能自己阻塞自己, 因为只有进程自身才能知道何时需要等待某种事件的发生.</p>
<h4 id="进程唤醒"><a href="#进程唤醒" class="headerlink" title="进程唤醒"></a>进程唤醒</h4><p>唤醒进程的原因 :</p>
<ol>
<li>被阻塞进程需要的资源可被满足</li>
<li>被阻塞进程等待的事件到达</li>
<li>将该进程的PCB插入到就绪队列</li>
</ol>
<p>进程只能被别的进程或操作系统唤醒</p>
<h4 id="进程结束"><a href="#进程结束" class="headerlink" title="进程结束"></a>进程结束</h4><p>在以下四种情况下, 进程结束 :</p>
<ul>
<li>正常退出(自愿)</li>
<li>错误退出(自愿)</li>
<li>致命错误(强制性)</li>
<li>被其他进程杀死(强制性)</li>
</ul>
<h3 id="进程状态变化模型"><a href="#进程状态变化模型" class="headerlink" title="进程状态变化模型"></a>进程状态变化模型</h3><p><strong>进程的三种基本状态 :</strong> 进程在生命结束前处于三种基本状态之一.</p>
<p>不同系统设置的进程状态数目不同.</p>
<p><strong>三种基本状态</strong></p>
<ol>
<li>运行状态(Running) : 当一个进程正在处理机上运行时</li>
<li>就绪状态(Ready) : 一个进程获得了除处理机之外的一切所需资源, 一旦得到处理机即可运行</li>
<li>等待状态(阻塞状态 Blocked) : 一个进程正在等待某一时间而暂停运行时. 如等待某资源, 等待输入/输出完成.</li>
</ol>
<p><strong>进程其它的基本状态</strong></p>
<p>创建状态(New) : 一个进程正在被创建, 还没被转到就绪状态之前的状态</p>
<p>结束状态(Exit): 一个进程正在从系统中消失时的状态, 这是因为进程结束或由于其它原因所导致.</p>
<p><strong>可能的状态变化如下 :</strong></p>
<p>NULL → New : 一个新进程被产生出来执行一个程序</p>
<p>New → Ready: 当进程创建完成并初始化后, 一切就绪准备运行时, 变为就绪状态</p>
<p>Ready → Running  : 处于就绪态的进程被进程调度程序选中后, 就分配到处理机上来运行</p>
<p>Running → Exit   : 当进程表示它已经完成或者因出错, 当前运行进程会由操作系统作结束处理</p>
<p>Running → Ready  : 处于运行状态的进程在其运行过程中, 由于分配它的处理机时间片用完而让出处理机</p>
<p>Running → Blocked: 当进程请求某样东西且必须等待时</p>
<p>Blocked → Ready  : 当进程要等待某事件到来时, 它从阻塞状态变到就绪状态</p>
<h3 id="进程挂起"><a href="#进程挂起" class="headerlink" title="进程挂起"></a>进程挂起</h3><p>进程挂起, 为了合理且充分地利用系统资源.</p>
<p>进程在挂起状态时, 意味着进程没有占用内存空间, 处在挂起状态的进程映像在磁盘上.(把进程放到磁盘上)</p>
<p><strong>两种挂起状态</strong></p>
<ol>
<li>阻塞挂起状态 : 进程在外存并等待某事件的出现;</li>
<li>就绪挂起状态 : 进程在外存, 但只要进入内存, 即可运行.</li>
</ol>
<p><strong>与挂起相关的状态转换</strong></p>
<p><strong>挂起 :</strong> 把一个进程从内存转到外存, 可能有以下几种情况 :</p>
<ul>
<li>阻塞到阻塞挂起 : 没有进程处于就绪状态或就绪进程要求更多内存资源时, 会进行这种转换, 以提交新进程或运行时就绪进程.</li>
<li>就绪到就绪挂起 : 当有高优先级阻塞(系统认为会很快就绪的)进程和低优先级就绪进程时, 系统会选择挂起低优先级就绪进程.</li>
<li>运行到就绪挂起 : 对抢先式分时系统, 当有高优先级阻塞挂起进程因事件出现而进入就绪挂起时, 系统可能会把运行进程转导就绪挂起状态.</li>
</ul>
<p><strong>在外存时的状态转换 :</strong></p>
<ul>
<li>阻塞挂起到就绪挂起 : 当有阻塞挂起因相关事件出现时, 系统会把阻塞挂起进程转换为就绪挂起进程.</li>
</ul>
<p><strong>解挂, 激活 :</strong> 把一个进程从外存转到内存; 可能有以下几种情况 :</p>
<ul>
<li>就绪挂起到就绪 : 没有就绪进程或挂起就绪进程优先级高于就绪进程时, 会进行这种转换.</li>
<li>阻塞挂起到阻塞 : 当一个进程释放足够内存时, 系统会把一个高优先级阻塞挂起(系统认为会很快出现所等待的事件)进程转换为阻塞进程.</li>
</ul>
<blockquote>
<p>  抛出一个问题 : OS怎么通过PCB和定义的进程状态来管理PCB, 帮助完成进程的调度过程?</p>
</blockquote>
<h3 id="状态队列"><a href="#状态队列" class="headerlink" title="状态队列"></a>状态队列</h3><ul>
<li>由操作系统来维护一组队列, 用来表示系统当中所有进程的当前状态;</li>
<li>不同的状态分别用不同的队列来表示(就绪队列, 各种类型的阻塞队列);</li>
<li>每个进程的PCB都根据它的状态加入到相应的队列当中, 当一个进程的状态发生变化时, 它的PCB从一个状态中脱离出来, 加入到另外一个队列.</li>
</ul>
<h2 id="线程-thread"><a href="#线程-thread" class="headerlink" title="线程(thread)"></a>线程(thread)</h2><h3 id="为什么使用线程"><a href="#为什么使用线程" class="headerlink" title="为什么使用线程?"></a>为什么使用线程?</h3><p>实例 : 编写一个MP3播放软件.</p>
<p>核心功能 : (1)从MP3音频文件中读取数据; (2)对数据进行解压缩; (3)把解压缩后的音频数据播放出来.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//单进程方式</span></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">	Read();</span><br><span class="line">	Decompress();</span><br><span class="line">	Play();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//问题: 播放出来的声音能否连贯? 各个函数之间不是并发执行, 影响资源的使用效率.</span></span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//多进程</span></span><br><span class="line"><span class="comment">//进程1</span></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">	Read();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//进程2</span></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">	Decompress();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//进程3</span></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">	Play();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//问题: 进程之间如何通信,共享数据?另外,维护进程的系统开销较大:</span></span><br><span class="line"><span class="comment">//创建进程时,分配资源,建立PCB;撤销进程时,回收资源,撤销PCB;进程切换时,保存当前进程的状态信息</span></span><br></pre></td></tr></table></figure>

<p>因此需要提出一种新的实体, 满足以下特征:</p>
<ol>
<li>实体之间可以并发执行;</li>
<li>实体之间共享相同的地址空间.</li>
</ol>
<p>这实体就是线程.</p>
<h3 id="什么是线程"><a href="#什么是线程" class="headerlink" title="什么是线程"></a>什么是线程</h3><p>线程是进程当中的一条执行流程.</p>
<p>从两个方面重新理解进程:</p>
<ol>
<li>从资源组合的角度: 进程把一组相关的资源组合起来,构成了一个资源平台(环境),包括地址空间(代码段,数据段),打开的文件等各种资源;</li>
<li>从运行的角度: 代码在这个资源平台上的一条执行流程(线程).</li>
</ol>
<p>线程 = 进程 - 共享资源</p>
<h3 id="线程的优缺点"><a href="#线程的优缺点" class="headerlink" title="线程的优缺点"></a>线程的优缺点</h3><p>线程的优点:</p>
<ul>
<li>一个进程中可以同时存在多个线程;</li>
<li>各个线程之间可以并发地执行;</li>
<li>各个线程之间可以共享地址空间和文件等资源.</li>
</ul>
<p>线程的缺点:</p>
<ul>
<li><p>一个线程崩溃, 会导致其所属进程的所有线程崩溃.(给它了”权限”就得有更高的”责任”)</p>
</li>
<li><p>线程所需的资源</p>
<p>不同的线程需要独立的寄存器和堆栈, 共享代码,数据和文件等.</p>
</li>
</ul>
<h3 id="线程和进程的比较"><a href="#线程和进程的比较" class="headerlink" title="线程和进程的比较"></a>线程和进程的比较</h3><ul>
<li>进程是资源分配单位, 线程是CPU调度单位;</li>
<li>进程拥有一个完整的资源平台, 而线程只独享必不可少的资源, 如寄存器和栈;</li>
<li>线程同样具有就绪,阻塞和执行三种基本状态,同样具有状态之间的转换关系;</li>
<li>线程能减少并发执行的时间和空间开销:<ul>
<li>线程的创建时间比进程短;(直接利用所属进程的一些状态信息)</li>
<li>线程的终止时间比进程短;(不需要考虑把这些状态信息给释放)</li>
<li>同一进程内的线程切换时间比进程短;(同一进程不同线程的切换不需要切换页表)</li>
<li>由于同一进程的各线程之间共享内存和文件资源, 可直接进行不通过内核的通信.(直接通过内存地址读写资源)</li>
</ul>
</li>
</ul>
<h3 id="线程的实现"><a href="#线程的实现" class="headerlink" title="线程的实现"></a>线程的实现</h3><p>主要有三种线程的实现方式:</p>
<ul>
<li>用户线程  : 在用户空间实现; POSIX Pthreads, Mach C-threads, Solaris threads</li>
<li>内核线程  : 在内核中实现; Windows, Solaris, Linux</li>
<li>轻量级进程: 在内核中实现,支持用户线程; Solaris</li>
</ul>
<p><strong>用户线程</strong></p>
<p>操作系统只能看到进程, 看不到线程, 线程的TCB在线程库中实现;</p>
<p>在用户空间实现的线程机制, 它不依赖于操作系统的内核, 由一组用户级的线程库来完成线程的管理, 包括进程的创建,终止,同步和调度等.</p>
<ul>
<li>由于用户线程的维护由相应的进程来完成(通过线程库函数),不需要操作系统内核了解用户进程的存在,可用于不支持线程技术的多进程操作系统;</li>
<li>每个进程都需要它自己私有的线程控制块(TCB)列表,用来跟踪记录它的各个线程的状态信息(PC,栈指针,寄存器),TCB由线程库函数来维护;</li>
<li>用户线程的切换也是由线程库函数来完成,无需用户态/核心态切换,所以速度特别快;</li>
<li>允许每个进程拥有自定义的线程调度算法.</li>
</ul>
<p>用户线程的缺点:</p>
<ul>
<li>阻塞性的系统调用如何实现?如果一个线程发起系统调用而阻塞,则整个进程在等待;</li>
<li>当一个线程开始运行时,除非它主动地交出CPU的使用权,否则它所在的进程当中的其他线程将无法运行;</li>
<li>由于时间片分配给进程,所以与其他进程比,在多线程执行时,每个线程得到的时间片较少,执行会较慢.</li>
</ul>
<p><strong>内核线程</strong></p>
<p>操作系统能够看到进程也可能看到线程,线程在内核中实现;</p>
<p>内核线程是在操作系统的内核当中实现的一种线程机制,由操作系统的内核来完成线程的创建,终止和管理.</p>
<ul>
<li>在支持内核线程的操作系统中,由内核来维护进程和线程的上下文信息(PCB和TCB);</li>
<li>线程的创建,终止和切换都是通过系统调用,内核函数的方式来进行,由内核来完成,因此系统开销较大;</li>
<li>在一个进程当中,如果某个内核线程发起系统调用而被阻塞,并不会影响其他内核线程的运行;</li>
<li>时间片分配给线程,多线程的进程获得更多CPU时间;</li>
<li>Windows NT 和 Windows 2000/XP 支持内核线程.</li>
</ul>
<p><strong>轻量级进程</strong></p>
<p>它是内核支持的用户线程.一个进程可以有一个或多个轻量化进程,每个量级进程由一个单独的内核线程来支持.(Solaris,Linux)</p>
<h2 id="上下文切换"><a href="#上下文切换" class="headerlink" title="上下文切换"></a>上下文切换</h2><p>停止当前运行进程(从运行状态变成其他状态),并且调度其他进程(转变为运行状态)</p>
<ul>
<li>必须在切换之前存储许多部分的进程上下文</li>
<li>必须能够在之后恢复他们,所以进程不能显示它曾经被暂停过</li>
<li>必须快速(上下文切换时非常频繁)</li>
</ul>
<p>需要存储什么上下文?</p>
<ul>
<li>寄存器(PC,SP…),CPU状态等信息</li>
<li>一些时候可能会费时,所以我们应该尽可能避免</li>
</ul>
<p>操作系统为活跃进程准备了进程控制块</p>
<p>操作系统将进程控制块放置在一个合适的队列中</p>
<ul>
<li>就绪队列</li>
<li>等待IO队列(每个设备的队列)</li>
<li>僵尸队列</li>
</ul>
<h2 id="进程控制"><a href="#进程控制" class="headerlink" title="进程控制"></a>进程控制</h2><h3 id="创建进程"><a href="#创建进程" class="headerlink" title="创建进程"></a>创建进程</h3><p>fork()的简单实现</p>
<ul>
<li>对子进程分配内存</li>
<li>复制父进程的内存和CPU寄存器到子进程</li>
<li>开销昂贵</li>
</ul>
<p>在99%的情况下,我们在调用fork()之后调用exec()</p>
<ul>
<li>在fork()操作中内存复制是没有作用的</li>
<li>子进程将可能关闭打开的文件和连接</li>
<li>开销因此是最高的</li>
<li>为什么不能结合它们在一个调用中(OS/2, windows)?</li>
</ul>
<p>vfork()</p>
<ul>
<li>一个创建进程的系统调用,不需要创建一个同样的内存映像</li>
<li>一些时候称为轻量级fork()</li>
<li>子进程应该几乎立即调用exec()</li>
<li>现在不再使用如果我们使用 copy on write 技术</li>
</ul>
<h3 id="加载和执行进程"><a href="#加载和执行进程" class="headerlink" title="加载和执行进程"></a>加载和执行进程</h3><p>系统调用exec()加载程序取代当前运行的进程</p>
<p>exec()调用允许一个进程”加载”一个不同的程序并且在main开始执行(事实上 _start)</p>
<p>它允许一个进程指定参数的数量(argc)和它字符串参数数组(argv)</p>
<p>如果调用成功(相同的进程,不同的程序)</p>
<p>代码,stack,heap重写</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> pid = fork(); <span class="comment">//创建子进程</span></span><br><span class="line"><span class="keyword">if</span>(pid == <span class="number">0</span>) &#123;    <span class="comment">//子进程</span></span><br><span class="line">	exec_status = exec(<span class="string">&quot;calc&quot;</span>, argc, argv0,argv1,...);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Why would I execute?&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(pid &gt; <span class="number">0</span>) &#123; <span class="comment">//父进程</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Whose your daddy?&quot;</span>);</span><br><span class="line">	...</span><br><span class="line">	child_status = wait(pid);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="等待和终止进程"><a href="#等待和终止进程" class="headerlink" title="等待和终止进程"></a>等待和终止进程</h3><p>wait()系统调用是被父进程用来等待子进程的结束</p>
<ul>
<li>一个子进程向父进程返回一个值,所以父进程必须接受这个值并处理</li>
<li>wait()系统调用担任这个要求<ul>
<li>它使父进程去睡眠来等待子进程的结束</li>
<li>当一个子进程调用exit()的时候,操作系统解锁父进程,并且将通过exit()传递得到的返回值作为wait调用的一个结果(连同子进程的pid一起)如果这里没有子进程存活,wait()立刻返回</li>
<li>当然,如果这里有为父进程的僵尸等待,wait()立即返回其中一个值(并且解除僵尸状态)</li>
</ul>
</li>
<li>进程结束执行之后,它调用exit()</li>
<li>这个系统调用:<ul>
<li>将这程序的”结果”作为一个参数</li>
<li>关闭所有打开的文件,连接等等</li>
<li>释放内存</li>
<li>释放大部分支持进程的操作系统结构</li>
<li>检查是否父进程是存活着的:<ul>
<li>如果是的话,它保留结果的值直到父进程需要它;在这种情况里,进程没有真正死亡,但是它进入了僵尸状态</li>
<li>如果没有,它释放所有的数据结构,这个进程死亡</li>
</ul>
</li>
<li>清理所有等待的僵尸进程</li>
</ul>
</li>
<li>进程终止是最终的垃圾收集(资源回收)</li>
</ul>
<h1 id="第八章"><a href="#第八章" class="headerlink" title="第八章"></a>第八章</h1><blockquote>
<p>  第八章的主要内容是：调度算法(感觉清华这门课程前几章比较精彩,后续讲的有点混乱)</p>
</blockquote>
<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><h3 id="上下文切换-1"><a href="#上下文切换-1" class="headerlink" title="上下文切换"></a>上下文切换</h3><ul>
<li>切换CPU的当前任务, 从一个进程/线程到另一个</li>
<li>保存当前进程/线程在PCB/TCB中的执行上下文(CPU状态)</li>
<li>读取下一个进程/线程的上下文</li>
</ul>
<h3 id="CPU调度"><a href="#CPU调度" class="headerlink" title="CPU调度"></a>CPU调度</h3><ul>
<li>从就绪队列中挑选一个进程/线程作为CPU将要运行的下一个进程/线程</li>
<li>调度程序: 挑选进程/线程的内核函数(通过一些调度策略)</li>
<li>什么时候进行调度?</li>
</ul>
<h3 id="内核运行调度程序的条件-满足一条即可"><a href="#内核运行调度程序的条件-满足一条即可" class="headerlink" title="内核运行调度程序的条件(满足一条即可)"></a>内核运行调度程序的条件(满足一条即可)</h3><ul>
<li>一个进程从运行状态切换到等待状态</li>
<li>一个进程被终结</li>
</ul>
<h3 id="不可抢占"><a href="#不可抢占" class="headerlink" title="不可抢占"></a>不可抢占</h3><ul>
<li>调度程序必须等待事件结束</li>
</ul>
<h3 id="可以抢占"><a href="#可以抢占" class="headerlink" title="可以抢占"></a>可以抢占</h3><ul>
<li>调度程序在中断被相应后执行</li>
<li>当前的进程从运行切换到就绪, 或者一个进程从等待切换到就绪</li>
<li>当前运行的进程可以被换出</li>
</ul>
<h2 id="调度原则"><a href="#调度原则" class="headerlink" title="调度原则"></a>调度原则</h2><ul>
<li><p>调度策略</p>
<p>人们通常都需要”更快”的服务</p>
<p>什么是更快?</p>
<ul>
<li>传输文件时的高带宽</li>
<li>玩游戏时的低延迟</li>
<li>这两个因素是独立的</li>
</ul>
<p>和水管类比</p>
<ul>
<li>低延迟: 喝水的时候想要一打开水龙头水就流出来</li>
<li>高带宽: 给游泳池充水时希望从水龙头里同时流出大量的水,并且不介意是否存在延迟</li>
</ul>
<p>我们的目标:</p>
<ul>
<li>减少响应时间: 及时处理用户的输出并且尽快将输出提供给用户</li>
<li>减少平均响应时间的波动: 在交互系统中,可预测性比高差异性低平均更重要</li>
<li>增加吞吐量: 减少开销(操作系统开销,上下文切换);系统资源的高效率用(CPU,IO设备)</li>
<li>减少等待时间: 减少每个进程的等待时间</li>
</ul>
</li>
<li><p>程序执行模型</p>
<p>执行模型 : 程序在CPU突发和IO中交替</p>
<ul>
<li>每个调度决定都是关于在下一个CPU突发时将哪个工作交给CPU</li>
<li>在时间分片机制下,线程可能在结束当前CPU突发前被迫放弃CPU</li>
</ul>
</li>
<li><p>评价指标</p>
<p>CPU使用率: CPU处于忙状态所占时间的百分比</p>
<p>吞吐量: 在单位时间内完成的进程数量</p>
<p>周转时间: 一个进程从初始化到结束,包括所有等待时间所花费的时间</p>
<p>等待时间: 进程在就绪队列中的总时间</p>
<p>响应时间: 从一个请求被提交到产生第一次相应所花费的总时间</p>
<p>各指标在操作系统上的表现:</p>
<p>低延迟调度增加了交互式表现(如果移动了鼠标,但是屏幕中的光标却没动,我们可能会重启电脑)</p>
<p>操作系统需要保证低吞吐量不受影响(我想要结束长时间的编程,所以操作系统必须不时进行调度,即使存在许多交互任务)</p>
<p>吞吐量是操作系统的计算带宽</p>
<p>响应时间是操作系统的计算延迟</p>
</li>
<li><p>公平的目标</p>
<p>举例:</p>
<ul>
<li>保证每个进程占用相同的CPU时间</li>
<li>这公平嘛?如果一个用户比其他用户运行更多的进程怎么办</li>
</ul>
<p>举例:</p>
<ul>
<li>保证每个进程都等待相同的时间</li>
</ul>
<p>公平通常会增加平均响应时间</p>
</li>
</ul>
<h2 id="调度算法"><a href="#调度算法" class="headerlink" title="调度算法"></a>调度算法</h2><ul>
<li><p><strong>FCFS(先来先服务)</strong></p>
<p>First come, First Served</p>
<p>如果进程在执行中阻塞,队列中的下一个会得到CPU</p>
<p>优点: 简单</p>
<p>缺点:</p>
<ul>
<li>平均等待时间波动较大</li>
<li>花费时间少的任务可能排在花费时间长的任务后面</li>
<li>可能导致IO和CPU之间的重叠处理(CPU密集型进程会导致IO设备闲置时,IO密集型进程也在等待)</li>
</ul>
</li>
<li><p><strong>SPN(SJF) SRT(短进程优先(短作业优先)短剩余时间优先)[最优平均等待时间]</strong></p>
<p>Shortest Process Next(Shortest Job First) Shortest Remaining Time</p>
<p>选择预测的完成时间来将任务入队</p>
<p>可以是抢占的或者是不可抢占的</p>
<p>可能导致饥饿</p>
<ul>
<li>连续的短任务流会使场任务饥饿</li>
<li>短任务可用时的任何场任务的CPU时间都会增加平均等待时间</li>
</ul>
<p>需要预测未来</p>
<ul>
<li>怎么预估下一个CPU突发的持续时间</li>
<li>简单的解决: 询问用户</li>
<li>如果用户欺骗就杀死进程</li>
<li>如果不知道怎么办?</li>
</ul>
</li>
<li><p><strong>HRRN(最高响应比优先)</strong></p>
<p>Highest Response Ratio Next</p>
</li>
<li><p><strong>Round Robin(轮循)</strong></p>
<p>使用时间切片和抢占来轮流执行任务</p>
<p>在叫做量子(或者时间切片)的离散单元中分配处理器</p>
<p>时间片结束时,切换到下一个准备好的进程</p>
<p>花销: 额外的上下文切换</p>
<p>时间量子太大:</p>
<ul>
<li>等待时间过长</li>
<li>极限情况退化成FCFS</li>
</ul>
<p>时间量子太小:</p>
<ul>
<li>反应迅速</li>
<li>吞吐量由于大量的上下文切换开销受到影响</li>
</ul>
<p>目标:</p>
<ul>
<li>选择一个合适的时间量子</li>
<li>经验规则: 维持上下文切换开销处于1%以内</li>
</ul>
</li>
<li><p><strong>Multilevel Feedback Queues(多级反馈队列)</strong></p>
<p>优先级队列中的轮循</p>
<p>就绪队列被划分成独立的队列: 比如前台(交互),后台(批处理)</p>
<p>每个队列拥有自己的调度策略: 比如前台(RR),后台(FCFS)</p>
<p>调度必须在队列间进行:</p>
<ul>
<li>固定优先级: 先处理前台,然后处理后台;可能导致饥饿</li>
<li>时间切片: 每个队列都得到一个确定的能够调度其进程的CPU总时间;比如80%使用RR的前台,20%使用FCFS的后台</li>
</ul>
<p>一个进程可以在不同的队列中移动</p>
<p>例如,n级优先级-优先级调度在所有级别中,RR在每个级别中</p>
<ul>
<li>时间量子大小随优先级级别增加而增加</li>
<li>如果任务在当前的时间量子中没有完成,则降到下一个优先级</li>
</ul>
<p>优点: CPU密集型任务的优先级下降很快;IO密集型任务停留在高优先级</p>
</li>
<li><p><strong>Fair Share Scheduling(公平共享调度)</strong></p>
<p>FSS控制用户对系统资源的访问</p>
<ul>
<li>一些用户组比其他用户组更重要</li>
<li>保证不重要的组无法垄断资源</li>
<li>未使用的资源按照每个组所分配的资源的比例来分配</li>
<li>没有达到资源使用率目标的组获得更高的优先级</li>
</ul>
</li>
</ul>
<h2 id="评价方式"><a href="#评价方式" class="headerlink" title="评价方式"></a>评价方式</h2><p>确定性建模: 确定一个工作量,然后计算每个算法的表现</p>
<p>队列模型: 用来处理随机工作负载的数学方法</p>
<p>实现/模拟: 建立一个允许算法运行实际数据的系统;最灵活,最具一般性</p>
<h2 id="实时调度"><a href="#实时调度" class="headerlink" title="实时调度"></a>实时调度</h2><ul>
<li><p>实时系统</p>
<p>定义: 正确性依赖于其时间和功能两方面的一个操作系统</p>
<p>性能指标: 时间约束的及时性;速度和平均性能相对不重要</p>
<p>主要特征: 时间约束的可预测性</p>
<p>分类:</p>
<ul>
<li>强实时系统: 需要在保证时间内完成重要的任务,必须完成</li>
<li>弱实时系统: 要求重要的进程的优先级更高,尽量完成,并非必须</li>
</ul>
<p>任务(工作单元): 一次计算,一次文件读取,一次信息传递等</p>
<p>属性: 去的进展所需要的资源;定时参数.</p>
</li>
<li><p>单调速率(RM)</p>
<ul>
<li>最佳静态优先级调度</li>
<li>通过周期安排优先级</li>
<li>周期越短优先级越高</li>
<li>执行周期最短的任务</li>
</ul>
</li>
<li><p>截止日期最早优先(EDF)</p>
<ul>
<li>最佳的动态优先级调度</li>
<li>Deadline越早优先级越高</li>
<li>执行Deadline最早的任务</li>
</ul>
</li>
</ul>
<h2 id="多处理器调度"><a href="#多处理器调度" class="headerlink" title="多处理器调度"></a>多处理器调度</h2><p>多处理器的CPU调度更复杂:</p>
<ul>
<li>多个相同的单处理器组成一个多处理器</li>
<li>优点: 复杂共享</li>
</ul>
<p>对称多处理器(SMP)</p>
<ul>
<li>每个处理器运行自己的调度程序</li>
<li>需要在调度程序中同步</li>
</ul>
<h2 id="优先级反转"><a href="#优先级反转" class="headerlink" title="优先级反转"></a>优先级反转</h2><p>可以发生在任务基于优先级的可抢占的调度机制中</p>
<p>当系统内的环境强制使高优先级任务等待低优先级任务时发生</p>
<h1 id="第九章"><a href="#第九章" class="headerlink" title="第九章"></a>第九章</h1><blockquote>
<p>  第九章的主要内容是：同步</p>
</blockquote>
<h2 id="背景-1"><a href="#背景-1" class="headerlink" title="背景"></a>背景</h2><p>第一章到第八章内容, 到目前为止</p>
<ul>
<li>多道程序设计: 现代操作系统的重要特性</li>
<li>并行很有用(为什么?) 提示: 多个并发实体: CPU IO 用户 等</li>
<li>进程,线程: 操作系统抽象出来用于支持多道程序设计</li>
<li>CPU调度: 实现多道程序设计的机制</li>
<li>调度算法: 不同的策略</li>
</ul>
<p>独立的线程:</p>
<ul>
<li>不和其他线程共享资源或状态</li>
<li>确定性: 输入状态决定结果</li>
<li>可重现: 能够重现起始条件, IO</li>
<li>调度顺序不重要</li>
</ul>
<p>合作线程:</p>
<ul>
<li>在多个线程中共享状态</li>
<li>不确定性</li>
<li>不可重现</li>
</ul>
<p>不确定性和不可重现意味着bug可能是间歇性发生的</p>
<p>进程,线程;计算机,设备需要合作</p>
<p>合作优点:</p>
<ol>
<li>共享资源<ul>
<li>一台电脑,多个用户</li>
<li>一个银行存款余额,多台ATM机</li>
<li>嵌入式系统</li>
</ul>
</li>
<li>加速<ul>
<li>IO操作和计算可以重叠</li>
<li>多处理器</li>
</ul>
</li>
<li>模块化<ul>
<li>将大程序分解成小程序 gcc会调用cpp,cc1,cc2,as,ld</li>
<li>使系统易于扩展</li>
</ul>
</li>
</ol>
<p>程序可以调用函数fork()来创建一个新的进程</p>
<ul>
<li>操作系统需要分配一个新的并且唯一的进程ID</li>
<li>因此在内核中,这个系统调用会运行 new_pid = next_pid++;</li>
<li>翻译成机器指令:<ul>
<li>Load next_pid Reg1</li>
<li>STORE Reg1 new_pid</li>
<li>INC Reg1</li>
<li>STORE Reg1 next_pid</li>
</ul>
</li>
</ul>
<p>假设两个进程并发执行</p>
<ul>
<li>如果next_pid等于100, 那么其中一个进程得到的ID应该是100, 另一个进程的ID应该是101, next_pid应该增加到102</li>
<li>可能在INC前进行了上下文切换, 最终导致两个进程的pid都是100,而next_pid也是101</li>
</ul>
<p>无论多个线程的指令序列怎样交替执行,程序都必须正常工作</p>
<ul>
<li>多线程程序具有不确定性和不可重现的特点</li>
<li>不经过专门设计,调试难度很高</li>
</ul>
<p>不确定性要求并行程序的正确性</p>
<ul>
<li>先思考清楚问题,把程序的行为设计清楚</li>
<li>切忌给予着手编写代码,碰到问题再调试</li>
</ul>
<h2 id="一些概念"><a href="#一些概念" class="headerlink" title="一些概念"></a>一些概念</h2><p>前面的现象称为Race Condition(竞态条件)</p>
<p>系统缺陷: 结果依赖于并发执行或者时间的顺序,时间</p>
<ul>
<li>不确定性</li>
<li>不可重现</li>
</ul>
<p>怎么样避免竞态?</p>
<p>Atomic Operator(原子操作)</p>
<p>原子操作是指一次不存在任何终端或者失败的执行</p>
<ul>
<li>该执行成功结束</li>
<li>或者根本没有执行</li>
<li>并且不应发生任何部分执行的状态</li>
</ul>
<p>实际上操作往往不是原子的</p>
<ul>
<li>有些看上去是原子操作,实际上不是</li>
<li>连x++这样的简单语句,实际上是由三条指令构成的</li>
<li>有时候甚至连单条假期指令都不是原子的(Pipeline,super-scalar,out-of-order,pape fault)</li>
</ul>
<p>临界区(Critical section)是指进程中的一段需要访问共享资源并且当另一个进程处于相应代码区域时便不会被执行的代码区域</p>
<p>互斥(Mutual exclusion)是指当一个 进程处于临界区并访问共享资源时,没有其他进程会处于临界区并且访问任何相同的共享资源</p>
<p>死锁(Dead lock)是指两个或以上进程,在相互等待完成特定任务,而最终没法将自身任务进行下去</p>
<p>饥饿(Starvation)是指一个可执行的进程,被调度器持续忽略,以至于虽然处于可执行状态却不被执行</p>
<h2 id="临界区"><a href="#临界区" class="headerlink" title="临界区"></a>临界区</h2><p>互斥: 同一时间临界区中最多存在一个线程</p>
<p>Progress: 如果一个线程想要进入临界区,那么它最终会成功</p>
<p>有限等待: 如果一个线程i处于入口区,那么在i的请求被接受之前,其他线程进入临界区的时间是有限制的</p>
<p>无忙等待(可选): 如果一个进程在等待进入临界区,那么在它可以进入之前会被挂起</p>
<h2 id="方法1-禁用硬件中断"><a href="#方法1-禁用硬件中断" class="headerlink" title="方法1:禁用硬件中断"></a>方法1:禁用硬件中断</h2><p>没有中断,没有上下文切换,因此没有并发</p>
<ul>
<li>硬件将中断处理延迟到中断被启用之后</li>
<li>大多数现代计算机体系结构都提供指令来完成</li>
</ul>
<p>进入临界区</p>
<ul>
<li>禁用中断</li>
</ul>
<p>离开临界区</p>
<ul>
<li>开启中断</li>
</ul>
<p>一旦中断被禁用,线程就无法被停止</p>
<ul>
<li>整个系统都会为你停下来</li>
<li>可能导致其他线程处于饥饿状态</li>
</ul>
<p>要是临界区可以任意长怎么办?</p>
<ul>
<li>无法限制响应中断所需的时间(可能存在硬件影响)</li>
</ul>
<p>要小心使用,适合于较小的操作</p>
<h2 id="方法2-基于软件的解决方案"><a href="#方法2-基于软件的解决方案" class="headerlink" title="方法2:基于软件的解决方案"></a>方法2:基于软件的解决方案</h2><p>满足进程Pi和Pj之间互斥的经典的基于软件的解决方法(1981年)</p>
<p>使用两个共享数据项</p>
<ul>
<li>int turn; //指示该谁进入临界区</li>
<li>bool flag[]; //指示进程是否准备好进入临界区</li>
</ul>
<p>进入临界区:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">flag[i] = <span class="literal">true</span>;</span><br><span class="line">turn = j;</span><br><span class="line"><span class="keyword">while</span>(flag[j] &amp;&amp; turn == j);</span><br></pre></td></tr></table></figure>

<p>退出临界区:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">flag[i] = <span class="literal">false</span>;</span><br></pre></td></tr></table></figure>

<p>实例:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">	flag[i] = <span class="literal">true</span>;</span><br><span class="line">	turn = j;</span><br><span class="line">	<span class="keyword">while</span>(flag[j] &amp;&amp; turn == j);</span><br><span class="line">	CRITICAL SECTION</span><br><span class="line">	flag[i] = <span class="literal">false</span>;</span><br><span class="line">	REMAINDER SECTION</span><br><span class="line">&#125;<span class="keyword">while</span>(<span class="literal">true</span>);</span><br></pre></td></tr></table></figure>

<p>Bakery 算法(N个进程的临界区)</p>
<ul>
<li>进入临界区之前,进程接收一个数字</li>
<li>得到的数字最小的进入临界区</li>
<li>如果进程Pi和Pj收到相同的数字,那么如果i&lt;j,Pi先进入临界区,否则Pj先进入临界区</li>
<li>编号方案总是按照枚举的增加顺序生成数字</li>
</ul>
<p>Dekker算法(1965): 第一个针对双线程例子的正确解决方案</p>
<p>Bakery算法(1979): 针对n线程的临界区问题解决方案</p>
<p>复杂: 需要两个进程的共享数据项</p>
<p>需要忙等待: 浪费CPU时间</p>
<p>没有硬件保证的情况下无真正的软件解决方案: Perterson算法需要原子的LOAD和STORE指令</p>
<h2 id="方法3-更高级的抽象"><a href="#方法3-更高级的抽象" class="headerlink" title="方法3:更高级的抽象"></a>方法3:更高级的抽象</h2><p>硬件提供了一些原语</p>
<ul>
<li>像中断禁用, 原子操作指令等</li>
<li>大多数现代体系结构都这样</li>
</ul>
<p>操作系统提供更高级的编程抽象来简化并行编程</p>
<ul>
<li>例如,锁,信号量</li>
<li>从硬件原语中构建</li>
</ul>
<p>锁是一个抽象的数据结构</p>
<ul>
<li>一个二进制状态(锁定,解锁),两种方法</li>
<li>Lock::Acquire() 锁被释放前一直等待,然后得到锁</li>
<li>Lock::Release() 锁释放,唤醒任何等待的进程</li>
</ul>
<p>使用锁来编写临界区</p>
<ul>
<li><p>前面的例子变得简单起来:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">lock_next_pid-&gt;Acquire();</span><br><span class="line">new_pid = next_pid++;</span><br><span class="line">lock_next_pid-&gt;Release();</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>大多数现代体系结构都提供特殊的原子操作指令</p>
<ul>
<li>通过特殊的内存访问电路</li>
<li>针对单处理器和多处理器</li>
</ul>
<p>Test-and-Set 测试和置位</p>
<ul>
<li>从内存中读取值</li>
<li>测试该值是否为1(然后返回真或假)</li>
<li>内存值设置为1</li>
</ul>
<p>交换</p>
<ul>
<li>交换内存中的两个值</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">TestandSet</span><span class="params">(<span class="keyword">bool</span> *target)</span></span>&#123;</span><br><span class="line">		<span class="keyword">bool</span> rv = *target;</span><br><span class="line">		*target = <span class="literal">true</span>;</span><br><span class="line">		<span class="keyword">return</span> rv;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Exchange</span><span class="params">(<span class="keyword">bool</span> *a, <span class="keyword">bool</span> *b)</span></span>&#123;</span><br><span class="line">		<span class="keyword">bool</span> tmp = *a;</span><br><span class="line">		*a = *b;</span><br><span class="line">		*b = tmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>总结</p>
<p>锁是更高等级的编程抽象</p>
<ul>
<li>互斥可以使用锁来实现</li>
<li>通常需要一定等级的硬件支持</li>
</ul>
<p>常用的三种实现方法</p>
<ul>
<li>禁用中断(仅限于单处理器)</li>
<li>软件方法(复杂)</li>
<li>原子操作指令(单处理器或多处理器均可)</li>
</ul>
<p>可选的实现内容:</p>
<ul>
<li>有忙等待</li>
<li>无忙等待</li>
</ul>
</li>
</ul>
<h1 id="第十章"><a href="#第十章" class="headerlink" title="第十章"></a>第十章</h1><blockquote>
<p>  第十章的主要内容是：信号量和管程</p>
</blockquote>
<h2 id="信号量"><a href="#信号量" class="headerlink" title="信号量"></a>信号量</h2><p>信号量的抽象数据类型</p>
<ul>
<li>一个整形(sem),具有两个原子操作</li>
<li>P(): sem减一,如果sem&lt;0,等待,否则继续</li>
<li>V(): sem加一,如果sem≤0,唤醒一个等待的P</li>
</ul>
<p>信号量是整数</p>
<p>信号量是被保护的变量</p>
<ul>
<li>初始化完成后,唯一改变一个信号量的值的办法是通过P()和V()</li>
<li>操作必须是原子</li>
</ul>
<p>P()能够阻塞,V()不会阻塞</p>
<p>我们假定信号量是公平的</p>
<ul>
<li>没有线程被阻塞在P()仍然堵塞如果V()被无限频繁调用(在同一个信号量)</li>
<li>在实践中,FIFO经常被使用</li>
</ul>
<p>两个类型信号量</p>
<ul>
<li>二进制信号量: 可以是0或1</li>
<li>计数信号量: 可以取任何非负数</li>
<li>两者相互表现(给定一个可以实现另一个)</li>
</ul>
<p>信号量可以用在2个方面</p>
<ul>
<li>互斥</li>
<li>条件同步(调度约束——一个线程等待另一个线程的事情发生)</li>
</ul>
<h2 id="信号量使用"><a href="#信号量使用" class="headerlink" title="信号量使用"></a>信号量使用</h2><ol>
<li><p>用二进制信号量实现的互斥</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">mutex = <span class="keyword">new</span> Semaphore(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">mutex-&gt;P();</span><br><span class="line">...</span><br><span class="line">mutex-&gt;V();</span><br></pre></td></tr></table></figure>
</li>
<li><p>用二进制信号量实现的调度约束</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">condition = <span class="keyword">new</span> Semaphore(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Thread A</span></span><br><span class="line">...</span><br><span class="line">condition-&gt;P(); <span class="comment">//等待线程B某一些指令完成之后再继续运行,在此阻塞</span></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">//Thread B</span></span><br><span class="line">...</span><br><span class="line">condition-&gt;V(); <span class="comment">//信号量增加唤醒线程A</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure>
</li>
<li><p>一个线程等待另一个线程处理事情</p>
<p>比如生产东西或消费东西(生产者消费者模式),互斥(锁机制)是不够的</p>
<p>有界缓冲区的生产者-消费者问题</p>
<ul>
<li>一个或者多个生产者产生数据将数据放在一个缓冲区里</li>
<li>单个消费者每次从缓冲区取出数据</li>
<li>在任何一个时间只有一个生产者或消费者可以访问该缓冲区</li>
</ul>
<p>正确性要求</p>
<ul>
<li>在任何一个时间只能有一个线程操作缓冲区(互斥)</li>
<li>当缓冲区为空时,消费者必须等待生产者(调度,同步约束)</li>
<li>当缓存区满,生产者必须等待消费者(调度,同步约束)</li>
</ul>
<p>每个约束用一个单独的信号量</p>
<ul>
<li>二进制信号量互斥</li>
<li>一般信号量 fullBuffers</li>
<li>一般信号了 emptyBuffers</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BoundedBuffer</span>&#123;</span></span><br><span class="line">		mutex = <span class="keyword">new</span> Semaphore(<span class="number">1</span>);</span><br><span class="line">		fullBuffers = <span class="keyword">new</span> Semaphore(<span class="number">0</span>);   <span class="comment">//说明缓冲区初始为空</span></span><br><span class="line"> 		emptyBuffers = <span class="keyword">new</span> Semaphore(n);  <span class="comment">//同时可以有n个生产者来生产</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">BoundedBuffer::Deposit(c)&#123;</span><br><span class="line">		emptyBuffers-&gt;P();</span><br><span class="line">		mutex-&gt;P();</span><br><span class="line">		Add c to the buffer;</span><br><span class="line">		mutex-&gt;V();</span><br><span class="line">		fullBuffers-&gt;V();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BoundedBuffer::Remove(c)&#123;</span><br><span class="line">		fullBuffers-&gt;P();</span><br><span class="line">		mutex-&gt;P();</span><br><span class="line">		Remove c from buffer;</span><br><span class="line">		mutex-&gt;V();</span><br><span class="line">		emptyBuffers-&gt;V();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="信号量实现"><a href="#信号量实现" class="headerlink" title="信号量实现"></a>信号量实现</h2><p>使用硬件原语</p>
<ul>
<li>禁用中断</li>
<li>原子指令</li>
</ul>
<p>类似锁</p>
<ul>
<li>禁用中断</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Semaphore</span>&#123;</span></span><br><span class="line">		<span class="keyword">int</span> sem;</span><br><span class="line">		WaitQueue q;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Semaphore::P()&#123;</span><br><span class="line">		--sem;</span><br><span class="line">		<span class="keyword">if</span>(sem &lt; <span class="number">0</span>)&#123;</span><br><span class="line">				Add <span class="keyword">this</span> thread t to q;</span><br><span class="line">				block(p);</span><br><span class="line">		&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Semaphore::V()&#123;</span><br><span class="line">		++sem;</span><br><span class="line">		<span class="keyword">if</span>(sem &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">				Remove a thread t from q;</span><br><span class="line">				wakeup(t);</span><br><span class="line">		&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>信号量的双用途</p>
<ul>
<li>互斥和条件同步</li>
<li>但等待条件是独立的互斥</li>
</ul>
<p>读,开发代码比较困难</p>
<ul>
<li>程序员必须非常精通信号量</li>
</ul>
<p>容易出错</p>
<ul>
<li>使用的信号量已经被另一个线程占用</li>
<li>忘记释放信号量</li>
</ul>
<p>不能够处理死锁问题</p>
<h2 id="管程"><a href="#管程" class="headerlink" title="管程"></a>管程</h2><p>目的: 分离互斥和条件同步的关注</p>
<p>什么是管程</p>
<ul>
<li>一个锁: 指定临界区</li>
<li>0或者多个条件变量: 等待,通知信号量用于管程并发访问共享数据</li>
</ul>
<p>一般方法</p>
<ul>
<li>收集在对象,模块中的相关共享数据</li>
<li>定义方法来访问共享数据</li>
</ul>
<p>Lock</p>
<ul>
<li>Lock::Acquire() 等待直到锁可用,然后抢占锁</li>
<li>Lock::Release() 释放锁,唤醒等待者如果有</li>
</ul>
<p>Condition Variable</p>
<ul>
<li>允许等待状态进入临界区<ul>
<li>允许处于等待(睡眠)的线程进入临界区</li>
<li>某个时刻原子释放锁进入睡眠</li>
</ul>
</li>
<li>Wait() operation<ul>
<li>释放锁,睡眠,重新获得锁放回</li>
</ul>
</li>
<li>Signal() operation(or broadcast() operation)<ul>
<li>唤醒等待者(或者所有等待者),如果有</li>
</ul>
</li>
</ul>
<p>实现</p>
<ul>
<li>需要维持每个条件队列</li>
<li>线程等待的条件等待signal()</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Condition</span>&#123;</span></span><br><span class="line">		<span class="keyword">int</span> numWaiting = <span class="number">0</span>;</span><br><span class="line">		WaitQueue q;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Condition::Wait(lock)&#123;</span><br><span class="line">		numWaiting++;</span><br><span class="line">		Add <span class="keyword">this</span> thread t to q;</span><br><span class="line">		release(lock);</span><br><span class="line">		schedule(); <span class="comment">//need mutex</span></span><br><span class="line">		require(lock);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Condition::Signal()&#123;</span><br><span class="line">		<span class="keyword">if</span>(numWaiting &gt; <span class="number">0</span>)&#123;</span><br><span class="line">				Remove a thread t from q;</span><br><span class="line">				wakeup(t); <span class="comment">//need mutex</span></span><br><span class="line">				numWaiting--;</span><br><span class="line">		&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>管程解决生产者-消费者问题</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BoundedBuffer</span>&#123;</span></span><br><span class="line">		Lock lock;</span><br><span class="line">		<span class="keyword">int</span> count = <span class="number">0</span>;  <span class="comment">//buffer 为空</span></span><br><span class="line">		Condition notFull, notEmpty;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">BoundedBuffer::Deposit(c)&#123;</span><br><span class="line">		lock-&gt;Acquire();    <span class="comment">//管程的定义:只有一个线程能够进入管程</span></span><br><span class="line">		<span class="keyword">while</span>(count == n)</span><br><span class="line">				notFull.Wait(&amp;lock); <span class="comment">//释放前面的锁</span></span><br><span class="line">		Add c to the buffer;</span><br><span class="line">		count++;</span><br><span class="line">		notEmpty.Signal();</span><br><span class="line">		lock-&gt;Release();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BoundedBuffer::Remove(c)&#123;</span><br><span class="line">		lock-&gt;Acquire();</span><br><span class="line">		<span class="keyword">while</span>(count == <span class="number">0</span>)</span><br><span class="line">				notEmpty.Wait(&amp;lock);</span><br><span class="line">		Remove c from buffer;</span><br><span class="line">		count--;</span><br><span class="line">		notFull.Signal();</span><br><span class="line">		lock-&gt;Release();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>开发,调试并行程序很难</p>
<ul>
<li>非确定性的交叉指令</li>
</ul>
<p>同步结构</p>
<ul>
<li>锁: 互斥</li>
<li>条件变量: 有条件的同步</li>
<li>其他原语: 信号量</li>
</ul>
<p>怎么样有效地使用这些结构</p>
<ul>
<li>制定并遵循严格的程序设计风格,策略</li>
</ul>
<h2 id="经典同步问题"><a href="#经典同步问题" class="headerlink" title="经典同步问题"></a>经典同步问题</h2><ol>
<li><p>读者-写者问题</p>
<p>动机: 共享数据的访问</p>
<p>两种类型的使用者: 读者(不修改数据) 写者(读取和修改数据)</p>
<p>问题的约束:</p>
<ul>
<li>允许同一时间有多个读者,但在任何时候只有一个写者</li>
<li>当没有写者时,读者才能访问数据</li>
<li>当没有读者和写者时,写者才能访问数据</li>
<li>在任何时候只能有一个线程可以操作共享变量</li>
</ul>
<p>多个并发进程的数据集共享</p>
<ul>
<li>读者: 只读数据集;他们不执行任何更新</li>
<li>写者: 可以读取和写入</li>
</ul>
<p>共享数据</p>
<ul>
<li>数据集</li>
<li>信号量CountMutex初始化为1</li>
<li>信号量WriteMutex初始化为1</li>
<li>整数Rcount初始化为0(当前读者个数)</li>
</ul>
<p>读者优先设计</p>
<p>只要有一个读者处于活动状态, 后来的读者都会被接纳.如果读者源源不断的出现,那么写者使用处于阻塞状态.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//信号量实现</span></span><br><span class="line"><span class="comment">//writer</span></span><br><span class="line">sem_wait(WriteMutex);</span><br><span class="line">write;</span><br><span class="line">sem_post(WriteMutex);</span><br><span class="line"></span><br><span class="line"><span class="comment">//reader</span></span><br><span class="line">sem_wait(CountMutex);</span><br><span class="line"><span class="keyword">if</span>(Rcount == <span class="number">0</span>)</span><br><span class="line">		sem_wait(WriteMutex); <span class="comment">//确保后续不会有写者进入</span></span><br><span class="line">++Rcount;</span><br><span class="line">read;</span><br><span class="line">--Rcount;</span><br><span class="line"><span class="keyword">if</span>(Rcount == <span class="number">0</span>)</span><br><span class="line">		sem_post(WriteMutex); <span class="comment">//全部读者全部离开才能唤醒写者</span></span><br><span class="line">sem_post(CountMutex);</span><br></pre></td></tr></table></figure>

<p>写者优先设计</p>
<p>一旦写者就绪,那么写者会尽可能的执行写操作.如果写者源源不断的出现的话,那么读者就始终处于阻塞状态.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//writer</span></span><br><span class="line">Database::Write()&#123;</span><br><span class="line">		Wait until readers/writers;</span><br><span class="line">		write database;</span><br><span class="line">		check out - wake up waiting readers/writers;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//reader</span></span><br><span class="line">Database::Read()&#123;</span><br><span class="line">		Wait until no writers;</span><br><span class="line">		read database;</span><br><span class="line">		check out - wake up waiting writers;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//管程实现</span></span><br><span class="line">AR = <span class="number">0</span>; <span class="comment">// # of active readers</span></span><br><span class="line">AW = <span class="number">0</span>; <span class="comment">// # of active writers</span></span><br><span class="line">WR = <span class="number">0</span>; <span class="comment">// # of waiting readers</span></span><br><span class="line">WW = <span class="number">0</span>; <span class="comment">// # of waiting writers</span></span><br><span class="line">Condition okToRead;</span><br><span class="line">Condition okToWrite;</span><br><span class="line">Lock lock;</span><br><span class="line"><span class="comment">//writer</span></span><br><span class="line"><span class="function">Public <span class="title">Database::Write</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="comment">//Wait until no readers/writers;</span></span><br><span class="line">		StartWrite();</span><br><span class="line">		write database;</span><br><span class="line">		<span class="comment">//check out - wake up waiting readers/writers;</span></span><br><span class="line">		DoneWrite();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Private <span class="title">Database::StartWrite</span><span class="params">()</span></span>&#123;</span><br><span class="line">		lock.Acquire();</span><br><span class="line">		<span class="keyword">while</span>((AW + AR) &gt; <span class="number">0</span>)&#123;</span><br><span class="line">				WW++;</span><br><span class="line">				okToWrite.wait(&amp;lock);</span><br><span class="line">				WW--;		</span><br><span class="line">		&#125;</span><br><span class="line">		AW++;</span><br><span class="line">		lock.Release();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Private <span class="title">Database::DoneWrite</span><span class="params">()</span></span>&#123;</span><br><span class="line">		lock.Acquire();</span><br><span class="line">		AW--;</span><br><span class="line">		<span class="keyword">if</span>(WW &gt; <span class="number">0</span>)&#123;</span><br><span class="line">				okToWrite.signal();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(WR &gt; <span class="number">0</span>)&#123;</span><br><span class="line">				okToRead.broadcast(); <span class="comment">//唤醒所有reader </span></span><br><span class="line">		&#125;</span><br><span class="line">		lock.Release();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//reader</span></span><br><span class="line"><span class="function">Public <span class="title">Database::Read</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="comment">//Wait until no writers;</span></span><br><span class="line">		StartRead();</span><br><span class="line">		read database;</span><br><span class="line">		<span class="comment">//check out - wake up waiting writers;</span></span><br><span class="line">		DoneRead();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Private <span class="title">Database::StartRead</span><span class="params">()</span></span>&#123;</span><br><span class="line">		lock.Acquire();</span><br><span class="line">		<span class="keyword">while</span>(AW + WW &gt; <span class="number">0</span>)&#123;    <span class="comment">//关注等待的writer,体现出写者优先</span></span><br><span class="line">				WR++;</span><br><span class="line">				okToRead.wait(&amp;lock);</span><br><span class="line">				WR--;</span><br><span class="line">		&#125;</span><br><span class="line">		AR++;</span><br><span class="line">		lock.Release();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Database::DoneRead</span><span class="params">()</span></span>&#123;</span><br><span class="line">		lock.Acquire();</span><br><span class="line">		AR--;</span><br><span class="line">		<span class="keyword">if</span>(AR == <span class="number">0</span> &amp;&amp; WW &gt; <span class="number">0</span>)&#123;  <span class="comment">//只有读者全部没有了,才需要唤醒</span></span><br><span class="line">				okToWrite.signal();</span><br><span class="line">		&#125;</span><br><span class="line">		lock.Release();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>哲学家就餐问题(学习自 <a href="http://github.com/cyc2018">github.com/cyc2018</a>)</p>
<p>共享数据:</p>
<ul>
<li>Bowl of rice(data set)</li>
<li>Semaphone fork [5] initialized to 1</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 5</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LEFT (i + N - 1) % N <span class="comment">// 左邻居</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RIGHT (i + 1) % N    <span class="comment">// 右邻居</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> THINKING 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> HUNGRY   1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EATING   2</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> semaphore;</span><br><span class="line"><span class="keyword">int</span> state[N];                <span class="comment">// 跟踪每个哲学家的状态</span></span><br><span class="line">semaphore mutex = <span class="number">1</span>;         <span class="comment">// 临界区的互斥，临界区是 state 数组，对其修改需要互斥</span></span><br><span class="line">semaphore s[N];              <span class="comment">// 每个哲学家一个信号量</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">philosopher</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(TRUE) &#123;</span><br><span class="line">        think(i);</span><br><span class="line">        take_two(i);</span><br><span class="line">        eat(i);</span><br><span class="line">        put_two(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">take_two</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    down(&amp;mutex);</span><br><span class="line">    state[i] = HUNGRY;</span><br><span class="line">    check(i);</span><br><span class="line">    up(&amp;mutex);</span><br><span class="line">    down(&amp;s[i]); <span class="comment">// 只有收到通知之后才可以开始吃，否则会一直等下去</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">put_two</span><span class="params">(i)</span> </span>&#123;</span><br><span class="line">    down(&amp;mutex);</span><br><span class="line">    state[i] = THINKING;</span><br><span class="line">    check(LEFT); <span class="comment">// 尝试通知左右邻居，自己吃完了，你们可以开始吃了</span></span><br><span class="line">    check(RIGHT);</span><br><span class="line">    up(&amp;mutex);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">eat</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    down(&amp;mutex);</span><br><span class="line">    state[i] = EATING;</span><br><span class="line">    up(&amp;mutex);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查两个邻居是否都没有用餐，如果是的话，就 up(&amp;s[i])，使得 down(&amp;s[i]) 能够得到通知并继续执行</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">check</span><span class="params">(i)</span> </span>&#123;         </span><br><span class="line">    <span class="keyword">if</span>(state[i] == HUNGRY &amp;&amp; state[LEFT] != EATING &amp;&amp; state[RIGHT] !=EATING) &#123;</span><br><span class="line">        state[i] = EATING;</span><br><span class="line">        up(&amp;s[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<h1 id="第十一章"><a href="#第十一章" class="headerlink" title="第十一章"></a>第十一章</h1><blockquote>
<p>  第十一章的主要内容是：死锁和进程通信</p>
</blockquote>
<h2 id="死锁问题"><a href="#死锁问题" class="headerlink" title="死锁问题"></a>死锁问题</h2><p>一组阻塞的进程持有一种资源等待获取另一个进程所占有的一个资源</p>
<p>示例:</p>
<ul>
<li>系统有2个磁带驱动器</li>
<li>P1和P2各有一个,都需要另外一个</li>
</ul>
<h2 id="系统模型"><a href="#系统模型" class="headerlink" title="系统模型"></a>系统模型</h2><p>资源类型R1,R2,..,Rm(CPU, memory space, IO devices)</p>
<p>每个资源类型Ri有Wi个实例.</p>
<p>每个进程使用资源如下:</p>
<ul>
<li>require,get ← free resource</li>
<li>use,hold    ← requested,used resource</li>
<li>release     ← free resource</li>
</ul>
<p>可重复使用的资源</p>
<ul>
<li>在一个时间只能有一个进程使用且不能被删除</li>
<li>进程获得资源,后来释放由其他进程重用</li>
<li>处理器,IO通道,主和副存储器,设备和数据结构,如文件,数据库和信号量</li>
<li>如果每个进程拥有一个资源并请求其他资源,死锁可能发生</li>
</ul>
<p>使用资源</p>
<ul>
<li>创建和销毁</li>
<li>在IO缓存区的中断,信号,消息,信息</li>
<li>如果接收消息阻塞可能会发生死锁</li>
<li>可能少见的组合事件会引起死锁</li>
</ul>
<p>资源分配图</p>
<p>一组顶点V和边E的集合</p>
<ul>
<li>V有两种类型:<ul>
<li>P={P1,P2,…,Pn},集合包括系统中的所有进程</li>
<li>R={R1,R2,…,Rm},集合包括系统中的所有资源类型</li>
</ul>
</li>
<li>requesting,claiming edge - directed edge Pi → Rj</li>
<li>assignment,holding  edge - directed edge Rj → Pi</li>
</ul>
<p>基本情况</p>
<p>如果图中不包含循环:</p>
<ul>
<li>没有死锁</li>
</ul>
<p>如果图中包含循环:</p>
<ul>
<li>如果每个资源类只有一个实例,那么死锁</li>
<li>如果每个资源类有几个实例,可能死锁</li>
</ul>
<h2 id="死锁特征"><a href="#死锁特征" class="headerlink" title="死锁特征"></a>死锁特征</h2><p>死锁出现一定会出现以下四个条件,但是出现以下四个条件不一定死锁:</p>
<ul>
<li>互斥: 在一个时间只能有一个进程使用资源</li>
<li>持有并等待: 进程保持至少一个资源正在等待获取其他进程持有的额外资源</li>
<li>无抢占: 一个资源只能被进程资源释放,进程已经完成了它的任务之后</li>
<li>循环等待: 存在等待进程集合{P0,P1,…,Pn},P0正在等待P1所占用的资源,P1正在等待P2占用的资源…Pn-1在等待Pn的资源,Pn正在等待P0所占用的资源</li>
</ul>
<h2 id="死锁处理方法"><a href="#死锁处理方法" class="headerlink" title="死锁处理方法"></a>死锁处理方法</h2><p>常见方法</p>
<ul>
<li>确保系统永远不会进入死锁状态</li>
<li>运行系统进入死锁状态,然后恢复.</li>
<li>忽略这个问题,假装系统中从来没有发生死锁,用于大多数操作系统,包括UNIX</li>
</ul>
<h3 id="Deadlock-Prevention-预防"><a href="#Deadlock-Prevention-预防" class="headerlink" title="Deadlock Prevention    预防"></a>Deadlock Prevention    预防</h3><p>限制申请方式</p>
<ul>
<li>互斥 - 共享资源不是必须的,必须占用非共享资源</li>
<li>占用并等待 - 必须保证当一个进程请求的资源,它不持有任何其他资源<ul>
<li>需要进程请求并分配其所有资源,它开始执行之前或允许进程请求资源仅当进程没有资源</li>
<li>资源利用率低,可能发生饥饿</li>
</ul>
</li>
<li>无抢占 -<ul>
<li>如果进程占有某些资源,并请求其他不能被立即分配的资源,则释放当前正占有的资源</li>
<li>被抢占资源添加到资源列表中</li>
<li>只有当它能够获得旧的资源以及它请求新的资源,进程可以得到执行</li>
</ul>
</li>
<li>循环等待 - 对所有资源类型进行排序,并要求每个进程按照资源的顺序进行申请</li>
</ul>
<h3 id="Deadlock-Avoidance-避免"><a href="#Deadlock-Avoidance-避免" class="headerlink" title="Deadlock Avoidance     避免"></a>Deadlock Avoidance     避免</h3><p>需要系统具有一些额外的先验信息提供</p>
<ul>
<li>最简单和最有效的模式是要求每个进程声明它可能需要的每个类型资源的最大数目</li>
<li>资源的分配状态是通过限定提供与分配的资源数量,和进程的最大需求</li>
<li>死锁避免算法动态检查的资源分配状态,以确保永远不会有一个环形等待状态</li>
<li>当一个进程请求可用资源,系统必须判断立即分配是否能使系统处于安全状态</li>
<li>系统处于安全状态指: 针对所有进程,存在安全序列</li>
<li>序列&lt;P1,P2,…,Pn&gt;是安全的: 针对每个Pi,Pi要求的资源能够由当前可用的资源+所有的Pj持有的资源来满足,其中j&lt;i.<ul>
<li>如果Pi资源的需求不是立即可用,那么Pi可以等到所有Pj完成</li>
<li>当Pi完成后,Pi+1可以得到所需要的资源,执行,返回所分配的资源,并终止.</li>
<li>用同样的方法,Pi+2,Pi+3和Pn能获得其所需的资源.</li>
</ul>
</li>
<li>如果系统处于安全状态→无死锁</li>
<li>如果系统处于不安全状态→可能死锁</li>
<li>避免死锁: 确保系统永远不会进入不安全状态</li>
</ul>
<h3 id="Deadlock-Detection-检测"><a href="#Deadlock-Detection-检测" class="headerlink" title="Deadlock Detection     检测"></a>Deadlock Detection     检测</h3><p>每个资源类型单一实例</p>
<p>Maintain wait-for graph</p>
<ul>
<li>节点是进程</li>
<li>Pi→Pj: Pi等待Pj</li>
</ul>
<p>定期调用检测算法来搜索图中是否存在循环</p>
<p>算法需要n^2次操作,n是图中顶点的数目</p>
<p>数据结构:</p>
<ul>
<li>Available: 长度为M的向量表示每种类型可用资源的数量</li>
<li>Allocation: 一个nxm矩阵定义了当前分配给各个进程每种类型资源的数量,如果Alocation[i, j] = k, 进程Pi拥有资源Rj的k个实例</li>
<li>Request: 一个nxm矩阵表示各进程的当前请求.如果Request[i, j] = k,表示进程Pi请求k个资源Pj的实例</li>
</ul>
<p>具体算法(跳过了,看视频)</p>
<p>检查算法使用</p>
<p>何时,使用什么样的频率来检测依赖于:</p>
<ul>
<li>死锁多久可能会发生?</li>
<li>多少进程需要被回滚? one for each disjoint cycle</li>
</ul>
<p>如果检测算法多次被调用,有可能是资源图有多个循环,所以我们无法分辨出多个可能死锁进程中的哪些”造成”死锁</p>
<h3 id="Recovery-from-Deadlock-恢复"><a href="#Recovery-from-Deadlock-恢复" class="headerlink" title="Recovery from Deadlock 恢复"></a>Recovery from Deadlock 恢复</h3><p>终止所有的死锁进程</p>
<p>在一个时间内终止一个进程直到死锁消除</p>
<p>终止进程的顺序应该是:</p>
<ul>
<li>进程的优先级</li>
<li>进程运行了多久以及需要多少时间才能完成</li>
<li>进程占用的资源</li>
<li>进程完成需要的资源</li>
<li>多少进程需要被终止</li>
<li>进程是交互还是批处理</li>
</ul>
<p>选择一个受孩子 - 最小的成本</p>
<p>回滚 - 返回到一些安全状态,重启进程到安全状态</p>
<p>饥饿 - 同一进程可能一直被选作受害者,包括回滚的数量</p>
<h2 id="IPC"><a href="#IPC" class="headerlink" title="IPC"></a>IPC</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>进程通信的机制及同步</p>
<p>不使用共享变量的进程通信</p>
<p>IPC facility 提供2个操作:</p>
<ul>
<li>send(message) - 消息大小固定或者可变</li>
<li>receive(message)</li>
</ul>
<p>如果P和Q想通信,需要:</p>
<ul>
<li>在它们之间建立通信链路</li>
<li>通过send/recevie交换消息</li>
</ul>
<p>通信链路的实现</p>
<ul>
<li>物理(例如,共享内存,硬件总线)</li>
<li>逻辑(例如,逻辑属性)</li>
</ul>
<h3 id="直接通信"><a href="#直接通信" class="headerlink" title="直接通信"></a>直接通信</h3><p>进程必须正确的命名对方:</p>
<ul>
<li>send(P, message) - 发送消息到进程P</li>
<li>receive(Q, message) - 从进程Q接收信息</li>
</ul>
<p>通信链路的属性</p>
<ul>
<li>自动建立链路</li>
<li>一条链路恰好对应一对通信进程</li>
<li>每对进程之间只有一个链路存在</li>
<li>链路可以是单向的,但通常是双向的</li>
</ul>
<h3 id="间接通信"><a href="#间接通信" class="headerlink" title="间接通信"></a>间接通信</h3><p>定向从消息队列接收消息</p>
<ul>
<li>每个消息对垒都有一个唯一的ID</li>
<li>只有它们共享了一个消息队列,进程才能够通信</li>
</ul>
<p>通信链路的属性</p>
<ul>
<li>只有进程共享一个共同的消息队列,才建立链路</li>
<li>链接可以与许多进程相关联</li>
<li>每对进程可以共享多个通信链路</li>
<li>链接可以是单向或者双向</li>
</ul>
<p>操作</p>
<ul>
<li>创建一个新的消息队列</li>
<li>通过消息队列发送和接收消息</li>
<li>销毁消息队列</li>
</ul>
<p>原语的定义如下:</p>
<ul>
<li><p>send(A, message)</p>
</li>
<li><p>receive(A, message)</p>
</li>
<li><p>通信链路缓冲</p>
<p>  通信链路缓存大小:</p>
<ol>
<li>0容量 - 0 message : 发送方必须等待接收方</li>
<li>有限容量 - n messages的有限长度 : 发送方必须等待,如果队列满</li>
<li>无限容量 - 无限长度 : 发送方不需要等待</li>
</ol>
</li>
</ul>
<h3 id="信号"><a href="#信号" class="headerlink" title="信号"></a>信号</h3><p>信号Signal</p>
<ul>
<li>软件中断通知事件处理</li>
<li>Examples: SIGFPE, SIGKILL, SIGUSRI, SIGSTOP, SIGCONT</li>
</ul>
<p>接收到信号时会发生什么?</p>
<ul>
<li>catch:  指定信号处理函数被调用</li>
<li>ignore: 依靠操作系统的默认操作(abort, memory dump, suspend or resume process)</li>
<li>mask:   闭塞信号因此不会传送(可能是暂时的,当处理同样类型的信号)</li>
</ul>
<p>不足:</p>
<ul>
<li>不能传输要交换的任何数据</li>
</ul>
<h3 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h3><p>数据交换</p>
<p>子进程从父进程继承文件描述符(0 stdin, 1 stdout, 2 stderr)</p>
<p>进程不知道(或不关心)从键盘,文件,程序读取或写入到终端,文件,程序.</p>
<p>例如: $ ls | more (两个进程, 管道是缓存,对于ls来说是stdout,对于more来说是stdin )</p>
<h3 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h3><p>消息队列按FIFO来管理消息</p>
<ul>
<li>message: 作为一个字节序列存储</li>
<li>message queues: 消息数组</li>
<li>FIFO &amp;  FILO configuration</li>
</ul>
<h3 id="共享内存"><a href="#共享内存" class="headerlink" title="共享内存"></a>共享内存</h3><p>进程</p>
<ul>
<li>每个进程都有私有地址空间</li>
<li>在每个地址空间内,明确地设置了共享内存段</li>
</ul>
<p>优点</p>
<ul>
<li>快速,方便地共享数据</li>
</ul>
<p>不足</p>
<ul>
<li>必须同步数据访问</li>
</ul>
<p>最快的方法</p>
<p>一个进程写另一个进程立即可见</p>
<p>没有系统调用干预</p>
<p>没有数据复制</p>
<p>不提供同步</p>
<ul>
<li>Socket</li>
</ul>
<h1 id="第十二章"><a href="#第十二章" class="headerlink" title="第十二章"></a>第十二章</h1><blockquote>
<p>  第十二章的主要内容是：文件管理</p>
</blockquote>
<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><h3 id="文件系统和文件"><a href="#文件系统和文件" class="headerlink" title="文件系统和文件"></a>文件系统和文件</h3><p>文件系统: 一种用于持久性存储的系统抽象</p>
<ul>
<li>在存储上: 组织,控制,导航,访问和检索数据</li>
<li>在大多数计算机系统包含文件系统</li>
<li>个人电脑,服务器,笔记本电脑</li>
<li>ipod,tivo,机顶盒,手机,电脑</li>
<li>google可能也是由一个文件系统构成的</li>
</ul>
<p>文件: 文件系统中的一个单元的相关数据在操作系统中的抽象</p>
<p>文件系统的功能:</p>
<ul>
<li>分配文件磁盘空间<ul>
<li>管理文件块(哪一块属于哪一个文件)</li>
<li>管理空闲空间(哪一块是空闲的)</li>
<li>分配算法(策略)</li>
</ul>
</li>
<li>管理文件集合<ul>
<li>定位文件及其内容</li>
<li>命名: 通过名字找到文件的接口</li>
<li>最常见: 分层文件系统</li>
<li>文件系统类型(组织文件的不同方式)</li>
</ul>
</li>
<li>提供的便利及特征<ul>
<li>保护: 分层来保护数据安全</li>
<li>可靠性,持久性: 保持文件的持久即使发生崩溃,媒体错误,攻击等</li>
</ul>
</li>
</ul>
<p>文件和块:</p>
<p>文件属性: 名称,类型,位置,大小,保护,创建者,创建时间,最久修改时间…</p>
<p>文件头: 在存储元数据中保存了每个文件的信息,保存文件的属性,跟踪哪一块存储块属于逻辑上文件结构的哪个偏移</p>
<h3 id="文件描述符"><a href="#文件描述符" class="headerlink" title="文件描述符"></a>文件描述符</h3><p>文件使用模式:</p>
<p>使用程序必须在使用前先”打开”文件</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">f = open(name, flag);</span><br><span class="line">...</span><br><span class="line">... = read(f, ...);</span><br><span class="line">...</span><br><span class="line">close(f);</span><br></pre></td></tr></table></figure>

<p>内核跟踪每个进程打开的文件:</p>
<ul>
<li>操作系统为每个进程维护一个打开文件表</li>
<li>一个打开文件描述符是这个表中的索引</li>
</ul>
<p>需要元数据来管理打开文件:</p>
<p>文件指针: 指向最近的一次读写位置,每个打开了这个文件的进程都这个指针</p>
<p>文件打开计数: 记录文件打开的次数 - 当最后一个进程关闭了文件时,允许将其从打开文件表中移除</p>
<p>文件磁盘位置: 缓存数据访问信息</p>
<p>访问权限: 每个程序访问模式信息</p>
<p>用户视图: 持久的数据结构</p>
<p>系统访问接口:</p>
<p>字节的集合(UNIX)</p>
<p>系统不会关心你想存储在磁盘上的任何的数据结构</p>
<p>操作系统内部视角:</p>
<p>块的集合(块是逻辑转换单元,而扇区是物理转换单元)</p>
<p>块大小&lt;&gt; 扇区大小: 在UNIX中, 块的大小是 4KB</p>
<p>当用户说: 给我2-12字节空间时会发生什么?</p>
<p>获取字节所在的快</p>
<p>返回快内对应部分</p>
<p>如果要写2-12字节?</p>
<p>获取块</p>
<p>修改块内对应部分</p>
<p>写回块</p>
<p>在文件系统中的所有操作都是在整个块空间上进行的: <code>getc()</code> <code>putc()</code> 即使每次只访问1字节的数据,也会缓存目标数据4096字节(一个磁盘块)</p>
<p>用户怎么访问文件: 在系统层面需要知道用户的访问模式</p>
<p>顺序访问: 按字节依次读取(几乎所有的访问都是这种方式)</p>
<p>随机访问: 从中间读写(不常用,但是仍然重要,如: 虚拟内存支持文件,内存页存储在文件中;更加快速,不希望获取文件中间的内容的时候也必须先获取块内所有字节)</p>
<p>内容访问: 通过特征</p>
<p>文件内部结构:</p>
<p>无结构: 单词,比特的队列</p>
<p>简单记录结构: 列,固定长度,可变长度</p>
<p>复杂结构: 格式化的文档(word, PDF), 可执行文件, …</p>
<p>多用户系统中的文件共享是很必要的</p>
<p>访问控制:</p>
<p>谁能够获得哪些文件的哪些访问权限</p>
<p>访问模式: 读,写,执行,删除,列举等</p>
<p>文件访问控制列表(ACL):</p>
<p>&lt;文件实体, 权限&gt;</p>
<p>UNIX模式:</p>
<p>&lt;用户|组|所有人,读|写|可执行&gt;</p>
<p>用户ID识别用户,表明每个用户所允许的权限及保护模式</p>
<p>组ID允许用户组成组,并指定了组访问权限</p>
<p>指定多用户,客户如何同时访问共享文件:</p>
<p>和过程同步算法相似</p>
<p>因磁盘IO和网络延迟而设计简单</p>
<p>UNIX文件系统(UFS)语义:</p>
<p>对打开文件的写入内容立即对其他打开同一文件的其他用户可见</p>
<p>共享文件指针允许多用户同时读取和写入文件</p>
<p>会话语义:</p>
<p>写入内容只有当文件关闭时可见</p>
<p>锁:</p>
<p>一些操作系统和文件系统提供该功能</p>
<h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><p>文件以目录的方式组织起来</p>
<p>目录是一类特殊的文件: 每个目录都包含了一张表&lt;name, pointer to file header&gt;</p>
<p>目录和文件的树形结构: 早期的文件系统是扁平的(只有一层目录)</p>
<p>层次名称空间: /spell/mail/prt/first  /programs/p/list</p>
<p>典型操作:</p>
<p>搜索文件</p>
<p>创建文件</p>
<p>删除文件</p>
<p>枚举目录</p>
<p>重命名文件</p>
<p>在文件系统中遍历一个路径</p>
<p>操作系统应该只允许内核模式修改目录: 确保映射的完整性,应用程序能够读目录(ls)</p>
<p>文件名的线性列表,包含了指向数据块的指针: 编程简单,执行耗时</p>
<p>Hash表 - hash数据结构的线性表: 减少目录搜索时间,碰撞,固定大小</p>
<p>名字解析: 逻辑名字转换成物理资源(如文件)的过程:</p>
<p>在文件系统中: 到实际文件的文件名(路径)</p>
<p>遍历文件目录直到找到目标文件</p>
<p>举例: 解析”/bin/ls”:</p>
<p>读取root的文件头(在磁盘固定位置)</p>
<p>读取root的数据块: 搜索bin项</p>
<p>读取bin的文件头</p>
<p>读取bin的数据块: 搜索ls项</p>
<p>读取ls的文件头</p>
<p>当前工作目录:</p>
<p>每个进程都会指向一个文件目录用于解析文件名</p>
<p>允许用户指定相对路径来代替绝对路径</p>
<p>一个文件系统需要先挂载才能被访问</p>
<p>一个未挂载的文件系统被挂载在挂载点上</p>
<h3 id="文件别名"><a href="#文件别名" class="headerlink" title="文件别名"></a>文件别名</h3><p>两个或多个文件名关联同一个文件:</p>
<p>硬链接: 多个文件项指向一个文件</p>
<p>软链接: 以快捷方式指向其他文件</p>
<p>通过存储真实文件的逻辑名称来实现</p>
<p>如果删除一个有别名的文件会如何呢? : 这个别名将成为一个悬空指针</p>
<p>Backpointers 方案:</p>
<p>每个文件有一个包含多个backpointers的列表,所以删除所有的Backpointers</p>
<p>backpointers使用菊花链管理</p>
<p>添加一个间接层: 目录项数据结构</p>
<p>链接: 已存在文件的另外一个名字(指针)</p>
<p>链接处理: 跟随指针来定位文件</p>
<p>我们如何保证没有循环呢?</p>
<p>只允许到文件的链接, 不允许在子目录的链接</p>
<p>每增加一个新的链接都用循环检测算法确定是否合理</p>
<p>限制路径可遍历文件目录的数量</p>
<h3 id="文件系统种类"><a href="#文件系统种类" class="headerlink" title="文件系统种类"></a>文件系统种类</h3><p>磁盘文件系统: 文件存储在数据存储设备上,如磁盘; 例如: FAT,NTFS,ext2,3,ISO9660等</p>
<p>数据库文件系统: 文件根据其特征是可被寻址的; 例如: WinFS</p>
<p>日志文件系统: 记录文件系统的修改,事件; 例如: journaling file system</p>
<p>网络,分布式文件系统: 例如: NFS,SMB,AFS,GFS</p>
<p>特殊,虚拟文件系统</p>
<h2 id="虚拟文件系统"><a href="#虚拟文件系统" class="headerlink" title="虚拟文件系统"></a>虚拟文件系统</h2><p>分层结构:</p>
<p>顶层: 文件,文件系统API</p>
<p>上层: 虚拟(逻辑)文件系统 (将所有设备IO,网络IO全抽象成为文件,使得接口一致)</p>
<p>底层: 特定文件系统模块</p>
<p>目的: 对所有不同文件系统的抽象</p>
<p>功能:</p>
<p>提供相同的文件和文件系统接口</p>
<p>管理所有文件和文件系统关联的数据结构</p>
<p>高效查询例程,遍历文件系统</p>
<p>与特定文件系统模块的交互</p>
<p>数据结构:</p>
<p>卷[第四声]控制块(UNIX: “superblock”)</p>
<p>每个文件系统一个</p>
<p>文件系统详细信息</p>
<p>块,块大小,空余块,计数,指针等</p>
<p>文件控制块(UNIX: “vnode” or “inode”)</p>
<p>每个文件一个</p>
<p>文件详细信息</p>
<p>许可,拥有者,大小,数据库位置等</p>
<p>目录节点(Linux: “dentry”)</p>
<p>每个目录项一个(目录和文件)</p>
<p>将目录项数据结构及树形布局编码成树形数据结构</p>
<p>指向文件控制块,父节点,项目列表等</p>
<p>其中: 卷控制块(每个文件系统一个),文件控制块(每个文件一个),目录节点(每个目录项一个)</p>
<p>持续存储在二级存储中: 在分配在存储设备中的数据块中</p>
<p>当需要时加载进内存:</p>
<p>卷控制块: 当文件系统挂载时进入内存</p>
<p>文件控制块: 当文件被访问时进入内存</p>
<p>目录节点: 在遍历一个文件路径时进入内存</p>
<h2 id="数据块缓存"><a href="#数据块缓存" class="headerlink" title="数据块缓存"></a>数据块缓存</h2><p>数据块按需读入内存:</p>
<p>提供 <code>read()</code> 操作</p>
<p>预读: 预先读取后面的数据块</p>
<p>数据块使用后被缓存:</p>
<p>假设数据将会再次被使用</p>
<p>写操作可能被缓存和延迟写入</p>
<p>两种数据块缓存方式:</p>
<p>普通缓冲区缓存</p>
<p>页缓存: 同一缓存数据块和内存页</p>
<p>分页要求: 当需要一个页时才将其载入内存</p>
<p>支持存储: 一个页(在虚拟地址空间中)可以被映射到一个本地文件中(在二级存储中)</p>
<h2 id="打开文件的数据结构"><a href="#打开文件的数据结构" class="headerlink" title="打开文件的数据结构"></a>打开文件的数据结构</h2><p>打开文件描述:</p>
<p>每个被打开的文件一个</p>
<p>文件状态信息</p>
<p>目录项,当前文件指针,文件操作设置等</p>
<p>打开文件表:</p>
<p>一个进程一个</p>
<p>一个系统级的</p>
<p>每个卷控制块也会保存一个列表</p>
<p>所以如果有文件被打开将不能被卸载</p>
<p>一些操作系统和文件系统提供该功能</p>
<p>调节对文件的访问</p>
<p>强制和劝告:</p>
<p>强制 - 根据锁保持情况和需求拒绝访问</p>
<p>劝告 - 进程可以查找锁的状态来决定怎么做</p>
<h2 id="文件分配"><a href="#文件分配" class="headerlink" title="文件分配"></a>文件分配</h2><p>大多数文件都很小:</p>
<p>需要对小文件提供强力的支持</p>
<p>块空间不能太小</p>
<p>一些文件非常大:</p>
<p>必须支持大文件(64-bit 文件偏移)</p>
<p>大文件访问需要相当高效</p>
<p>如何为一个文件分配数据块</p>
<p>分配方式:</p>
<p>连续分配</p>
<p>链式分配</p>
<p>索引分配</p>
<p>指标:</p>
<p>高效: 如存储利用(外部碎片)</p>
<p>表现: 如访问速度</p>
<p>连续分配:</p>
<p>文件头指定起始块和长度</p>
<p>位置,分配策略: 最先匹配,最佳匹配,…</p>
<p>优势: 文件读取表现好;高效的顺序和随机访问</p>
<p>劣势: 碎片;文件增长问题</p>
<p>链式分配:</p>
<p>文件以数据块链表方式存储</p>
<p>文件头包含了到第一块和最后一块的指针</p>
<p>优势: 创建,增大,缩小很容易;没有碎片</p>
<p>劣势: 不可能进行真正的随机访问;可靠性</p>
<p>索引分配:</p>
<p>为每个文件创建一个名为索引数据块的非数据数据块(到文件数据块的指针列表)</p>
<p>文件头包含了索引数据块</p>
<p>优势: 创建,增大,缩小很容易;没有碎片;支持直接访问</p>
<p>劣势: 当文件很小时,存储索引的开销大;处理大文件难</p>
<h2 id="空闲空间列表"><a href="#空闲空间列表" class="headerlink" title="空闲空间列表"></a>空闲空间列表</h2><p>跟踪在存储中的所有未分配的数据块</p>
<p>空闲空间列表存储在哪里?</p>
<p>空闲空间列表的最佳数据结构怎么样?</p>
<p>用位图代表空闲数据块列表: 11111101101110111 如果 i = 0表明数据块i是空闲的,反之是分配的</p>
<p>使用简单但是可能会是一个big vector:</p>
<p>160GB disk → 40M blocks → 5MB worth of bits</p>
<p>然而,如果空闲空间在磁盘中均匀分布,那么再找到”0”之前需要扫描 磁盘上数据块总数 / 空闲块的数目</p>
<p>需要保护:</p>
<p>指向空闲列表的指针</p>
<p>位图:</p>
<p>必须保存在磁盘上;在内存和磁盘拷贝可能有所不同;不允许block[i]在内存中的状态为bit[i]=1而在磁盘中bit[i]=0</p>
<p>解决:</p>
<p>在磁盘上设置bit[i] = 1; 分配block[i]; 在内存中设置bit[i] = 1</p>
<h2 id="多磁盘管理-RAID"><a href="#多磁盘管理-RAID" class="headerlink" title="多磁盘管理 - RAID"></a>多磁盘管理 - RAID</h2><p>通常磁盘通过分区来最大限度减小寻道时间:</p>
<p>一个分区是一个柱面的集合</p>
<p>每个分区都是逻辑上独立的磁盘</p>
<p>分区: 硬件磁盘的一种适合操作系统指定格式的划分</p>
<p>卷: 一个拥有一个文件系统实例的可访问的存储空间(通常常驻在磁盘的单个分区上)</p>
<p>使用多个并行磁盘来增加: 吞吐量(通过并行),可靠性和可用性(通过冗余)</p>
<p>RAID - 冗余磁盘阵列: 各种磁盘管理技术;RAID levels: 不同RAID分类,如RAID-0,RAID-1,RAID-5</p>
<p>实现: 在操作系统内核: 存储,卷管理; RAID硬件控制器(IO)</p>
<p>RAID-0</p>
<p>数据块分成多个子块, 存储在独立的磁盘中: 和内存交叉相似</p>
<p>通过更大的有效块大小来提供更大的磁盘带宽</p>
<p>RAID-1</p>
<p>可靠性成倍增长</p>
<p>读取性能线性增加(向两个磁盘写入,从任何一个读取)</p>
<p>RAID-4</p>
<p>数据块级磁带配有专用奇偶校验磁盘: 允许从任意一个故障磁盘中恢复</p>
<p>条带化和奇偶校验按byte-by-byte或者bit-by-bit: RAID-0,4,5: block-wise ;RAID-3: bit-wise</p>
<p>RAID-5</p>
<p>每个条带快有一个奇偶校验块,允许有一个磁盘错误</p>
<p>RAID-6</p>
<p>两个冗余块,有一种特殊的编码方式,允许两个磁盘错误</p>
<h2 id="磁盘调度"><a href="#磁盘调度" class="headerlink" title="磁盘调度"></a>磁盘调度</h2><p>读取或写入时,磁头必须被定位在期望的磁道,并从所期望的扇区开始</p>
<p>寻道时间: 定位到期望的磁道所花费的时间</p>
<p>旋转延迟: 从扇区的开始处到到达目的处花费的时间</p>
<p>平均旋转延迟时间 = 磁盘旋转一周时间的一半</p>
<p>寻道时间是性能上区别的原因</p>
<p>对单个磁盘,会有一个IO请求数目</p>
<p>如果请求是随机的,那么会表现很差</p>
<p>FIFO:</p>
<p>按顺序处理请求</p>
<p>公平对待所有进程</p>
<p>在有很多进程的情况下,接近随机调度的性能</p>
<p>最短服务优先:</p>
<p>选择从磁臂当前位置需要移动最少的IO请求</p>
<p>总是选择最短寻道时间</p>
<p>skan:</p>
<p>磁臂在一个方向上移动,满足所有为完成的请求,直到磁臂到达该方向上最后的磁道</p>
<p>调换方向</p>
<p>c-skan:</p>
<p>限制了仅在一个方向上扫描</p>
<p>当最后一个磁道也被访问过了后,磁臂返回到磁盘的另外一端再次进行扫描</p>
<p>c-loop(c-skan改进):</p>
<p>磁臂先到达该方向上最后一个请求处,然后立即反转</p>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>深入理解操作系统学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>C++11新语法新特性使用剖析</title>
    <url>/OXygenPanda.github.io/2020/11/03/C++/C++11/</url>
    <content><![CDATA[<h1 id="C-11"><a href="#C-11" class="headerlink" title="C++ 11"></a>C++ 11</h1><p align="center">
<a href="https://oxygenpanda.github.io/" target="_blank"><img alt="Website" src="https://img.shields.io/badge/博客-劳振煜的知識倉儲-faf2f2.svg?style=flat-square&logo=Blogger"></a>
<a href="https://www.github.com/OXygenPanda" target="_blank"><img src="https://img.shields.io/badge/Github-@劳振煜-f3e1e1.svg?style=flat-square&logo=GitHub"></a>
<a href="https://i.loli.net/2020/11/11/SBZ2mFJGKLjUtTO.jpg" target="_blank"><img src="https://img.shields.io/badge/微信-@OXygen-f1d1d1.svg?style=flat-square&logo=WeChat"></a>

<blockquote>
<p>  还记得自己在本科阶段学习的C++98的语法，那个时候觉得很有趣了。但是慢慢地接触到了C++11之后的新增语法，打开了新世界的大门，许多实现有了更有禅意/哲学的方法。</p>
</blockquote>
</p><p>本文参考了侯捷老师 C++2.0 的课程以及CSDN上众多的博客，总结了C++11以来，新增的一些语法，比如：variadic templates、alias templates、uniform initialization等，新增的一些关键词，比如：explicit、override、final、decltype等。我认为，C++11以来新增的语法是C++发展中的新鲜血液，在STL的源码学习过程中，也看到了许多C++11以来的新语法，新关键词。所以说，学习C++11是十分有必要且有趣的。</p>
<h2 id="C-版本发展"><a href="#C-版本发展" class="headerlink" title="C++版本发展"></a>C++版本发展</h2><table>
<thead>
<tr>
<th>名称</th>
<th>版本</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>C++ 98</td>
<td>1.0</td>
<td></td>
</tr>
<tr>
<td>C++ 03</td>
<td>TR1</td>
<td>technicasl report 1</td>
</tr>
<tr>
<td>C++ 11…</td>
<td>2.0</td>
<td></td>
</tr>
</tbody></table>
<a id="more"></a>

<h1 id="新语法"><a href="#新语法" class="headerlink" title="新语法"></a>新语法</h1><p>新语法包括但不限于以下介绍的：variadic templates(可变参数模板)、move(搬移)、range-base for loop(简写循环)、initializer list(新容器)、lambda(表达式)、type_traits(类型萃取器)、unordered_set/map(hashtable)、forward_list(单向链表)、tuple(元组)、con-currency、RegEx…</p>
<h2 id="variadic-templates"><a href="#variadic-templates" class="headerlink" title="variadic templates"></a>variadic templates</h2><h2 id="nullptr"><a href="#nullptr" class="headerlink" title="nullptr"></a>nullptr</h2><p><code>nullptr</code> 是C++11后安全的指针空值常量，是一个类型为 <code>std::nullptr_t</code> 的对象。</p>
<p>在C语言中，我们常用<code>NULL</code>来表示指针为空。那我们可以先看一下在C语言和在C++中 <code>NULL</code> 的定义。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//C</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NULL ((void*)0)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//C++</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> NULL</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> _cplusplus</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NULL 0          <span class="comment">//可以看到,在C++中NULL就是0</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NULL ((void*)0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>

<p>如果沿用C语言中 <code>NULL</code> 的定义，在C++中有函数重载的机制，会出现二义性的问题，如下。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//二义性实例</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> NULL</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NULL ((void*)0)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">char</span>* cp)</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    func(<span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以得到二义性的报错，因为 <code>NULL</code> 的 <code>((void*)0)</code> 既可以被 <code>5:</code> 接收，也可以被 <code>6:</code> 接收。</p>
<p>为避免二义性的错误，C++不支持<code>void*</code>转换为其他指针类型。因此有了 <code>nullptr</code>，定义在 <code>&lt;cstddef&gt; </code> 中的一个新类型 <code>std::nullptr_t</code>，可以隐式转换为任意指针类型，是一个”指针空值常量”。</p>
<p><strong><code>nullptr</code>的安全性</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//安全性示例</span></span><br><span class="line"><span class="keyword">int</span> n1 = <span class="literal">nullptr</span>;</span><br><span class="line"><span class="keyword">int</span> n2 = (<span class="keyword">int</span>)<span class="literal">nullptr</span>;</span><br><span class="line"><span class="keyword">int</span> n3 = <span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">int</span>&gt;(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="comment">//以上三行均报错</span></span><br></pre></td></tr></table></figure>

<p>可以看到此时，<code>nullptr</code> 无法隐式显式强制类型转换为其他非指针类型。</p>
<h2 id="POD-type-default-amp-delete"><a href="#POD-type-default-amp-delete" class="headerlink" title="POD type / =default &amp; =delete"></a>POD type / =default &amp; =delete</h2><p>首先来了解一下 POD 类型。</p>
<p>POD( plain old data)：能够使用C标准库中的<code>memcpy()</code>函数操作的数据类型和结构体就是POD类型。可以通过<type_traits>中的 <code>is_pod&lt;T&gt;::value</code> 来判定。</type_traits></p>
<p>C++相比C语言多了虚函数，继承，访问权限等机制，往往定义的类不是POD类型，无法使用<code>memcpy()</code>。那么成为 POD 类型有以下两个要求：</p>
<ol>
<li><p>该类型必须是平凡的普通的 (平凡 : trival : <code>&lt;type_traits&gt;</code> 中常见的一个词了)</p>
<ul>
<li><p>不自己定义构造函数，析构函数，拷贝构造函数，拷贝赋值函数，搬移构造函数和搬移赋值函数，而是由编译器默认生成，那么就是平凡的。</p>
</li>
<li><p>或者，在自己定义了构造函数(以上只有构造函数可以重载)后，再增加一行<code>ClassName() = default;</code>也可以算得上是平凡的。</p>
</li>
<li><p>不能够有虚函数或者继承虚基类。（不能携带虚表指针）</p>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">base</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    base(<span class="keyword">int</span> a)&#123;&#125;;</span><br><span class="line">    base() = <span class="keyword">default</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//is_pod(base)::value == true_type()</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>像C标准布局一样，布局有序</p>
<ul>
<li>非静态成员变量的访问权限必须相同。</li>
<li>如果继承了父类，那么第一个成员变量必须是自己类的。</li>
<li>如果继承了父类，那么成员得集中在一个类中。</li>
</ul>
</li>
</ol>
<p>如果满足了以上两点，可以使用 <code>memcpy()</code> 函数。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//POD类型进行memcpy()示例</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    <span class="keyword">int</span> b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    A a1;</span><br><span class="line">    a1.a = <span class="number">10</span>;</span><br><span class="line">    a1.b = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">char</span>* p = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="keyword">sizeof</span>(a1)];</span><br><span class="line">    <span class="built_in">memcpy</span>(p,&amp;a1,<span class="keyword">sizeof</span>(a1));</span><br><span class="line">    A* a2 = <span class="keyword">reinterpret_cast</span>&lt;A*&gt;(p);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; a2-&gt;a &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; a2-&gt;b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>=default</code> : 可以指定需要编译器自动生成 <strong>big five</strong> 的函数。可以在重载其他构造函数的情况下，仍然使得类可能成为 POD 类型。</p>
<p><code>=delete</code> : 对于不希望使用的构造函数，析构函数，拷贝构造函数，拷贝赋值函数，搬移构造函数和搬移赋值函数，曾经的做法是定义在 private 域中并不给予实现使得无法调用。而现在可以写在 public 域中并在最后写上 <code>=delete</code> 意为不能使用。用户函数可以 <code>=delete</code> 而不可以使用 <code>=default</code>。</p>
<h2 id="Rvalue-references-amp-Move-Semantics-Perfect-Forwarding"><a href="#Rvalue-references-amp-Move-Semantics-Perfect-Forwarding" class="headerlink" title="Rvalue references &amp; Move Semantics / Perfect Forwarding"></a>Rvalue references &amp; Move Semantics / Perfect Forwarding</h2><p><strong>move</strong>是一个C++11后的重要话题，它极大地节约了原本<strong>copy</strong>时，析构以及拷贝构造的时间成本。</p>
<p>要聊<strong>move</strong>首先得了解一下<strong>左值</strong>和<strong>右值</strong>的概念，以及<strong>左值引用</strong>和<strong>右值引用</strong>的区别。</p>
<p><strong>左值</strong> : 在堆区栈区常量区(.bss / .data)中有内存分配的变量/对象。特点 : 可以放在 <code>operator=</code> 左侧。</p>
<p><strong>右值</strong> : 不能够取地址或者是消亡值。如：运算式，除字符串以外的字面值，临时变量/对象，返回 <code>void</code> 的函数调用。</p>
<p>​    <strong>消亡值</strong> : 即将销毁的变量/对象。</p>
<p><strong>左值引用</strong> : 引用本质上是取别名，使用引用语法，编译器会为引用动作进行一定的翻译以及在使用时会自动解引用。引用对象如果是一个左值，那么<code>T &amp;ref = val;</code>引用等效于<code>T * const ref = val;</code> ，如果引用对象是一个右值，那么需要在引用前加一个<code>const</code>修饰,如:<code>const T &amp;ref = 16</code>。</p>
<p><strong>右值引用</strong> : 通过”盗取”右值资源而不需要分配额外的资源，获得控制权。在确保之后不再使用该右值，可以避免内存空间的释放和分配，延迟变量名的生命周期，常用来完成移动构造 <em>(move constructor)</em> 和移动赋值 <em>(move assignment)</em> 的特殊任务。</p>
<p><code>std::move()</code> : 可以把左值转换为右值，但是前提是程序员要确保后续不再使用传递的左值。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//std::move() 示例</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec&#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">9</span>&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; target = <span class="built_in">std</span>::move(vec); <span class="comment">//省去了元素的拷贝,虽然int类型是微不足道的,但是如果是特别大的对象的话,很值得</span></span><br></pre></td></tr></table></figure>

<p><strong>搬移机制</strong></p>
<p>如果把右值传递给需要<code>move_ctor</code> 或 <code>move_assign</code> 的时候，会触发搬移机制，首先指针浅拷贝，再断开右值的指针控制。</p>
<p>如果把左值传递给需要<code>move_ctor</code> 或 <code>move_assign</code> 的时候，可以使用 <code>std::move()</code> 可以把左值转换成右值。</p>
<p><strong>万能引用</strong></p>
<img src="https://i.loli.net/2020/11/09/pmqxAMhSB3CE6DR.png" style="zoom: 33%;">

<p>在模板编程的时候，有时候并不知道传进来的是左值还是右值，因此引入了万能引用和引用折叠的概念。万能引用：在类型推导中 <code>&amp;&amp;</code> 符号可以接收左值也可以接收右值。</p>
<p><strong>引用折叠</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引用折叠示例</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(T&amp;)</span></span>&#123;&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(T&amp;&amp;)</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<p>当传入的 <code>T</code> 类型本身就是一个左值引用或者右值引用类型时，形式参数类型会出现<code>T&amp; &amp;</code> <code>T&amp; &amp;&amp;</code> <code>T&amp;&amp; &amp;</code> <code>T&amp;&amp; &amp;&amp;</code></p>
<p>其中，<code>T&amp;&amp; &amp;&amp;</code> 会被解析成为 <code>T &amp;&amp;</code></p>
<p>其余，被解析成为 <code>T &amp;</code></p>
<p><strong>不完美转发</strong></p>
<p>使用函数传递右值时，最终调用端接收到的是左值。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//不完美转发 示例</span></span><br><span class="line"><span class="comment">//重载的分别接收左值和右值的函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">process</span><span class="params">(<span class="keyword">int</span> &amp; i)</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;&amp;&quot;</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">process</span><span class="params">(<span class="keyword">int</span>&amp;&amp; i)</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;&amp;&amp;&quot;</span>&lt;&lt; <span class="built_in">endl</span>; &#125;</span><br><span class="line"><span class="comment">//转发函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">forward</span><span class="params">(<span class="keyword">int</span>&amp;&amp; i)</span></span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;forward &amp;&amp;&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		process(i);  <span class="comment">//此处期望调用的是process(int&amp;&amp;),但是实际上调用的是process(int&amp;)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>完美转发</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//完美转发设计形式</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T1, <span class="keyword">typename</span> T2&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">functionA</span><span class="params">(T1&amp;&amp; t1, T2&amp;&amp; t2)</span></span>&#123;</span><br><span class="line">		functionB(<span class="built_in">std</span>::forward&lt;T1&gt;(t1),</span><br><span class="line">						  <span class="built_in">std</span>::forward&lt;T2&gt;(t2));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//完美转发 forward&lt;T&gt;() 的源码</span></span><br><span class="line"><span class="comment">// GCC/4.9.2/.../move.h</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> _Tp&gt;</span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> _Tp&amp;&amp; <span class="title">forward</span><span class="params">(<span class="keyword">typename</span> <span class="built_in">std</span>::remove_reference&lt;_Tp&gt;::type&amp; <span class="keyword">__t</span>)</span> <span class="keyword">noexcept</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">static_cast</span>&lt;_Tp&amp;&amp;&gt;(<span class="keyword">__t</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> _Tp&gt;</span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> _Tp&amp;&amp; <span class="title">forward</span><span class="params">(<span class="keyword">typename</span> <span class="built_in">std</span>::remove_reference&lt;_Tp&gt;::type&amp;&amp; <span class="keyword">__t</span>)</span> <span class="keyword">noexcept</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">		<span class="comment">//编译期断言</span></span><br><span class="line">		<span class="keyword">static_assert</span>(!<span class="built_in">std</span>::is_lvalue_reference&lt;_Tp&gt;::value,<span class="string">&quot;template argument&quot;</span> <span class="string">&quot; substituting _Tp is an lvalue reference type&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">static_cast</span>&lt;_Tp&amp;&amp;&gt;(<span class="keyword">__t</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//std::move()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> _Tp&gt;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="keyword">typename</span> <span class="built_in">std</span>::remove_reference&lt;_Tp&gt;::type&amp;&amp;</span><br><span class="line">move(_Tp&amp;&amp; <span class="keyword">__t</span>) <span class="keyword">noexcept</span></span><br><span class="line">&#123;    <span class="keyword">return</span> <span class="keyword">static_cast</span>&lt;<span class="keyword">typename</span> <span class="built_in">std</span>::remove_reference&lt;_Tp&gt;::type&amp;&amp;&gt;(<span class="keyword">__t</span>);   &#125;</span><br></pre></td></tr></table></figure>

<h2 id="range-based-for-statement"><a href="#range-based-for-statement" class="headerlink" title="range-based for statement"></a>range-based for statement</h2><p>语法用法如下。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//语法</span></span><br><span class="line"><span class="keyword">for</span>(decl : coll)&#123;</span><br><span class="line">    statement</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">编译器翻译-&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> _pos = coll.begin(), _end = coll.end(); _pos != _end; ++_pos)&#123;</span><br><span class="line">    decl = *_pos;</span><br><span class="line">    statement</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//用法</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i : &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>&#125;)</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">double</span>&gt; vec</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> &amp; elem : vec) <span class="comment">//使用引用传递可以修改元素</span></span><br><span class="line">    elem *= <span class="number">3</span>;</span><br></pre></td></tr></table></figure>

<h2 id="thread-线程库"><a href="#thread-线程库" class="headerlink" title="thread 线程库"></a>thread 线程库</h2><h2 id="智能指针"><a href="#智能指针" class="headerlink" title="智能指针"></a>智能指针</h2><h2 id="pragma-once"><a href="#pragma-once" class="headerlink" title="pragma once"></a>pragma once</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br></pre></td></tr></table></figure>

<p>确保头文件只会被包含一次。</p>
<h2 id="extern-“C”"><a href="#extern-“C”" class="headerlink" title="extern “C”"></a>extern “C”</h2><p>在C++的代码中运行C语言的代码</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> &#123;  <span class="comment">//抑制C++对函数名、变量名等符号进行名称重整，因此编译出的C目标文件和C++目标文件中的变量名和函数名都一样的。</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>

<h2 id="类初始化列表"><a href="#类初始化列表" class="headerlink" title="类初始化列表"></a>类初始化列表</h2><h2 id="常量表达式"><a href="#常量表达式" class="headerlink" title="常量表达式"></a>常量表达式</h2><h2 id="enum-class"><a href="#enum-class" class="headerlink" title="enum class"></a>enum class</h2><h2 id="tuple"><a href="#tuple" class="headerlink" title="tuple"></a>tuple</h2><h2 id="uniform-initialization-initializer-lists"><a href="#uniform-initialization-initializer-lists" class="headerlink" title="uniform initialization / initializer_lists"></a>uniform initialization / initializer_lists</h2><p>C++11前的初始化方式众多，容易记混且不美观不一致。C++11后有统一的推荐的初始化方式。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// C++11 前的初始化语法</span></span><br><span class="line">Rect r1 = &#123;<span class="number">3</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">20</span>,&amp;area,&amp;print);</span><br><span class="line"><span class="function">Rect <span class="title">r1</span><span class="params">(<span class="number">3</span>,<span class="number">7</span>,<span class="number">20</span>,<span class="number">25</span>)</span></span>;</span><br><span class="line"><span class="keyword">int</span> ia[<span class="number">6</span>] = &#123;<span class="number">27</span>,<span class="number">210</span>,<span class="number">12</span>,<span class="number">47</span>,<span class="number">10</span>,<span class="number">83</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// C++11 后的初始化语法</span></span><br><span class="line"><span class="keyword">int</span> values[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;;  <span class="comment">// vector 包含了一个 initializer_list&lt;value_type&gt; 的构造函数</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; cities&#123;<span class="string">&quot;berlin&quot;</span>,<span class="string">&quot;london&quot;</span>,<span class="string">&quot;new york&quot;</span>&#125;;</span><br><span class="line"><span class="comment">//编译器把&#123;t1,t2,...,tn&#125;制作成一个 initializer_list&lt;T&gt; 关联一个 array&lt;T,n&gt; 会调用构造函数</span></span><br></pre></td></tr></table></figure>

<p><code>&#123;&#125;</code> 创建了一个<code>initializer_lists</code>的容器。</p>
<p>接下来介绍 <code>initializer_lists</code>容器的用法和源码。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//用法</span></span><br><span class="line"><span class="comment">//用于赋初值</span></span><br><span class="line"><span class="keyword">int</span> i;    <span class="comment">//未知</span></span><br><span class="line"><span class="keyword">int</span> j&#123;&#125;;  <span class="comment">//j == 0</span></span><br><span class="line"><span class="keyword">int</span> *p;   <span class="comment">//未知</span></span><br><span class="line"><span class="keyword">int</span> *q&#123;&#125;; <span class="comment">//q == nullptr</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//initializer_lists 不能类型转换,更加安全</span></span><br><span class="line">int x1(5.3), x2 = 5.3; //传统的方式会把double隐式类型转换为int</span><br><span class="line"><span class="keyword">int</span> x3&#123;<span class="number">5.0</span>&#125;,x4&#123;<span class="number">5.3</span>&#125;;   <span class="comment">//取决于编译器</span></span><br><span class="line"><span class="keyword">char</span> c1&#123;<span class="number">7</span>&#125;; <span class="comment">//正确</span></span><br><span class="line"><span class="keyword">char</span> c2&#123;<span class="number">999999</span>&#125;; <span class="comment">//错误</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v1&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;; <span class="comment">//正确</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v2&#123;<span class="number">1</span>,<span class="number">2.0</span>,<span class="number">3.0</span>,<span class="number">4</span>&#125;; <span class="comment">//错误</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//函数显式接收 initializer_lists 类型</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">initializer_list</span>&lt;<span class="keyword">int</span>&gt; vals)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> p = vals.begin();p!=vals.end();++p)</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt; *p &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">print(&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//利用临时对象筛选</span></span><br><span class="line">max(&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;);</span><br><span class="line">min(&#123;<span class="built_in">string</span>(<span class="string">&quot;Ace&quot;</span>),<span class="built_in">string</span>(<span class="string">&quot;Bob&quot;</span>),<span class="built_in">string</span>(<span class="string">&quot;Coc&quot;</span>)&#125;);</span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//源码</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> _<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">initializer_list</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">		<span class="keyword">typedef</span> _E value_type;</span><br><span class="line">		...</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">		iterator    _M_array; <span class="comment">//只管理指针,拷贝时是浅拷贝</span></span><br><span class="line">		size_type   _M_len;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//The compiler can call this constructfunction</span></span><br><span class="line">		<span class="function"><span class="keyword">constexpr</span> <span class="title">initializer_list</span><span class="params">(<span class="keyword">const</span> iterator _a, size_type _l)</span>:</span></span><br><span class="line">		_M_array(_a),_M_len(_l) &#123;&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">		<span class="comment">//其他构造函数</span></span><br></pre></td></tr></table></figure>

<h2 id="lambda"><a href="#lambda" class="headerlink" title="lambda"></a>lambda</h2><blockquote>
<p>  lambda 是希腊符号之一，第一次是在python中听到这个词，后在java中也接触到。现在来讲讲C++11/13中的lambda语法。</p>
</blockquote>
<p>lambda 在C++中是一种匿名函数。我们通常来说，使用一个函数是为了提高代码的可复用性以及可读性，我们会在主函数外或者源文件外定义函数，最终通过链接生成可执行文件。那么对于一些我们只需要用到个别次数的代码，我们不需要为它命名并且写成函数的形式，我们只需要写一个 lambda 表达式即可。</p>
<p>lambda 属于函数式编程范式的范畴。</p>
<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">[capture <span class="built_in">list</span>](parameters) <span class="keyword">mutable</span> -&gt; <span class="keyword">return</span> type &#123; statement &#125;</span><br></pre></td></tr></table></figure>

<p><strong>[capture list] :</strong> 捕获列表</p>
<ul>
<li><p>[var]    : 值传递的方式捕获 <code>var</code></p>
</li>
<li><p>[=]       : 值传递的方式捕获所有变量 </p>
</li>
<li><p>[&amp;var] : 引用传递的方式捕获<code>var</code></p>
</li>
<li><p>[&amp;]       : 引用传递的方式捕获所有变量</p>
</li>
<li><p>[this]    : 值传递的方式捕获<code>this</code></p>
</li>
</ul>
<p><strong>(parameters)</strong> : 参数传递列表，可以省略</p>
<p><strong>mutable</strong> : 修饰符，取现 lambda 的常量性，但是必须携带参数传递列表，可以省略 (mutable 允许可以变化, 不加的话, 语句块中无法修改变量)</p>
<ul>
<li><p>[id] () mutable {} : 允许修改 id</p>
</li>
<li><p>[&amp;id] () {} : 允许修改 id</p>
</li>
<li><p>[id] () {} : 不允许修改 id</p>
</li>
</ul>
<p><strong>-&gt;return type</strong> : 返回值类型，不需要返回或者返回值类型明确时可以省略</p>
<p><strong>{ statement }</strong> : lambda 语句块</p>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//示例1</span></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">1</span>, b =<span class="number">2</span>, c = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">auto</span> func = [=,&amp;b](<span class="keyword">int</span> d) -&gt; <span class="keyword">decltype</span>(a+b+c+d)&#123;</span><br><span class="line">    <span class="keyword">return</span> a+b+c+d;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; func(<span class="number">4</span>) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 说明</span></span><br><span class="line"><span class="comment">** 以引用方式捕获变量 b, 使得 b 可以在语句块中被修改, 以值方式捕获变量 a,c 不可以在语句块中修改</span></span><br><span class="line"><span class="comment">** 参数列表需要传入一个int类型变量</span></span><br><span class="line"><span class="comment">** decltype() 做类型推导</span></span><br><span class="line"><span class="comment">** func 是 lambda 表达式的名称 可以以 6: 方式调用</span></span><br><span class="line"><span class="comment">** auto lambda 表达式的返回类型相当复杂,使用auto自动推导较为合适</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//示例2</span></span><br><span class="line">[]&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;success&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;(); <span class="comment">//创建了一个lambda的临时对象</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> L = []&#123;<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;success&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;&#125;;</span><br><span class="line">L(); <span class="comment">//lambda 表达式调用形式</span></span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//示例3</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>&#125;;</span><br><span class="line">sort(vec.begin(),vec.end(),[](<span class="keyword">int</span> a,<span class="keyword">int</span> b)-&gt;<span class="keyword">bool</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a&gt;b;</span><br><span class="line">&#125;); <span class="comment">//第三个参数需要一个bool的函数对象,可以是自定义函数也可以是仿函数也可以是lambda表达式</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span> &amp;elem : vec) &#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; elem &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125; <span class="comment">//倒序输出vec的值</span></span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//注意事项</span></span><br><span class="line"><span class="keyword">int</span> id = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">auto</span> f = [id]()&#123;&#125;; <span class="comment">//此处捕获到的是0,即使后续变化也不会受影响</span></span><br><span class="line"><span class="keyword">auto</span> g = [&amp;id]()&#123;&#125;;<span class="comment">//此处捕获到的是0,但是后续id的变化会引起此处的变化</span></span><br><span class="line">id = <span class="number">42</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//lambda表达式需要编译器进行&quot;翻译&quot;</span></span><br><span class="line"><span class="comment">//类似翻译情况如下</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> f = [id]() <span class="keyword">mutable</span> &#123; <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;id:&quot;</span> &lt;&lt; id &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>; ++id; &#125;;</span><br><span class="line"></span><br><span class="line">-&gt;</span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Functor</span>&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> id;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Functor(<span class="keyword">int</span> id):id(id)&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operator</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;id:&quot;</span> &lt;&lt; id &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        ++id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Functor f;</span><br></pre></td></tr></table></figure>

<h1 id="新关键词"><a href="#新关键词" class="headerlink" title="新关键词"></a>新关键词</h1><p>新关键词包括但不限于以下介绍的：using、auto、explicit、noexcept、override、final、decltype…</p>
<h2 id="using-Alias-Template-Type-Alias"><a href="#using-Alias-Template-Type-Alias" class="headerlink" title="using / Alias Template / Type Alias"></a>using / Alias Template / Type Alias</h2><p><strong>using</strong> 关键字并不是C++11以后才出现的，但是在C++11以后赋予了新的语法。</p>
<h3 id="namespace"><a href="#namespace" class="headerlink" title="namespace"></a>namespace</h3><ul>
<li><p>using-指示 : <code>using namespace std;</code></p>
<p>引入整个命名空间</p>
<blockquote>
<p>  会引发命名污染，使得较小作用域中定义的同名函数、变量会覆盖命名空间中的函数和变量。在较大的作用域中应当使用 using-声明</p>
</blockquote>
</li>
<li><p>using-声明 : <code>using std::cout, std::endl;</code></p>
<p>引入命名空间中的指定变量、对象、函数</p>
</li>
</ul>
<h3 id="class-members"><a href="#class-members" class="headerlink" title="class members"></a>class members</h3><p>using-声明</p>
<p>在类中声明基类的对象或方法后，可以省略基类作用域。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用using关键字对类成员变量成员函数的声明</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">base</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">based</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">derived</span> :</span> <span class="keyword">public</span> base&#123;</span><br><span class="line">    <span class="keyword">using</span> base::based;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span>&#123; based(); &#125;<span class="comment">// 不需要写成 base::based()</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="Alias-Template"><a href="#Alias-Template" class="headerlink" title="Alias Template"></a>Alias Template</h3><p>Alias 熟悉配置 linux / Mac OS 系统环境的小伙伴都知道，是化名的意思。这是C++11新增的语法，能够提前绑定模板参数。用法如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用using关键字对类模板进行运行时绑定参数</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">using</span> MapString = <span class="built_in">map</span>&lt;T,<span class="keyword">char</span>*&gt;;</span><br><span class="line"></span><br><span class="line">MapString&lt;<span class="keyword">int</span>&gt; numberString; <span class="comment">//解析成 map&lt;int,char*&gt; numberString：</span></span><br></pre></td></tr></table></figure>

<p>从以上代码可以看到，<code>2:</code>提前绑定了<code>map</code>容器的第二参数，此后模板参数只剩下一个了，在定义对象时只需要指定第一模板参数即可。有一种&lt;运行时&gt;偏特化的感觉。侯捷老师提供了一个案例，是对使用 alias template 的较好诠释。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//侯捷老师的例子</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span>&gt; <span class="title">class</span> <span class="title">Container</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">XCLs</span>&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">		Container&lt;T&gt; c;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">		XCLs()&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">XCLs&lt;<span class="keyword">int</span>,<span class="built_in">vector</span>&gt; xcls;   <span class="comment">//报错,因为vector容器实际上需要两个参数,这样传入只能确认一个参数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;T&gt;</span><br><span class="line"><span class="keyword">using</span> vec = <span class="built_in">vector</span>&lt;T,allocator&lt;T&gt;&gt;;</span><br><span class="line">XCLs&lt;<span class="keyword">int</span>,vec&gt; xcls; <span class="comment">//正确,提前绑定第二参数</span></span><br></pre></td></tr></table></figure>

<p>因为 vector 模板类本身有两个模板参数 : <code>_Tp</code> 和 <code>alloc</code>，而 <code>alloc</code> 是有默认参数的。所以，平时使用时，我们往往缺省第二参数只指定第一个模板参数类型。而 <code>5:Container&lt;T&gt; c</code> 只指定了第一参数，因此在 <code>2:</code> 传入 <code>Container</code> 时就提前确定第二参数，因此有了 <code>13:</code> <code>Alias Template</code> 的操作。</p>
<h3 id="Type-Alias"><a href="#Type-Alias" class="headerlink" title="Type Alias"></a>Type Alias</h3><p>类似于 <code>typedef</code> 的语法。（结果看来和 <code>typedef</code> 一样）</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//using关键字定义新类型名</span></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span><span class="params">(*func1)</span><span class="params">(<span class="keyword">int</span>,<span class="keyword">int</span>)</span></span>; <span class="comment">//func1 绑定为 void x(int,int) 型函数指针</span></span><br><span class="line"><span class="keyword">using</span> func2 = <span class="keyword">void</span>(*)(<span class="keyword">int</span>,<span class="keyword">int</span>); <span class="comment">//结果同 1:</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//演示1</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">example</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</span><br><span class="line">func1 fn1 = example;</span><br><span class="line">func2 fn2 = example;</span><br><span class="line"></span><br><span class="line"><span class="comment">//演示2</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">vector</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">using</span> ValueType = T;</span><br><span class="line">    <span class="keyword">using</span> reference = T&amp;;</span><br><span class="line">    <span class="keyword">using</span> iterator  = T*;</span><br><span class="line">    <span class="keyword">using</span> pointer   = T*;  <span class="comment">//vector中的实现还是typedef</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="auto"><a href="#auto" class="headerlink" title="auto"></a>auto</h2><h2 id="explicit"><a href="#explicit" class="headerlink" title="explicit"></a>explicit</h2><p>常用于修饰构造函数，使得构造函数不支持其他变量隐式类型转换成该类型对象（禁止隐式类型转换）</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">base</span>&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    <span class="keyword">int</span> b;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    base(<span class="keyword">int</span> a,<span class="keyword">int</span> b = <span class="number">0</span>)&#123;&#125;   <span class="comment">// non-explicit one-argument ctor		</span></span><br><span class="line">    base&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> base&amp; ref)&#123;</span><br><span class="line">		<span class="keyword">this</span>-&gt;a = ref.a;</span><br><span class="line">        <span class="keyword">this</span>-&gt;b = ref.b;</span><br><span class="line">    &#125;</span><br><span class="line">    base <span class="keyword">operator</span>+(<span class="keyword">const</span> base&amp; ref)&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;a += ref.a;</span><br><span class="line">        <span class="keyword">this</span>-&gt;b += ref.b;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    base obj1(1,0),obj2(2,0);</span><br><span class="line">    obj2 = obj1 + <span class="number">5</span>; </span><br><span class="line">    <span class="comment">//如果6:不使用 explicit 修饰,首先看到了重载了operator+接收本类型. 此处 5 转换成为 base 类的临时对象 (5,0) 和 obj1 相加</span></span><br><span class="line">    <span class="comment">//如果6:使用 explicit 修饰,不允许隐式类型转换,找不到operator+接收数值类型类别的重载,因此报错</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>C++11前，只支持 one-argument</p>
<p>C++11后，支持 multi-argument</p>
<h2 id="noexcept"><a href="#noexcept" class="headerlink" title="noexcept"></a>noexcept</h2><p>异常是一门大学问。在程序中必须处理异常，如果不处理，异常会传递给调用端，直到 <code>std::terminate()</code> 然后调用 <code>std::abort()</code> 结束程序。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//c++17</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span> <span class="keyword">noexcept</span></span>; <span class="comment">//等价于 void foo() noexcept(true);</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(Type&amp; x, Type&amp; y)</span> <span class="title">noexcept</span><span class="params">(<span class="keyword">noexcept</span>(x.swap(y)))</span></span>&#123; <span class="comment">//如果 x.swap(y) 不产生异常,那么保证函数不产生异常</span></span><br><span class="line">    x.swap(y);</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在搬移构造和搬移赋值时的应用</span></span><br><span class="line"><span class="comment">// you need to inform C++(specially std::vector) that your move constructor and destructor does not throw.</span></span><br><span class="line"><span class="comment">// that the move constructor will be called when the vector grows.</span></span><br><span class="line"><span class="comment">// if the constructor is not noexcept, std::vector can&#x27;t use it.</span></span><br><span class="line"><span class="comment">// since then it can&#x27;t ensure the exception guarantees demanded by the standard.</span></span><br><span class="line"><span class="comment">// 自定义的类型,必须告知vector,你这个类型的搬移构造和搬移赋值是不会抛出异常的,vector在成长过程中才敢使用</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyString</span>&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">		<span class="keyword">char</span> * _data;</span><br><span class="line">		<span class="keyword">size_t</span> _len;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">		<span class="comment">// move constructor</span></span><br><span class="line">		MyString(MyString&amp;&amp; str) <span class="keyword">noexcept</span></span><br><span class="line">		: _data(str),_len(str._len) &#123;&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// move assignment</span></span><br><span class="line">		MyString&amp; <span class="keyword">operator</span>=(MyString&amp;&amp; str) <span class="keyword">noexcept</span></span><br><span class="line">		&#123; ... <span class="keyword">return</span> *<span class="keyword">this</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//只有对拷贝构造和拷贝赋值函数用 noexcept 修饰,vector&lt;MyString&gt; 的时候才会考虑 std::move</span></span><br></pre></td></tr></table></figure>

<h2 id="override"><a href="#override" class="headerlink" title="override"></a>override</h2><p>override 编译器会检查你是否是在重写父类的虚函数</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Base</span>&#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">vfunc</span><span class="params">(<span class="keyword">float</span>)</span></span>&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Drived</span> :</span> Base&#123;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">vfunc</span><span class="params">(<span class="keyword">int</span>)</span></span>&#123;&#125;  <span class="comment">//C++11前的语法如此,一旦虚函数写错就会出现问题</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**************/</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Drived</span> :</span> Base&#123;</span><br><span class="line">    <span class="comment">//写错,报错</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span>)</span> <span class="keyword">override</span> </span>&#123;&#125;   <span class="comment">//C++11后增加的 override 修饰词, 可以检查当前函数是否是基类的虚函数(检查:返回类型,函数名,参数列表)</span></span><br><span class="line">    <span class="comment">//写对</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">float</span>)</span> <span class="keyword">override</span> </span>&#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="final"><a href="#final" class="headerlink" title="final"></a>final</h2><p>后置修饰类名：说明该类在继承体系中无法被继承 : <code>struct base final &#123;&#125;;</code></p>
<p>后置修饰虚函数：不允许该虚函数在子类中重写</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CPoint2D</span> <span class="title">final</span>&#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Draw</span><span class="params">()</span> <span class="keyword">final</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="decltype"><a href="#decltype" class="headerlink" title="decltype"></a>decltype</h2><p>decltype(表达式) : 返回 表达式的类型 在编译期完成 : <code>decltype(a*b)</code></p>
<p><strong>相关内容 :</strong> typeid() 可以返回一个类型的id，可以用于判断两个类别是否相同，但是无法用于声明该类型的变量 : <code>if(typeid(T::iterator) == typeid(forward_iterator)</code></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">map</span>&lt;<span class="built_in">string</span>, <span class="keyword">float</span>&gt; coll;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"><span class="comment">//在你定义很久以后,忘记某个类型或者自己不知道它的类型的时候,使用类型推导十分方便</span></span><br><span class="line"><span class="keyword">decltype</span>(coll)::value_type elem; <span class="comment">// 编译器编译期内翻译成为 map&lt;string, float&gt;::value_type elem;</span></span><br></pre></td></tr></table></figure>

<p><strong>主要用法</strong></p>
<ul>
<li><p>函数返回类型时使用 decltype()</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T1, <span class="keyword">typename</span> T2&gt;</span><br><span class="line"><span class="keyword">decltype</span>(x+y) add(T1&amp; x, T2&amp; y);  <span class="comment">//使用 decltype() 可以在写函数的时候不知道处理完之后到底要返回什么类型,要取决于 x+y 的返回类型’</span></span><br><span class="line"></span><br><span class="line">但是以上写法编译不会通过,因为 <span class="keyword">decltype</span> 处不知道 x 和 y 是什么符号</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T1, <span class="keyword">typename</span> T2&gt;</span><br><span class="line">auto add(T1&amp; x, T2&amp; y) -&gt; decltype(x+y);</span><br></pre></td></tr></table></figure>
</li>
<li><p>lambda函数返回类型时使用 decltype()</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">[...](...) <span class="keyword">mutable</span> -&gt; <span class="keyword">decltype</span>(...) &#123;...&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> cmp = [](<span class="keyword">const</span> Person&amp; p1, <span class="keyword">const</span> Person&amp; p2) &#123;</span><br><span class="line">		<span class="keyword">return</span> p1.lastname() &lt; p2.lastname() || (p1.lastname() == p2.lastname() &amp;&amp; p1.firstname() &lt; p2.firstname());</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过decltype(cmp) 传入比较的匿名函数</span></span><br><span class="line">std::set&lt;Person,decltype(cmp)&gt; coll(cmp);</span><br></pre></td></tr></table></figure>
</li>
<li><p>用于确认一个对象的类型时使用 decltype()</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="keyword">typename</span> <span class="title">decltype</span><span class="params">(obj)</span>::iterator itype</span>; <span class="comment">//使用类作用域运算符 :: 时, 必修需要加 typename</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
]]></content>
      <categories>
        <category>C++</category>
        <category>C++11</category>
      </categories>
      <tags>
        <tag>C++11</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>理解 type_traits</title>
    <url>/OXygenPanda.github.io/2020/10/31/STL/STL-type%20traits/</url>
    <content><![CDATA[<h1 id="type-traits"><a href="#type-traits" class="headerlink" title="__type_traits"></a>__type_traits</h1><blockquote>
<p>  &lt;__type_traits.h&gt; 是 SGI 版本的 STL 的实现，其他版本的 STL 没有去调研过是否存在类型萃取。但是侯捷老师的源码剖析已经过去了那么多年，我相信比较好的一些实现，还是会被其他版本进行借鉴的。</p>
</blockquote>
<a id="more"></a>

<p>前一篇文章是 <code>iterator_traits</code> 迭代器萃取器，可以感受到，迭代器的萃取器会萃取出迭代器的元数据 : <code>value_type</code> <code>difference_type</code> <code>pointer</code>  <code>reference</code>  <code>iterator_category</code>。其中最重要的 <code>iterator_category</code> 元数据对一些算法进行选择有很大的帮助。</p>
<p>相同的，<code>__type_traits</code>  负责萃取类型的元数据，比如 : 某类型是否拥有不重要的默认构造函数 <code>has_trivial_default_constructor</code> 。在迭代器萃取器中的 <code>iterator_category</code> 会回答五种类型，在类型萃取器中只会回答两种类型：<code>__true_type</code> <code>__false_type</code>。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">true_type</span>&#123;</span>&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">false_type</span>&#123;</span>&#125;;</span><br><span class="line"><span class="comment">// 不需要实现,进行函数调用时,需要不同的类型才能够进行类型推导</span></span><br><span class="line"><span class="comment">// 而不能是只回答同样bool类型的 : true / false</span></span><br></pre></td></tr></table></figure>

<h2 id="type-traits-源码"><a href="#type-traits-源码" class="headerlink" title="_type_traits 源码"></a>_type_traits 源码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// __type_traits 的写法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 泛化__type_traits</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">type</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">struct</span> __<span class="title">type_traits</span>&#123;</span></span><br><span class="line">		<span class="keyword">typedef</span> __true_type this_dummy_member_must_be_first;</span><br><span class="line">		<span class="keyword">typedef</span> __false_type has_trivial_default_constructor;</span><br><span class="line">		<span class="keyword">typedef</span> __false_type has_trivial_copy_constructor;</span><br><span class="line">		<span class="keyword">typedef</span> __false_type has_trivial_assignment_constructor;</span><br><span class="line">		<span class="keyword">typedef</span> __false_type has_trivial_destructor;</span><br><span class="line">		<span class="keyword">typedef</span> __false_type is_POD_type;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 原则:</span></span><br><span class="line"><span class="comment">** trivial 是不重要的,回答 false. 即有重要的四种基本函数</span></span><br><span class="line"><span class="comment">** 保守起见,为所有的类型都设定为重要的构造和拷贝和析构</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//特别多的特化__type_traits</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">template</span>&lt;&gt; __STL_TEMPLATE_NULL;</span><br><span class="line">__STL_TEMPLATE_NULL <span class="class"><span class="keyword">struct</span> __<span class="title">type_traits</span>&lt;char&gt;&#123;</span></span><br><span class="line">		<span class="comment">//具体萃取 char 类型的元数据</span></span><br><span class="line">		<span class="comment">//C语言内置类型 都是以下的回答</span></span><br><span class="line">		<span class="keyword">typedef</span> __true_type has_trivial_default_constructor;</span><br><span class="line">		<span class="keyword">typedef</span> __true_type has_trivial_copy_constructor;</span><br><span class="line">		<span class="keyword">typedef</span> __true_type has_trivial_assignment_constructor;</span><br><span class="line">		<span class="keyword">typedef</span> __true_type has_trivial_destructor;</span><br><span class="line">		<span class="keyword">typedef</span> __true_type is_POD_type;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//... 许多其他类型的类型萃取特化版本</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//特别的,指针类型也可以进行萃取</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">type_traits</span>&lt;T*&gt;&#123;</span></span><br><span class="line">		<span class="keyword">typedef</span> __true_type has_trivial_default_constructor;</span><br><span class="line">		<span class="keyword">typedef</span> __true_type has_trivial_copy_constructor;</span><br><span class="line">		<span class="keyword">typedef</span> __true_type has_trivial_assignment_constructor;</span><br><span class="line">		<span class="keyword">typedef</span> __true_type has_trivial_destructor;</span><br><span class="line">		<span class="keyword">typedef</span> __true_type is_POD_type;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h2 id="type-traits-实例"><a href="#type-traits-实例" class="headerlink" title="__type_traits 实例"></a>__type_traits 实例</h2><p>来源于 侯捷老师 的例子</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//入口函数</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">ForwardIterator</span>, <span class="title">class</span> <span class="title">Size</span>, <span class="title">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">ForwardIterator</span></span></span><br><span class="line"><span class="class"><span class="title">uninitialized_fill_n</span>(<span class="title">ForwardIterator</span> <span class="title">first</span>,</span></span><br><span class="line"><span class="class">					 <span class="title">Size</span> <span class="title">n</span>,</span></span><br><span class="line"><span class="class">					 <span class="title">const</span> <span class="title">T</span>&amp; <span class="title">x</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">return</span> __uninitialized_fill_n(first, n, x, iterator_traits&lt;ForwardIterator&gt;::value_type);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//萃取“工具人”</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">ForwardIterator</span>, <span class="title">class</span> <span class="title">Size</span>, <span class="title">class</span> <span class="title">T</span>, <span class="title">class</span> <span class="title">T1</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">ForwardIterator</span></span></span><br><span class="line"><span class="class">__<span class="title">uninitialized_fill_n</span>(<span class="title">ForwardIterator</span> <span class="title">first</span>,</span></span><br><span class="line"><span class="class">					   <span class="title">Size</span> <span class="title">n</span>,</span></span><br><span class="line"><span class="class">					   <span class="title">const</span> <span class="title">T</span>&amp; <span class="title">x</span>,</span></span><br><span class="line"><span class="class">					   <span class="title">T1</span>*)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">typedef</span> <span class="keyword">typename</span> type_traits&lt;T1&gt;::is_POD_type is_POD;</span><br><span class="line">	<span class="keyword">return</span> __uninitialized_fill_n_aux(first, n, x, is_POD());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实际上根据 is_POD 属性进行类型推导选择执行以下两个函数中的一个</span></span><br><span class="line"><span class="comment">//可以看到,这边如果是用true false来回答的话,这边就无法根据类型推导来选择不同函数了</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">ForwardIterator</span>, <span class="title">class</span> <span class="title">Size</span>, <span class="title">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">ForwardIterator</span></span></span><br><span class="line"><span class="class">__<span class="title">uninitialized_fill_n_aux</span>(<span class="title">ForwardIterator</span> <span class="title">first</span>, <span class="title">Size</span> <span class="title">n</span>, <span class="title">const</span> <span class="title">T</span>&amp; <span class="title">x</span>,__<span class="title">false_type</span>)&#123;</span></span><br><span class="line">	ForwardIterator cur = first;</span><br><span class="line">	<span class="keyword">for</span>( ; n &gt; <span class="number">0</span>; --n, ++cur)</span><br><span class="line">		construct(&amp;*cur, x);</span><br><span class="line">	<span class="keyword">return</span> cur;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">ForwardIterator</span>, <span class="title">class</span> <span class="title">Size</span>, <span class="title">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">ForwardIterator</span></span></span><br><span class="line"><span class="class">__<span class="title">uninitialized_fill_n_aux</span>(<span class="title">ForwardIterator</span> <span class="title">first</span>, <span class="title">Size</span> <span class="title">n</span>, <span class="title">const</span> <span class="title">T</span>&amp; <span class="title">x</span>,__<span class="title">true_type</span>)&#123;</span></span><br><span class="line">	<span class="keyword">return</span> fill_n(first, n, x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="融入-STL"><a href="#融入-STL" class="headerlink" title="融入 STL"></a>融入 STL</h2><p>如果不自己写一个特化版本的话，萃取该自定类型时，萃取结果会认为你的四种函数(构造、拷贝构造、拷贝赋值、析构)都是重要的，但是事实上如果不重要可以提高某一些算法的效率，因此如果真的不重要，就应该在特化版本中告诉编译器。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//比如有一个自定义的 class shape</span></span><br><span class="line"><span class="keyword">template</span>&lt;&gt;</span><br><span class="line">__type_traits&lt;shape&gt;&#123;</span><br><span class="line">		<span class="keyword">typedef</span> __true_type  has_trivial_default_constructor;</span><br><span class="line">		<span class="keyword">typedef</span> __false_type has_trivial_copy_constructor;</span><br><span class="line">		<span class="keyword">typedef</span> __false_type has_trivial_assignment_constructor;</span><br><span class="line">		<span class="keyword">typedef</span> __false_type has_trivial_destructor;</span><br><span class="line">		<span class="keyword">typedef</span> __false_type is_POD_type;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>  学习自侯捷老师：《STL源码剖析》</p>
</blockquote>
]]></content>
      <categories>
        <category>C++</category>
        <category>STL</category>
        <category>迭代器</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>STL</tag>
        <tag>iterator</tag>
      </tags>
  </entry>
  <entry>
    <title>理解 iterator_traits</title>
    <url>/OXygenPanda.github.io/2020/10/30/STL/STL-iterator%20traits/</url>
    <content><![CDATA[<h1 id="iterator"><a href="#iterator" class="headerlink" title="iterator"></a>iterator</h1><p>iterator 意为迭代器，是常见的23种设计模式中的一种。</p>
<a id="more"></a>

<blockquote>
<p>  iterator模式 使该对象能够依序遍历整个容器所含的各个元素，不需要暴露容器的底层实现。</p>
</blockquote>
<p>在 STL 的框架里，有六个部分：容器、迭代器、算法、分配器、适配器、仿函数。</p>
<p>其中迭代器是一个有名有姓的重要的组成部分。可以说，迭代器是容器与算法的桥梁或者说是胶水。有了迭代器，使得算法可以不直接作用与特定的容器，使得算法更加地泛化。( <code>OXygen</code> : 算法只需要依据迭代器支持的操作不同而做不同的策略, 而不是针对数量众多的容器, 一一做出不同的操作)</p>
<p>可以看一个示例：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">InputIterator</span>, <span class="title">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="title">InputIterator</span> <span class="title">find</span>(<span class="title">InputIterator</span> <span class="title">first</span>,</span></span><br><span class="line"><span class="class">                       <span class="title">InputIterator</span> <span class="title">last</span>,</span></span><br><span class="line"><span class="class">                       <span class="title">const</span> <span class="title">T</span>&amp; <span class="title">value</span>)&#123;</span></span><br><span class="line">    <span class="keyword">while</span>(first != last &amp;&amp; *first != value)</span><br><span class="line">        ++first;</span><br><span class="line">    <span class="keyword">return</span> first;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们只需要提供一组迭代器以及一个代查找的数据就可以实现查找，而不需要让函数知道容器是什么样子。</p>
<h1 id="iterator-traits"><a href="#iterator-traits" class="headerlink" title="iterator_traits"></a>iterator_traits</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>迭代器用五种类型分别是：</p>
<ul>
<li>Input Iterator (重载 <code>++</code>)</li>
<li>Output Iterator</li>
<li>Forward Iterator (重载 <code>++</code>)</li>
<li>Bidirectional Iterator (重载 <code>++</code> <code>--</code>)</li>
<li>Random Access Iterator (重载 <code>++</code> <code>--</code> <code>+n</code> <code>-n</code> <code>[]</code> <code>-</code> <code>&lt;</code>)</li>
</ul>
<p>其中有继承关系 :</p>
<img src="https://i.loli.net/2020/10/30/F2qlJSXGfv1TcDa.jpg" style="zoom: 50%;">

<h2 id="iterator-traits-的代码"><a href="#iterator-traits-的代码" class="headerlink" title="iterator_traits 的代码"></a><code>iterator_traits</code> 的代码</h2><p>迭代器的萃取器要为所有迭代器都能够萃取出想要的属性，但是也得为指针和常量指针萃取出想要的属性。因为指针也是一种迭代器，并且是支持随机访问的迭代器(指针可以靠地址偏移随机访问)。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">Iterator</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">struct</span> <span class="title">iterator_traits</span>&#123;</span></span><br><span class="line">  	<span class="keyword">typedef</span> <span class="keyword">typename</span> Iterator::iterator_category   iterator_category;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">typename</span> Iterator::value_type          value_type;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">typename</span> Iterator::difference_type     difference_type;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">typename</span> Iterator::pointer             pointer;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">typename</span> Iterator::reference           reference;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//偏特化</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">struct</span> <span class="title">iterator_traits</span>&lt;T*&gt;&#123;</span></span><br><span class="line">  	<span class="keyword">typedef</span> <span class="keyword">typename</span> random_access_iterator_tag    iterator_category;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">typename</span> T                             value_type;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">typename</span> <span class="keyword">ptrdiff_t</span>                     difference_type;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">typename</span> T*                            pointer;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">typename</span> T&amp;                            reference;    </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">struct</span> <span class="title">iterator_traits</span>&lt;const T*&gt;&#123;</span></span><br><span class="line">  	<span class="keyword">typedef</span> <span class="keyword">typename</span> random_access_iterator_tag    iterator_category;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">typename</span> T                             value_type;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">typename</span> <span class="keyword">ptrdiff_t</span>                     difference_type;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">typename</span> T*                            pointer;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">typename</span> T&amp;                            reference;      </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>以上为 <code>iterator_traits</code> 的代码，主要包含一个泛化的版本和两个针对指针和常量指针的版本。</p>
<h2 id="iterator-traits的利用与设计"><a href="#iterator-traits的利用与设计" class="headerlink" title="iterator_traits的利用与设计"></a>iterator_traits的利用与设计</h2><p>我们有一个针对于元素唯一且有序的容器，实现搜索，提供的是首尾迭代器，那么我们对于不同类型的迭代器就得有不同的实现 ：</p>
<ul>
<li>针对于 vector queue 容器，迭代器类型为 Random Access Iterator，我们可以使用二分搜索；</li>
<li>针对于 list forward-list 容器，迭代器类型为 Forward Iterator 或 Bidirectional Iterator，我们只能使用迭代来搜索。</li>
</ul>
<p>因此，我们可以设计两种函数，一种针对于 Random Access Iterator 实现，一种针对于 Input Iterator 实现。(因为继承关系，无法完美匹配 Random Access Iterator 的话，都会去调用 Input Iterator 的版本)</p>
<blockquote>
<p>  以下代码是自己完成，欢迎讨论，关于页面有我的微信，添加请备注。</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//以上方案</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iterator&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;type_traits&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************/</span></span><br><span class="line"><span class="comment">// 用于判定迭代器的类型属性(iterator_category)</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> InputIterator&gt;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">is_random_access_iterator</span><span class="params">(InputIterator iterator)</span></span>&#123;</span><br><span class="line">	<span class="keyword">typedef</span> <span class="keyword">typename</span> iterator_traits&lt;InputIterator&gt;::iterator_category category;</span><br><span class="line">	<span class="keyword">return</span> (<span class="keyword">typeid</span>(category()) == <span class="keyword">typeid</span>(random_access_iterator_tag()));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> InputIterator&gt;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">is_input_iterator</span><span class="params">(InputIterator iterator)</span></span>&#123;</span><br><span class="line">	<span class="keyword">typedef</span> <span class="keyword">typename</span> iterator_traits&lt;InputIterator&gt;::iterator_category category;</span><br><span class="line">	<span class="keyword">return</span> (<span class="keyword">typeid</span>(category()) == <span class="keyword">typeid</span>(input_iterator_tag()));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/******************************/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************/</span></span><br><span class="line"><span class="comment">// 内部函数:实现了针对 Random_Access_Iterator 的版本 和 Input_Iterator 的版本</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> RandomAccessIterator, <span class="keyword">typename</span> Value&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> RandomAccessIterator <span class="title">mySearch_RI</span><span class="params">(RandomAccessIterator first, RandomAccessIterator last, Value n)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 返回找到的迭代器,否则返回 last</span></span><br><span class="line">    <span class="keyword">if</span>(first &gt; last)	<span class="keyword">return</span> last;</span><br><span class="line">    <span class="keyword">while</span>(first &lt; last)&#123;</span><br><span class="line">	    RandomAccessIterator mid = first + ((last - first) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span>(*mid &lt; n)&#123;</span><br><span class="line">            first = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(*mid &gt; n)&#123;</span><br><span class="line">            last = mid; <span class="comment">//因为 [first,last)</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> last;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> InputIterator, <span class="keyword">typename</span> Value&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> InputIterator <span class="title">mySearch_II</span><span class="params">(InputIterator first, InputIterator last, Value n)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 返回找到的迭代器,否则返回 last</span></span><br><span class="line">    <span class="keyword">while</span>(first != last)&#123;</span><br><span class="line">        <span class="keyword">if</span>(*first == n)</span><br><span class="line">            <span class="keyword">return</span> first;</span><br><span class="line">        first++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> last;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/******************************/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用函数</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> InputIterator, <span class="keyword">typename</span> Value&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> InputIterator <span class="title">mySearch</span><span class="params">(InputIterator first, InputIterator last, Value n)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(is_input_iterator(first)) &#123;</span><br><span class="line">		<span class="keyword">return</span> mySearch_II(first, last, n);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(is_random_access_iterator(first))&#123;</span><br><span class="line">        <span class="keyword">return</span> mySearch_RI(first,last,n);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//经过测试,链表的调用会出现错误,还不知道具体是什么原因,如果你知道的话,可以联系一下我</span></span><br><span class="line">	<span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">vec</span><span class="params">(&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>&#125;)</span></span>;</span><br><span class="line">	<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator it;</span><br><span class="line">	<span class="keyword">if</span>((it = mySearch(vec.begin(),vec.end(),<span class="number">5</span>)) != vec.end())</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;找到了元素&quot;</span> &lt;&lt; *it &lt;&lt; <span class="string">&quot;索引值为&quot;</span> &lt;&lt; it - vec.begin() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">//	list&lt;int&gt; lst;</span></span><br><span class="line"><span class="comment">//	lst.push_back(20);</span></span><br><span class="line"><span class="comment">//	lst.push_back(30);</span></span><br><span class="line"><span class="comment">//	lst.push_back(15);</span></span><br><span class="line"><span class="comment">//	list&lt;int&gt;::iterator it2;</span></span><br><span class="line"><span class="comment">//	if((it2 = mySearch(lst.begin(),lst.end(),15)) != lst.end())</span></span><br><span class="line"><span class="comment">//		cout &lt;&lt; &quot;找到了元素&quot; &lt;&lt; *it &lt;&lt; endl;</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但是，这样的代码通过调用函数来判断传入的迭代器是什么类型，无法在编译期内确认，效率不够。因此，采用 iterator_traits 就能提高效率。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//&lt;iterator&gt;头文件中包含了标签的继承关系</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">input_iterator_tag</span>&#123;</span>&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">output_iterator_tag</span>&#123;</span>&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">forward_iterator_tag</span> :</span> <span class="keyword">public</span> input_iterator_tag&#123;&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">bidirectional_iterator_tag</span> :</span> <span class="keyword">public</span> forward_iterator_tag&#123;&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">random_access_iterator_tag</span> :</span> <span class="keyword">public</span> bidirectional_iterator_tag&#123;&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iterator&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;type_traits&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> InputIterator, <span class="keyword">typename</span> Value&gt;</span><br><span class="line"><span class="keyword">inline</span> InputIterator _mySearch(</span><br><span class="line">		InputIterator first,</span><br><span class="line">		InputIterator last,</span><br><span class="line">		Value n,</span><br><span class="line">		random_access_iterator_tag</span><br><span class="line">		)</span><br><span class="line">	&#123;</span><br><span class="line">	<span class="comment">// 返回找到的迭代器,否则返回 last</span></span><br><span class="line">	<span class="keyword">if</span>(first &gt; last)	<span class="keyword">return</span> last;</span><br><span class="line">	<span class="keyword">while</span>(first &lt; last)&#123;</span><br><span class="line">		InputIterator mid = first + ((last - first) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">		<span class="keyword">if</span>(*mid &lt; n)&#123;</span><br><span class="line">			first = mid + <span class="number">1</span>;</span><br><span class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span>(*mid &gt; n)&#123;</span><br><span class="line">			last = mid; <span class="comment">//因为 [first,last)</span></span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="keyword">return</span> mid;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> last;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> InputIterator, <span class="keyword">typename</span> Value&gt;</span><br><span class="line"><span class="keyword">inline</span> InputIterator _mySearch(</span><br><span class="line">		InputIterator first,</span><br><span class="line">		InputIterator last,</span><br><span class="line">		Value n,</span><br><span class="line">		input_iterator_tag</span><br><span class="line">		)</span><br><span class="line">	&#123;</span><br><span class="line">	<span class="comment">// 返回找到的迭代器,否则返回 last</span></span><br><span class="line">	<span class="keyword">while</span>(first != last)&#123;</span><br><span class="line">		<span class="keyword">if</span>(*first == n)</span><br><span class="line">			<span class="keyword">return</span> first;</span><br><span class="line">		first++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> last;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用函数</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> InputIterator, <span class="keyword">typename</span> Value&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> InputIterator <span class="title">mySearch</span><span class="params">(InputIterator first, InputIterator last, Value n)</span></span>&#123;</span><br><span class="line">    <span class="comment">//在这里通过萃取器萃取得到 iterator_category 来选择调用的是哪一个重载函数</span></span><br><span class="line">	<span class="keyword">return</span> _mySearch(first,last,n,<span class="keyword">typename</span> iterator_traits&lt;InputIterator&gt;::iterator_category());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//改成这个版本后,链表的测试也能够通过了,看来还是有一定的机制没有摸透</span></span><br><span class="line">	<span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">vec</span><span class="params">(&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>&#125;)</span></span>;</span><br><span class="line">	<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator it;</span><br><span class="line">	<span class="keyword">if</span>((it = mySearch(vec.begin(),vec.end(),<span class="number">5</span>)) != vec.end())</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;找到了元素&quot;</span> &lt;&lt; *it &lt;&lt; <span class="string">&quot;索引值为&quot;</span> &lt;&lt; it - vec.begin() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt; lst;</span><br><span class="line">	lst.push_back(<span class="number">20</span>);</span><br><span class="line">	lst.push_back(<span class="number">30</span>);</span><br><span class="line">	lst.push_back(<span class="number">15</span>);</span><br><span class="line">	<span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt;::iterator it2;</span><br><span class="line">	<span class="keyword">if</span>((it2 = mySearch(lst.begin(),lst.end(),<span class="number">15</span>)) != lst.end())</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;找到了元素&quot;</span> &lt;&lt; *it2 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="https://i.loli.net/2020/10/30/q24HRBm3hluLdEI.png" alt="*image-20201030155707503*" style="zoom:50%;">

<p>代码调用流程如下：</p>
<img src="https://i.loli.net/2020/10/30/ZPzWl69i84UTYOV.jpg" style="zoom: 25%;">





<h2 id="融入-STL"><a href="#融入-STL" class="headerlink" title="融入 STL"></a>融入 STL</h2><p>如果想要设计一个迭代器融入到STL中，一定要指明五种类型。方便萃取器能够获得它们。STL提供了一个 iterator 的 class ，当自己设计时只需要继承该类即可：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">Category</span>,</span></span><br><span class="line"><span class="class">				 <span class="title">class</span> <span class="title">T</span>,</span></span><br><span class="line"><span class="class">				 <span class="title">class</span> <span class="title">Distance</span> = <span class="title">ptrdiff_t</span>,</span></span><br><span class="line"><span class="class">				 <span class="title">class</span> <span class="title">Pointer</span> = <span class="title">T</span>*,</span></span><br><span class="line"><span class="class">				 <span class="title">class</span> <span class="title">Reference</span> = <span class="title">T</span>&amp;&gt;</span></span><br><span class="line"><span class="class"><span class="title">struct</span> <span class="title">iterator</span>&#123;</span></span><br><span class="line">		<span class="keyword">typedef</span> Category     iterator_category;</span><br><span class="line">		<span class="keyword">typedef</span> T            value_type;</span><br><span class="line">		<span class="keyword">typedef</span> Distance     difference_type;</span><br><span class="line">    	<span class="keyword">typedef</span> Pointer      pointer;</span><br><span class="line">		<span class="keyword">typedef</span> Reference    reference;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>例如：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> Item&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ListIter</span> :</span> <span class="keyword">public</span> <span class="built_in">std</span>::iterator&lt;<span class="built_in">std</span>::forward_iterator_tag, Item&gt;&#123; <span class="comment">//缺省三个参数,只需要提供前两者</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<blockquote>
<p>  除设计部分学习自侯捷老师：《STL源码剖析》</p>
<p>  设计部分属于自行设计(仍有bug)</p>
</blockquote>
]]></content>
      <categories>
        <category>C++</category>
        <category>STL</category>
        <category>迭代器</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>STL</tag>
        <tag>iterator</tag>
      </tags>
  </entry>
  <entry>
    <title>装饰器模式</title>
    <url>/OXygenPanda.github.io/2020/10/29/HugeFour/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/4.%E5%8D%95%E4%B8%80%E8%81%8C%E8%B4%A3%E6%A8%A1%E5%BC%8F_%E8%A3%85%E9%A5%B0%E5%99%A8/</url>
    <content><![CDATA[<h1 id="装饰器模式-Decorator"><a href="#装饰器模式-Decorator" class="headerlink" title="装饰器模式 Decorator"></a>装饰器模式 Decorator</h1><blockquote>
<p>  动态（组合）地给一个对象增加一些额外的职责。就增加功能而言，Decorator模式 比生成子类（继承）更为灵活（消除重复代码&amp;减少子类个数）—— GoF</p>
</blockquote>
<a id="more"></a>

<p>本次项目里，原本的代码的一个类的继承关系如下：</p>
<p>其中 <code>Stream</code> 是流的基类，在此之上创建了几个派生类，分别是：<code>FileStream</code> <code>NetworkStream</code> <code>MemoryStream</code>。到这里并没有问题，但是如果要对每一种派生的类做加密或者增加缓存或者其他以后可能会出现的需求时，继续继承派生会使得类的数量特别庞大。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">classDiagram</span><br><span class="line">    Stream &lt;|-- FileStream</span><br><span class="line">    Stream &lt;|-- NetworkStream</span><br><span class="line">    Stream &lt;|-- MemoryStream</span><br><span class="line">    FileStream &lt;|-- CryptoFileStream</span><br><span class="line">    FileStream &lt;|-- BufferedFileStream</span><br><span class="line">    FileStream &lt;|-- CryptoBufferedFileStream</span><br><span class="line">    NetworkStream &lt;|-- CryptoNetworkStream</span><br><span class="line">    NetworkStream &lt;|-- BufferedNetworkStream</span><br><span class="line">    NetworkStream &lt;|-- CryptoBufferedNetworkStream</span><br><span class="line">    MemoryStream &lt;|-- CryptoMemoryStream</span><br><span class="line">    MemoryStream &lt;|-- BufferedMemoryStream</span><br><span class="line">    MemoryStream &lt;|-- CryptoBufferedMemoryStream</span><br></pre></td></tr></table></figure>

<p>通过装饰器模式的改进，使得关系图如下：</p>
<p>使得功能扩展继承自一个<code>DecoratorStream</code>的类，该类中组合了一个<code>Stream</code>的类，通过多态性对不同类型的流进行特定的操作，在操作外层套上对应的功能（需求）。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">classDiagram</span><br><span class="line">    Stream &lt;|-- FileStream</span><br><span class="line">    Stream &lt;|-- NetworkStream</span><br><span class="line">    Stream &lt;|-- MemoryStream</span><br><span class="line">    Stream &lt;|-- DecoratorStream</span><br><span class="line">    DecoratorStream &lt;|-- CyptroStream</span><br><span class="line">    DecoratorStream &lt;|-- BufferedStream</span><br></pre></td></tr></table></figure>

<h2 id="不好的设计"><a href="#不好的设计" class="headerlink" title="不好的设计"></a>不好的设计</h2><p>不好的设计原因主要是，在进行功能扩展时，生成了特别多的类和冗余的代码。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//抽象类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stream</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">char</span> <span class="title">Read</span><span class="params">(<span class="keyword">int</span> number)</span> </span>= <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Seek</span><span class="params">(<span class="keyword">int</span> position)</span> </span>= <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Write</span><span class="params">(<span class="keyword">char</span> data)</span> </span>= <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">virtual</span> ~Stream() &#123;&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//主体类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileStream</span> :</span> <span class="keyword">public</span> Stream &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">char</span> <span class="title">Read</span><span class="params">(<span class="keyword">int</span> number)</span> <span class="keyword">override</span> </span>&#123; <span class="keyword">return</span> <span class="number">0</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Seek</span><span class="params">(<span class="keyword">int</span> position)</span> <span class="keyword">override</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Write</span><span class="params">(<span class="keyword">char</span> data)</span> <span class="keyword">override</span> </span>&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NetworkStream</span> :</span> <span class="keyword">public</span> Stream &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">char</span> <span class="title">Read</span><span class="params">(<span class="keyword">int</span> number)</span> <span class="keyword">override</span> </span>&#123; <span class="keyword">return</span> <span class="number">0</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Seek</span><span class="params">(<span class="keyword">int</span> position)</span> <span class="keyword">override</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Write</span><span class="params">(<span class="keyword">char</span> data)</span> <span class="keyword">override</span> </span>&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//...还有许多其他继承流抽象的子类</span></span><br><span class="line"><span class="comment">//...但是如果涉及到要对子类进行加密增加缓存操作时,十分繁琐</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//扩展操作_加密</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CryptoFileStream</span> :</span> <span class="keyword">public</span> FileStream &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">char</span> <span class="title">Read</span><span class="params">(<span class="keyword">int</span> number)</span> </span>&#123;</span><br><span class="line">      <span class="comment">//额外的加密操作</span></span><br><span class="line">      FileStream::Read(number); <span class="comment">//包裹函数</span></span><br><span class="line">      <span class="comment">//额外的加密操作</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Seek</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">      <span class="comment">//额外的加密操作</span></span><br><span class="line">      FileStream::Seek(position);</span><br><span class="line">      <span class="comment">//额外的加密操作</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Write</span><span class="params">(<span class="keyword">char</span> data)</span> </span>&#123;</span><br><span class="line">      <span class="comment">//额外的加密操作</span></span><br><span class="line">      FileStream::Write(data);</span><br><span class="line">      <span class="comment">//额外的加密操作</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CryptoNetworkStream</span> :</span> <span class="keyword">public</span> NetworkStream &#123;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//...这里还要对其他流也要做加密操作</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//拓展操作_缓存</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BufferedFileStream</span> :</span> <span class="keyword">public</span> FileStream &#123;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BufferedNetworkStream</span> :</span> <span class="keyword">public</span> NetworkStream &#123;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//扩展操作_加密_缓存</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CryptoBufferedFileStream</span> :</span> <span class="keyword">public</span> FileStream &#123;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CryptoBufferedNetworkStream</span> :</span> <span class="keyword">public</span> FileStream &#123;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//其实,所有流的Read()的加密操作都是相同的,不需要写多份,缓存也是如此</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Process</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="comment">//编译时装配</span></span><br><span class="line">  CryptoFileStream *fs1 = <span class="keyword">new</span> CryptoFileStream();</span><br><span class="line">  BufferedFileStream *fs2 = <span class="keyword">new</span> BufferedFileStream();</span><br><span class="line">  CryptoBufferedFileStream *fs3 = <span class="keyword">new</span> CryptoBufferedFileStream();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="装饰器模式"><a href="#装饰器模式" class="headerlink" title="装饰器模式"></a>装饰器模式</h2><p>只需要为功能扩展组合一个基类，就可以利用多态性来减少大量冗余的代码和子类的数量。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//抽象类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stream</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">char</span> <span class="title">Read</span><span class="params">(<span class="keyword">int</span> number)</span> </span>= <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Seek</span><span class="params">(<span class="keyword">int</span> position)</span> </span>= <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Write</span><span class="params">(<span class="keyword">char</span> data)</span> </span>= <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">virtual</span> ~Stream() &#123;&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//主体类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileStream</span> :</span> <span class="keyword">public</span> Stream &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">char</span> <span class="title">Read</span><span class="params">(<span class="keyword">int</span> number)</span> <span class="keyword">override</span> </span>&#123; <span class="keyword">return</span> <span class="number">0</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Seek</span><span class="params">(<span class="keyword">int</span> position)</span> <span class="keyword">override</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Write</span><span class="params">(<span class="keyword">char</span> data)</span> <span class="keyword">override</span> </span>&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NetworkStream</span> :</span> <span class="keyword">public</span> Stream &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">char</span> <span class="title">Read</span><span class="params">(<span class="keyword">int</span> number)</span> <span class="keyword">override</span> </span>&#123; <span class="keyword">return</span> <span class="number">0</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Seek</span><span class="params">(<span class="keyword">int</span> position)</span> <span class="keyword">override</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Write</span><span class="params">(<span class="keyword">char</span> data)</span> <span class="keyword">override</span> </span>&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//扩展</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DecoratorStream</span> :</span> <span class="keyword">public</span> Stream&#123; <span class="comment">//继承为了完善接口规范</span></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    Stream *stream;</span><br><span class="line">    <span class="comment">// = new FileStream();</span></span><br><span class="line">    <span class="comment">// = new NetworkStream();</span></span><br><span class="line">    <span class="comment">// = new MemoryStream();</span></span><br><span class="line">    DecoratorStream(Stream * stream):stream(stream)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CryptoStream</span> :</span> <span class="keyword">public</span> DecoratorStream &#123;</span><br><span class="line">    <span class="comment">//加密操作抽象出来,通过多态来给不同的类型流加密</span></span><br><span class="line">    <span class="comment">// public Stream 为了接口规范</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    CryptoStream(Stream *stream) : DecoratorStream(stream) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">char</span> <span class="title">Read</span><span class="params">(<span class="keyword">int</span> number)</span> </span>&#123;</span><br><span class="line">      <span class="comment">//额外的加密操作</span></span><br><span class="line">      stream-&gt;Read(number); <span class="comment">//包裹函数</span></span><br><span class="line">      <span class="comment">//额外的加密操作</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Seek</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">      <span class="comment">//额外的加密操作</span></span><br><span class="line">      stream-&gt;Seek(position);</span><br><span class="line">      <span class="comment">//额外的加密操作</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Write</span><span class="params">(<span class="keyword">char</span> data)</span> </span>&#123;</span><br><span class="line">      <span class="comment">//额外的加密操作</span></span><br><span class="line">      stream-&gt;Write(data);</span><br><span class="line">      <span class="comment">//额外的加密操作</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BufferedStream</span> :</span> <span class="keyword">public</span> DecoratorStream &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    BufferedStream(Stream *stream) : DecoratorStream(stream) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">char</span> <span class="title">Read</span><span class="params">(<span class="keyword">int</span> number)</span> </span>&#123;</span><br><span class="line">      <span class="comment">//缓存</span></span><br><span class="line">      stream-&gt;Read(number);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Seek</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">      <span class="comment">//缓存</span></span><br><span class="line">      stream-&gt;Seek(position);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Write</span><span class="params">(<span class="keyword">char</span> data)</span> </span>&#123;</span><br><span class="line">      <span class="comment">//缓存</span></span><br><span class="line">      stream-&gt;Write(data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Process</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">//运行时装配</span></span><br><span class="line">  FileStream *s1 = <span class="keyword">new</span> FileStream();</span><br><span class="line">  CryptoStream *s2 = <span class="keyword">new</span> CryptoStream(s1);     <span class="comment">//加密</span></span><br><span class="line">  BufferedStream *s3 = <span class="keyword">new</span> BufferedStream(s1); <span class="comment">//缓存</span></span><br><span class="line">  BufferedStream *s4 = <span class="keyword">new</span> BufferedStream(s2); <span class="comment">//加密 &amp; 缓存</span></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<h2 id="要点总结"><a href="#要点总结" class="headerlink" title="要点总结"></a>要点总结</h2><ul>
<li>通过采用组合而非继承的手法，Decorator模式实现了在运行时多态扩展对象功能的能力，而且可以根据需要扩展多个功能。避免了所有继承带来的灵活性差和多子类衍生问题。</li>
<li>Decorator类在接口上表现为 is-a Component的继承关系，即Decorator类继承了Component类所具有的接口。但在是线上又表现为 has-a Component的组合关系，即Decorator类又使用了另外一个Component类。</li>
<li>Decorator模式的目的并非解决“多子类衍生的多继承”问题，Decorator模式应用的要点在于解决“主体类在多个方向上的扩展功能”——是为“装饰”含义。</li>
</ul>
]]></content>
      <categories>
        <category>读书笔记</category>
        <category>《设计模式》</category>
        <category>单一职责模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>策略模式</title>
    <url>/OXygenPanda.github.io/2020/10/28/HugeFour/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/2.%E7%BB%84%E4%BB%B6%E5%8D%8F%E4%BD%9C%E6%A8%A1%E5%BC%8F_%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="模板模式-Strategy"><a href="#模板模式-Strategy" class="headerlink" title="模板模式 Strategy"></a>模板模式 Strategy</h1><blockquote>
<p>  在许多 <code>if-else</code> 写完以后，如果以后还需要在源码上进行扩写条件分支，那么最好可以使用策略模式，以实现运行时多态。</p>
</blockquote>
<a id="more"></a>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">classDiagram</span><br><span class="line">    Context o--|&gt; Strategy</span><br><span class="line">    Strategy &lt;|-- ConcreteStrategyA</span><br><span class="line">    Strategy &lt;|-- ConcreteStrategyB</span><br><span class="line">    Strategy &lt;|-- ConcreteStrategyC</span><br><span class="line">    class Context&#123;</span><br><span class="line">        ContextInterface()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    class Strategy&#123;</span><br><span class="line">        AlgorithmInterface()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    class ConcreteStrategyA&#123;</span><br><span class="line">        AlgorithmInterface()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    class ConcreteStrategyB&#123;</span><br><span class="line">        AlgorithmInterface()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    class ConcreteStrategyC&#123;</span><br><span class="line">        AlgorithmInterface()</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>定义一系列算法，把他们一个个封装起来，并且使他们可互相替换（变化）。该模式使得算法可以独立于使用他们的客户程序（稳定）而变化（扩展，子类化）。</p>
<h2 id="动机"><a href="#动机" class="headerlink" title="动机"></a>动机</h2><p>在软件构建过程中，某些对象使用的算法可能多种多样，经常改变，如果将这些算法都编码到对象中，将会使对象变得异常复杂；而且有时候支持不使用的算法也是一个性能负担。</p>
<p>如何在运行时根据需要透明地更改对象的算法？将算法与对象本身解耦，从而避免上述问题？</p>
<h2 id="不好的设计"><a href="#不好的设计" class="headerlink" title="不好的设计"></a>不好的设计</h2><p>一旦增加业务，会修改源代码，违反了开闭原则（扩展开放，修改关闭）</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> TaxBase&#123;</span><br><span class="line">		CN_Tax,</span><br><span class="line">		US_Tax,</span><br><span class="line">		DE_Tax,</span><br><span class="line">		FR_Tax <span class="comment">//新增</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SalesOrder</span>&#123;</span></span><br><span class="line">		TaxBase tax;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">		<span class="function"><span class="keyword">double</span> <span class="title">CalculateTax</span><span class="params">()</span></span>&#123;</span><br><span class="line">				<span class="keyword">if</span>( tax == CN_Tax )&#123;...&#125;</span><br><span class="line">				<span class="keyword">else</span> <span class="keyword">if</span>( tax == US_Tax ) &#123;...&#125;</span><br><span class="line">				<span class="keyword">else</span> <span class="keyword">if</span>( tax == DE_Tax ) &#123;...&#125;</span><br><span class="line">				<span class="keyword">else</span> <span class="keyword">if</span>( tax == FR_Tax ) &#123;...&#125; <span class="comment">//新增</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="模板模式"><a href="#模板模式" class="headerlink" title="模板模式"></a>模板模式</h2><p>只需要新增一个子类来继承基类，实现多态调用</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//class TaxStrategy&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">		<span class="function"><span class="keyword">virtual</span> <span class="keyword">double</span> <span class="title">Calculate</span><span class="params">(<span class="keyword">const</span> Context&amp; context)</span> </span>= <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">virtual</span> ~TaxStrategy()&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CNTax</span> :</span> <span class="keyword">public</span> Taxstrategy &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">		<span class="function"><span class="keyword">virtual</span> <span class="keyword">double</span> <span class="title">Calculate</span><span class="params">(<span class="keyword">const</span> Context&amp; context)</span> </span>&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">USTax</span> :</span> <span class="keyword">public</span> Taxstrategy &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">		<span class="function"><span class="keyword">virtual</span> <span class="keyword">double</span> <span class="title">Calculate</span><span class="params">(<span class="keyword">const</span> Context&amp; context)</span> </span>&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DETax</span> :</span> <span class="keyword">public</span> Taxstrategy &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">		<span class="function"><span class="keyword">virtual</span> <span class="keyword">double</span> <span class="title">Calculate</span><span class="params">(<span class="keyword">const</span> Context&amp; context)</span> </span>&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FRTax</span> :</span> <span class="keyword">public</span> Taxstrategy &#123; <span class="comment">//新增</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">		<span class="function"><span class="keyword">virtual</span> <span class="keyword">double</span> <span class="title">Calculate</span><span class="params">(<span class="keyword">const</span> Context&amp; context)</span> </span>&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SalesOrder</span>&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">		TaxStrategy * strategy;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">		SalesOrder(StrategyFactory* strategyfactory)&#123;</span><br><span class="line">				<span class="keyword">this</span>-&gt;strategy = strategyfactory-&gt;NewStrategy();  <span class="comment">//工厂模式</span></span><br><span class="line">		&#125;</span><br><span class="line">		~SalesOrder()&#123;</span><br><span class="line">				<span class="keyword">delete</span> <span class="keyword">this</span>-&gt;strategy;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="function"><span class="keyword">double</span> <span class="title">CalculateTex</span><span class="params">()</span></span>&#123;</span><br><span class="line">				<span class="function">Context <span class="title">context</span><span class="params">()</span></span>;</span><br><span class="line">				<span class="keyword">double</span> val = strategy-&gt;Calculate(context); <span class="comment">//多态调用</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>读书笔记</category>
        <category>《设计模式》</category>
        <category>组件协作模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>模板模式</title>
    <url>/OXygenPanda.github.io/2020/10/27/HugeFour/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/1.%E7%BB%84%E4%BB%B6%E5%8D%8F%E4%BD%9C%E6%A8%A1%E5%BC%8F_%E6%A8%A1%E6%9D%BF%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="组件协作模式"><a href="#组件协作模式" class="headerlink" title="组件协作模式"></a>组件协作模式</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>现代软件专业分工之后的第一个结果是“框架与应用程序的划分”，“组件协作”模式通过晚期绑定，来实现框架与应用程序之间的松耦合，是二者之间协作时常用的模式。</p>
<a id="more"></a>

<h2 id="动机"><a href="#动机" class="headerlink" title="动机"></a>动机</h2><p>在软件构建过程中，对于某一项任务，它常常有稳定的整体操作结构，但是各个子步骤却又很多改变的需求，或者由于固有的原因（比如框架与应用之间的关系）而无法和任务的整体结构同时实现。</p>
<p>如何在确定稳定操作结构的前提下，来灵活应对各个子步骤的变化或者晚期实现需求？</p>
<h1 id="模板模式-Template-Method"><a href="#模板模式-Template-Method" class="headerlink" title="模板模式 Template Method"></a>模板模式 Template Method</h1><h2 id="不好的设计"><a href="#不好的设计" class="headerlink" title="不好的设计"></a>不好的设计</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//程序库开发</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Library</span>&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">		<span class="function"><span class="keyword">void</span> <span class="title">step1</span><span class="params">()</span></span>&#123;...&#125;</span><br><span class="line">		<span class="function"><span class="keyword">void</span> <span class="title">step3</span><span class="params">()</span></span>&#123;...&#125;</span><br><span class="line">		<span class="function"><span class="keyword">void</span> <span class="title">step5</span><span class="params">()</span></span>&#123;...&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//应用开发</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Application</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">		<span class="function"><span class="keyword">bool</span> <span class="title">step2</span><span class="params">()</span></span>&#123;...&#125;</span><br><span class="line">		<span class="function"><span class="keyword">bool</span> <span class="title">step5</span><span class="params">()</span></span>&#123;...&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">		Library lib;</span><br><span class="line">		Application app;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//逻辑部分</span></span><br><span class="line">		lib.step1();</span><br><span class="line">		<span class="keyword">if</span>(app.step2())&#123;</span><br><span class="line">				lib.step3();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;++i)&#123;</span><br><span class="line">				app.step4();</span><br><span class="line">		&#125;</span><br><span class="line">		lib.step5();</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如此编码的话，做应用开发的程序员压力会很大，还需要完成逻辑部分。</p>
<h2 id="模板模式"><a href="#模板模式" class="headerlink" title="模板模式"></a>模板模式</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//程序库开发</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Library</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">		<span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123; <span class="comment">//稳定</span></span><br><span class="line">				step1();</span><br><span class="line">				<span class="keyword">if</span>(step2())&#123;</span><br><span class="line">						step3();</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;++i)&#123;</span><br><span class="line">						step4();</span><br><span class="line">				&#125;</span><br><span class="line">				step5();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">virtual</span> ~Library()&#123;&#125;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">		<span class="function"><span class="keyword">void</span> <span class="title">step1</span><span class="params">()</span></span>&#123;...&#125; <span class="comment">//稳定</span></span><br><span class="line">		<span class="function"><span class="keyword">void</span> <span class="title">step3</span><span class="params">()</span></span>&#123;...&#125; <span class="comment">//稳定</span></span><br><span class="line">		<span class="function"><span class="keyword">void</span> <span class="title">step5</span><span class="params">()</span></span>&#123;...&#125; <span class="comment">//稳定</span></span><br><span class="line">		<span class="function"><span class="keyword">virtual</span> <span class="keyword">bool</span> <span class="title">step2</span><span class="params">()</span> </span>= <span class="number">0</span>; <span class="comment">//变化</span></span><br><span class="line">		<span class="function"><span class="keyword">virtual</span> <span class="keyword">bool</span> <span class="title">step4</span><span class="params">()</span> </span>= <span class="number">0</span>; <span class="comment">//变化</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//应用开发</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Application</span> :</span> <span class="keyword">public</span> Library&#123;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">		<span class="function"><span class="keyword">virtual</span> <span class="keyword">bool</span> <span class="title">step2</span><span class="params">()</span></span>&#123;&#125; <span class="comment">//重写</span></span><br><span class="line">		<span class="function"><span class="keyword">virtual</span> <span class="keyword">bool</span> <span class="title">step4</span><span class="params">()</span></span>&#123;&#125; <span class="comment">//重写		</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">		Library * plib = <span class="keyword">new</span> Application();</span><br><span class="line">		plib-&gt;run();</span><br><span class="line">		<span class="keyword">delete</span> plib;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如此编码，通过继承实现运行时多态，把逻辑部分封装在父类中。</p>
]]></content>
      <categories>
        <category>读书笔记</category>
        <category>《设计模式》</category>
        <category>组件协作模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式初探</title>
    <url>/OXygenPanda.github.io/2020/10/27/HugeFour/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/0.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><p><a href="https://www.bilibili.com/video/BV1kW411P7KS?from=search&seid=5554003901737558997">课程 base 李建忠</a></p>
<blockquote>
<p>  每一个模式描述了一个在我们周围不断重复发生的问题，以及该问题的解决方案的核心。这样，你就能一次又一次地使用该方案而不必做重复劳动。—- Christopher Alexand</p>
</blockquote>
<a id="more"></a>

<h2 id="课程目标"><a href="#课程目标" class="headerlink" title="课程目标"></a>课程目标</h2><ul>
<li>理解松耦合设计思想</li>
<li>掌握面向对象设计原则</li>
<li>掌握重构技巧法改善设计</li>
<li>掌握GOF核心设计模式</li>
</ul>
<h2 id="书籍推荐"><a href="#书籍推荐" class="headerlink" title="书籍推荐"></a>书籍推荐</h2><p>《设计模式：可复用面向对象软件的基础》</p>
<blockquote>
<p>  程序编码属于底层思维</p>
<p>  设计属于抽象思维</p>
</blockquote>
<h2 id="如何解决复杂性"><a href="#如何解决复杂性" class="headerlink" title="如何解决复杂性"></a>如何解决复杂性</h2><ul>
<li>分解</li>
<li>抽象</li>
</ul>
<blockquote>
<p>  哲学层面</p>
</blockquote>
<h2 id="面向对象设计原则"><a href="#面向对象设计原则" class="headerlink" title="面向对象设计原则"></a>面向对象设计原则</h2><h3 id="对象是什么？"><a href="#对象是什么？" class="headerlink" title="对象是什么？"></a>对象是什么？</h3><p>语言层面：对象封装了代码和数据</p>
<p>规格层面：对象是一系列可被使用的公共接口</p>
<p>概念层面：对象是某种拥有责任的抽象</p>
<h3 id="八大设计原则"><a href="#八大设计原则" class="headerlink" title="八大设计原则"></a>八大设计原则</h3><ul>
<li><p>依赖倒置原则(DIP)</p>
<ul>
<li>高层模块（稳定）不应该依赖于低层模块（变化），二者都应该依赖于抽象（稳定）。</li>
<li>抽象（稳定）不应该依赖于实现细节（变化），实现细节应该依赖于抽象（稳定）。</li>
</ul>
<p>例如：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">mainForm -&gt; Line / Rect</span><br><span class="line">绘画类是高层的模块，但是线条或者矩形类是低层的模块，可能会有修改或者增加。因此不够稳定</span><br><span class="line"></span><br><span class="line">---&gt;</span><br><span class="line"></span><br><span class="line">mainForm -&gt; Shape(Abstruct) &lt;- [ Line / Rect ]  <span class="comment">// [] 隔离变化</span></span><br><span class="line">Shape是抽象类, mainForm 和 Shape 都不需要变化, 只需要修改增加对Shape的依赖类</span><br></pre></td></tr></table></figure>
</li>
<li><p>开放封闭原则(OCP)</p>
<ul>
<li>对扩展开放，对更改关闭。</li>
<li>类模块应该是可扩展的，但是不可修改。</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">增加新的功能时，考虑增加而不是修改</span><br></pre></td></tr></table></figure>
</li>
<li><p>单一职责原则(SRP)</p>
<ul>
<li>一个类应该仅有一个引起它变化的原因。</li>
<li>变化的方向隐含着类的责任。</li>
</ul>
</li>
<li><p>Liskov 替换原则(LSP)</p>
<ul>
<li>子类必须能够替换他们的基类(IS-A)。</li>
<li>继承表达类型抽象。</li>
</ul>
</li>
<li><p>接口隔离原则(ISP)</p>
<ul>
<li>不应该强迫客户程序依赖它们不用的方法。</li>
<li>接口应该小而完备。</li>
</ul>
</li>
<li><p>优先使用对象组合，而不是类继承</p>
<ul>
<li>类继承通常为”白箱复用”，对象组合通常为“黑箱复用”。</li>
<li>继承在某种程度上破坏了封装线，子类父类耦合度高。</li>
<li>而对象组合则只要求被组合的对象具有良好定义的接口，耦合度低。</li>
</ul>
</li>
<li><p>封装变化点</p>
<ul>
<li>使用封装来创建对象之间的分界层，让设计者可以在分界层的一侧进行修改，而不会对另一侧产生不良的影响，从而实现层次间的松耦合。</li>
</ul>
</li>
<li><p>针对接口编程，而不是针对实现编程</p>
<ul>
<li>不将变量类型声明为某个特定的具体类，而是声明为某个接口。</li>
<li>客户程序无需获知对象的具体类型，只需要知道对象所具有的接口。</li>
<li>减少系统中各部分的依赖关系，从而实现“高内聚，松耦合”的类型设计方案。</li>
</ul>
</li>
</ul>
<h3 id="将设计原则提升为设计经验"><a href="#将设计原则提升为设计经验" class="headerlink" title="将设计原则提升为设计经验"></a>将设计原则提升为设计经验</h3><ul>
<li><p>设计习语</p>
<p>Design Idioms 描述与特定编程语言相关的低层模式，技巧惯用法。</p>
</li>
<li><p>设计模式</p>
<p>Design Patterns 描述的是“类与相互通信的对象之间的组织关系”，包括他们的角色，职责，协作方式等方面。</p>
</li>
<li><p>架构模式</p>
<p>Architectural Patterns 描述系统中与基本结构组织关系密切的高层模式，包括子系统划分，职责，以及如何组织它们之间的关系规则。</p>
</li>
</ul>
<h2 id="GOF-23模式"><a href="#GOF-23模式" class="headerlink" title="GOF-23模式"></a>GOF-23模式</h2><ul>
<li>按照范围分类<ul>
<li>类模式处理类与子类的静态关系</li>
<li>对象模式处理对象间的动态关系</li>
</ul>
</li>
<li>按照目的分类<ul>
<li>创建型</li>
<li>结构型</li>
<li>行为型</li>
</ul>
</li>
<li>老师提出的分类方式<ul>
<li>组件协作<ul>
<li>Template Method</li>
<li>Strategy</li>
<li>Observer / Event</li>
</ul>
</li>
<li>单一职责<ul>
<li>Decorator</li>
<li>Bridge</li>
</ul>
</li>
<li>对象创建<ul>
<li>Factory Method</li>
<li>Abstract Factory</li>
<li>Prototype</li>
<li>Builder</li>
</ul>
</li>
<li>对象性能<ul>
<li>Singleton</li>
<li>Flyweight</li>
</ul>
</li>
<li>接口隔离<ul>
<li>Facade</li>
<li>Proxy</li>
<li>Mediator</li>
<li>Adapter</li>
</ul>
</li>
<li>状态变化<ul>
<li>Memento</li>
<li>State</li>
</ul>
</li>
<li>数据结构<ul>
<li>Composite</li>
<li>Iterator</li>
<li>Chain of Resposibility</li>
</ul>
</li>
<li>行为变化<ul>
<li>Command</li>
<li>Visitor</li>
</ul>
</li>
<li>领域问题<ul>
<li>Interpreter</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="重构"><a href="#重构" class="headerlink" title="重构"></a>重构</h2><p>静态 → 动态</p>
<p>早绑定 → 晚绑定</p>
<p>继承 → 组合</p>
<p>编译时依赖 → 运行时依赖</p>
<p>紧耦合 → 松耦合</p>
]]></content>
      <categories>
        <category>读书笔记</category>
        <category>《设计模式》</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>chapter 8 异常控制流</title>
    <url>/OXygenPanda.github.io/2020/10/27/HugeFour/OperatingSystem/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F/%E7%AC%AC%E5%85%AB%E7%AB%A0%20%E5%BC%82%E5%B8%B8%E6%8E%A7%E5%88%B6%E6%B5%81/</url>
    <content><![CDATA[<h1 id="异常控制流"><a href="#异常控制流" class="headerlink" title="异常控制流"></a>异常控制流</h1><p><strong>异常控制流(ECF : Exceptional Control Flow)</strong> ，是操作系统实现 I/O、进程、并发和虚拟内存的基本机制。</p>
<a id="more"></a>

<h1 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h1><h2 id="异常的知识"><a href="#异常的知识" class="headerlink" title="异常的知识"></a>异常的知识</h2><p><strong>异常</strong> 是异常控制流的一种形式，一部分由硬件实现，一部分由操作系统实现。</p>
<p>在处理器中，状态被编码为不同的位和信号，状态变化称为 <strong>事件(event)</strong> 。</p>
<p>在任何情况下，当处理器检测到事件的发生，它会通过一张叫做 <strong>异常表(exception table)</strong> 的跳转表，进行一个间接过程的调用(异常)，到一个专门设计用来处理这类事件的操作系统子程序(异常处理程序)。</p>
<p>发生异常后，会发生以下三种情况中的一种：</p>
<ol>
<li>处理程序将控制返回给当前指令 I_curr</li>
<li>处理程序将控制返回给下个指令 I_next</li>
<li>处理程序终止被中断的程序</li>
</ol>
<p>系统为每一种异常都分配了唯一的非负整数的异常号。</p>
<ol>
<li>一部分由处理器的设计者分配(x86-64 : 0-31)：被零除、缺页、内存访问违例、断点、算术运算溢出</li>
<li>一部分由操作系统内核的设计者分配(x86-64 : 32-255)：系统调用和来自外部的 IO 设备的信号</li>
</ol>
<h2 id="异常的分类"><a href="#异常的分类" class="headerlink" title="异常的分类"></a>异常的分类</h2><ul>
<li>中断<ul>
<li>收到中断信号→先执行完当前指令→执行中断处理程序→执行下一条指令</li>
</ul>
</li>
<li>陷阱<ul>
<li>系统调用，有一些指令只有内核模式才能调用。需要程序从用户模式陷入内核，才能进行调用。陷入内核的唯一方式：通过中断、故障或者陷入系统调用这样的异常</li>
</ul>
</li>
<li>故障<ul>
<li>经典示例：缺页异常。当指令引用了一个虚拟地址，与该地址相对应的物理页面不在内存中时，因此必须从磁盘中取出，所以发生了故障。因此，解决故障之后，返回到原来的指令重新执行。</li>
</ul>
</li>
<li>终止<ul>
<li>通常是硬件错误。</li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th>异常类型</th>
<th>原因</th>
<th>异步/同步</th>
<th>返回行为</th>
</tr>
</thead>
<tbody><tr>
<td>中断</td>
<td>来自IO设备的信号</td>
<td>异步</td>
<td>总是返回下一条指令</td>
</tr>
<tr>
<td>陷阱</td>
<td>有意的异常</td>
<td>同步</td>
<td>总是返回下一条指令</td>
</tr>
<tr>
<td>故障</td>
<td>潜在可恢复的错误</td>
<td>同步</td>
<td>总是返回当前指令</td>
</tr>
<tr>
<td>终止</td>
<td>不可恢复的错误</td>
<td>同步</td>
<td>不会返回</td>
</tr>
</tbody></table>
<h1 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h1><blockquote>
<p>  异常是允许操作系统内核提供进程概念的基本构造块。</p>
</blockquote>
<p><strong>进程</strong> 是一个执行中的程序的实例。系统中的每个程序都运行在某一个进程的上下文中。</p>
<p><strong>上下文</strong> 由程序正确运行所需的状态组成。包括：内存中的程序的代码和数据，它的栈、通用目的寄存器的内容、程序计数器、环境变量以及打开文件描述符的集合。</p>
<p>一个逻辑流的执行在时间上与另一个流重叠，称为并行流。多个流并发地执行，称为 <strong>并发</strong> 。</p>
<p>两个流并发地运行在 <strong>不同的处理器核或计算机上</strong> ，称为 <strong>并行</strong> 流。并行是并发的真子集。</p>
<p>一个进程和其他进程轮流运行，称为 <strong>多任务</strong> 。一个进程执行它的控制流的一部分的每一时间段叫做 <strong>时间片</strong> 。</p>
<p>在进程执行的某些时刻，内核可以决定抢占当前进程，并重新开始一个先前被抢占了的进程，称为 <strong>调度</strong> 。由内核的调度器的代码处理。</p>
<p><strong>上下文切换</strong></p>
<ol>
<li>保存当前进程的上下文；</li>
<li>恢复某个先前被抢占的进程被保存的上下文；</li>
<li>将控制权传递给这个新恢复的进程。</li>
</ol>
<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h4 id="fork"><a href="#fork" class="headerlink" title="fork()"></a>fork()</h4><h4 id="waitpid"><a href="#waitpid" class="headerlink" title="waitpid()"></a>waitpid()</h4><h4 id="execve"><a href="#execve" class="headerlink" title="execve()"></a>execve()</h4><p><code>execve()</code> 函数的目的是在一个程序中打开另一个程序，如果成功就不再返回，如果失败返回 -1。</p>
<p>以下为一个示例：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//file : main.cpp</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">char</span> filename[] = <span class="string">&quot;test&quot;</span>;</span><br><span class="line">		<span class="keyword">char</span> *argv[] = &#123;<span class="string">&quot;./&quot;</span>,<span class="literal">NULL</span>&#125;;</span><br><span class="line">		<span class="keyword">if</span>(execve(filename, argv,<span class="literal">NULL</span>) == <span class="number">-1</span>)&#123;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;execve error&quot;</span> &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">			<span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">puts</span>(<span class="string">&quot;shouldn&#x27;t get here&quot;</span>);</span><br><span class="line">		<span class="built_in">exit</span>(EXIT_SUCCESS);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//file : test.cpp</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;调用成功&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> g++ -o test.cpp <span class="built_in">test</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> g++ -o amin.cpp main</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> ./main</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> 调用成功</span></span><br></pre></td></tr></table></figure>

<h1 id="信号"><a href="#信号" class="headerlink" title="信号"></a>信号</h1><h2 id="函数-1"><a href="#函数-1" class="headerlink" title="函数"></a>函数</h2><h3 id="signal"><a href="#signal" class="headerlink" title="signal()"></a>signal()</h3><p><code>singal()</code> 函数可以修改进程接收信号的行为，但是无法修改接收到 <code>SIGSTOP</code> 和 <code>SIGKILL</code> 的行为。</p>
<p>以下是具体用法：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;signal&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span> <span class="params">(*<span class="keyword">sighandler_t</span>)</span><span class="params">(<span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">sighandler_t</span> <span class="title">signal</span><span class="params">(<span class="keyword">int</span> signum, <span class="keyword">sighandler_t</span> handler)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">** 如果 handler 是 SIG_IGN, 忽略 signum 信号</span></span><br><span class="line"><span class="comment">** 如果 handler 是 SIG_DFL, 恢复 signum 信号为默认行为</span></span><br><span class="line"><span class="comment">** 否则,handler 指向用户自定程序:</span></span><br><span class="line"><span class="comment">			 改变了默认行为     设置信号处理程序</span></span><br><span class="line"><span class="comment">			 调用信号处理程序   捕获信号</span></span><br><span class="line"><span class="comment">			 执行信号处理程序   处理信号</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>读书笔记</category>
        <category>《深入理解计算机系统》</category>
        <category>第八章 异常控制流</category>
      </categories>
      <tags>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>类似于vector的数据结构实现</title>
    <url>/OXygenPanda.github.io/2020/10/26/STL/STL-vector%20%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<h1 id="类似于vector的数据结构实现"><a href="#类似于vector的数据结构实现" class="headerlink" title="类似于vector的数据结构实现"></a>类似于vector的数据结构实现</h1><a id="more"></a>

<h2 id="预期实现的功能"><a href="#预期实现的功能" class="headerlink" title="预期实现的功能"></a>预期实现的功能</h2><ul>
<li>可以对内置类型以及自定义数据类型进行存储</li>
<li>将数组中的数据存储到堆区</li>
<li>构造函数<ul>
<li>空构造</li>
<li>传入容量</li>
<li>传入容量和初始化值</li>
</ul>
</li>
<li>提供对应的拷贝构造函数和拷贝赋值函数防止浅拷贝</li>
<li>提供尾插法核尾删法</li>
<li>可以通过下标访问数组元素</li>
<li>可以获取当前的容量和大小</li>
</ul>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyArray</span>&#123;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">typedef</span> _Tp ValueType;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> _size; <span class="comment">//大小</span></span><br><span class="line">    <span class="keyword">int</span> _capacity; <span class="comment">//容量</span></span><br><span class="line">    ValueType *address; <span class="comment">//管理地址</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//实际上vector是管理的三个迭代器</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造函数</span></span><br><span class="line">    MyArray()&#123;</span><br><span class="line">        <span class="comment">//全部初始化为0</span></span><br><span class="line">        _size  = <span class="number">0</span>;</span><br><span class="line">        _capacity = <span class="number">0</span>;</span><br><span class="line">        address = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    MyArray(<span class="keyword">int</span> capacity)&#123;</span><br><span class="line">        <span class="comment">//容量设置好以及分配好对应的堆内存</span></span><br><span class="line">        _size = <span class="number">0</span>;</span><br><span class="line">        _capacity = capacity;</span><br><span class="line">        address = <span class="keyword">new</span> ValueType[capacity];</span><br><span class="line">    &#125;</span><br><span class="line">    MyArray(<span class="keyword">int</span> capacity,ValueType val)&#123;</span><br><span class="line">        <span class="comment">//容量和大小都设置好,以及分配对应的堆内存并进行初始化</span></span><br><span class="line">        _size = capacity;</span><br><span class="line">        _capacity = capacity;</span><br><span class="line">        address = <span class="keyword">new</span> ValueType[capacity];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; capacity; ++i) &#123;</span><br><span class="line">            *(address + i) = val;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//拷贝构造</span></span><br><span class="line">    MyArray(<span class="keyword">const</span> MyArray &amp;arr) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;_size = arr._size;</span><br><span class="line">        <span class="keyword">this</span>-&gt;_capacity = arr._capacity;</span><br><span class="line">        <span class="keyword">this</span>-&gt;address = <span class="keyword">new</span> ValueType[<span class="keyword">this</span>-&gt;_capacity]; <span class="comment">//深拷贝</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//拷贝赋值</span></span><br><span class="line">    MyArray &amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> MyArray &amp; arr)&#123;</span><br><span class="line">        <span class="comment">//检查原本是否存在管理的内存</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>-&gt;address != <span class="literal">nullptr</span>)&#123;</span><br><span class="line">            <span class="keyword">this</span>-&gt;_capacity = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">this</span>-&gt;_size = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">delete</span> [] <span class="keyword">this</span>-&gt;address;</span><br><span class="line">            <span class="keyword">this</span>-&gt;address = <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>-&gt;_size = arr._size;</span><br><span class="line">        <span class="keyword">this</span>-&gt;_capacity = arr._capacity;</span><br><span class="line">        <span class="keyword">this</span>-&gt;address = <span class="keyword">new</span> ValueType[<span class="keyword">this</span>-&gt;_capacity]; <span class="comment">//深拷贝</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;_size; ++i) &#123;</span><br><span class="line">            <span class="keyword">this</span>-&gt;address[i] = arr.address[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//析构函数</span></span><br><span class="line">    ~MyArray() &#123;</span><br><span class="line">        <span class="keyword">if</span>(address != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            <span class="keyword">delete</span>[] address;</span><br><span class="line">            <span class="keyword">this</span>-&gt;address = <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//取值</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> _size;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">capacity</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> _capacity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//[]重载</span></span><br><span class="line">    ValueType &amp; <span class="keyword">operator</span>[](<span class="keyword">int</span> n)&#123; <span class="comment">//可以作为左值</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>-&gt;address[n];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">adjust_capacity</span><span class="params">(<span class="keyword">const</span> ValueType &amp; obj)</span></span>&#123; <span class="comment">//内存扩容</span></span><br><span class="line">        <span class="keyword">if</span>(_capacity == _size)&#123;</span><br><span class="line">            <span class="comment">//申请2倍内存释放原本内存进行拷贝</span></span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;调整&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">            _capacity = _capacity == <span class="number">0</span> ? <span class="number">1</span> : <span class="number">2</span> * _capacity;</span><br><span class="line">            ValueType * new_address = <span class="keyword">new</span> ValueType[_capacity];</span><br><span class="line">            <span class="comment">// 放入当前尾部插入的元素 还没有考虑 vector.insert()</span></span><br><span class="line">            new_address[_size] = obj;</span><br><span class="line">            _size ++;</span><br><span class="line">            <span class="keyword">delete</span> [] address;</span><br><span class="line">            address = new_address;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//尾插尾删</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">push_back</span><span class="params">(<span class="keyword">const</span> ValueType &amp; obj)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(_capacity == _size)&#123;</span><br><span class="line">            adjust_capacity(obj);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>-&gt;address[_size] = obj;</span><br><span class="line">        <span class="keyword">this</span>-&gt;_size++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pop_back</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(_size == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>-&gt;_size --;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>C++</category>
        <category>STL</category>
        <category>容器</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>STL</tag>
        <tag>vector</tag>
      </tags>
  </entry>
  <entry>
    <title>TCP通信[未完成]</title>
    <url>/OXygenPanda.github.io/2020/10/26/HugeFour/Network/TCP/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>传输控制协议( TCP : Transmission Control Protocol )，是一种面向连接的，可靠的传输层控制协议。</p>
<a id="more"></a>

<h2 id="面向连接"><a href="#面向连接" class="headerlink" title="面向连接"></a>面向连接</h2><p>一般，客户端发送给服务端的一个数据包携带的数据最大为1460字节。是因为，以太网帧结构数据长度是1500字节，其中包含20字节的IP头部以及20字节的TCP头部，所以数据能够携带1460字节。</p>
<h2 id="三次握手"><a href="#三次握手" class="headerlink" title="三次握手"></a>三次握手</h2><p>三次握手，由内核完成。反应在程序中，是由客户端程序的 connect() 开始，由 服务端程序的 accept() 返回结束。</p>
<p>示例</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">客户端发送：SYN <span class="number">1000</span>(<span class="number">0</span>) win <span class="number">4096</span> &lt;mss <span class="number">1460</span>&gt;</span><br><span class="line">服务端发送：SYN <span class="number">8000</span>(<span class="number">0</span>) win <span class="number">6144</span> ACK <span class="number">1001</span> &lt;mss <span class="number">1024</span>&gt;  <span class="comment">//ACK 1001 是接收到的序号+数据字节(SYN标志位也得占1字节)</span></span><br><span class="line">客户端发送：ACK <span class="number">8001</span>    win <span class="number">4096</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">** (0)        : 表示携带数据为0字节</span></span><br><span class="line"><span class="comment">** win 4096   : 发送端滑动窗口缓存4096字节</span></span><br><span class="line"><span class="comment">** &lt;mss 1460&gt; : 表示携带数据最大字节数为1460字节</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p>总结</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">主动发起连接请求端：发送SYN标志位，请求建立连接。携带数据包包号，数据字节数(<span class="number">0</span>)，滑动窗口大小</span><br><span class="line">被动接受连接请求端：发送ACK标志位，同时携带SYN请求标志位。携带序号，确认序号，数据字节数(<span class="number">0</span>)，滑动窗口大小</span><br><span class="line">主动发起连接请求段：发送ACK标志位，应答服务器连接请求。携带确认序号。</span><br></pre></td></tr></table></figure>

<p>要点</p>
<p>为什么不是二次握手？</p>
<ol>
<li>彼此确定收发能力</li>
</ol>
<ul>
<li>第一次客户端发送请求，服务端接收请求：服务端知道了客户端有发送的能力。</li>
<li>第二次服务端发送请求，客户端接收请求：客户端知道了服务端有收发的能力。</li>
<li>此时，服务端不知道客户端是不是有接收的能力。因此需要客户端再次告知服务端。</li>
</ul>
<ol start="2">
<li>避免两次连接</li>
</ol>
<ul>
<li>客户端发送的连接请求如果滞留在网络中，等到超时重传，会再次发起连接请求，而服务器接收到两个连接请求会打开两个连接。因此，需要三次握手。</li>
</ul>
<p>第三次客户端发送ACK时，可以携带数据</p>
<ul>
<li>因为此时，客户端服务端都知道双方都有收发数据的能力，所以可以开始通信。</li>
</ul>
<h2 id="四次挥手"><a href="#四次挥手" class="headerlink" title="四次挥手"></a>四次挥手</h2><p>四次挥手，目的是断开客户端到服务端的全双工链路。断开一端称为半关闭，会关闭一端的套接字的一个缓存区。</p>
<p>示例</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">客户端发送：FIN <span class="number">501</span>(<span class="number">0</span>)  ACK <span class="number">701</span> </span><br><span class="line">服务端发送：ACK <span class="number">502</span>             ---- 半关闭</span><br><span class="line">服务端发送：FIN <span class="number">701</span>(<span class="number">0</span>)  ACK <span class="number">502</span></span><br><span class="line">客户端发送：ACK <span class="number">702</span>             ---- 完全断开</span><br></pre></td></tr></table></figure>

<p>总结</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">主动关闭连接请求端：发送FIN标志位。</span><br><span class="line">被动关闭连接请求端：应答ACK标志位。 ———— 半关闭完成</span><br><span class="line">被动关闭连接请求端：发送FIN标志位。</span><br><span class="line">主动关闭连接请求端：应答ACK标志位。 —————连接全部关闭</span><br></pre></td></tr></table></figure>

<p>客户端接收到服务器的应答之后，进入半关闭状态，不能发送数据给服务器，而服务器会在发送完剩余数据后，发起关闭请求，客户端应答服务器后需要等待 2MSL(最大报文存活时间)后释放连接。原因如下：</p>
<ul>
<li>如果客户端的应答数据包丢失，那么服务器会再次发送断开请求。</li>
<li>等待一段时间，使本次连接过程中产生的数据包在网络中消失。</li>
</ul>
<h2 id="可靠传输"><a href="#可靠传输" class="headerlink" title="可靠传输"></a>可靠传输</h2><h3 id="超时重传"><a href="#超时重传" class="headerlink" title="超时重传"></a>超时重传</h3><p>TCP使用超时重传来实现可靠传输：如果一个已经发送的报文段在超时时间内没有收到确认，那么就重传这个报文段。</p>
<p>一个报文段从发送到接收到确定所经历的时间称为往返时间RTT(加权平均RTTs)。超时时间 RTO 应该略大于 RTTs 。TCP使用的超时时间计算是 : RTO = RTTs + 4 * RTTd 。RTTd : 偏差的加权平均值。</p>
<h3 id="滑动窗口"><a href="#滑动窗口" class="headerlink" title="滑动窗口"></a>滑动窗口</h3><p>滑动窗口是一个缓存区，用于暂时存放字节流。发送方和接收方各有一个窗口，接收方通过TCP报文段中的窗口字段告诉发送方自己的窗口大小，发送方根据这个值和其他信息来设置自己的窗口大小。</p>
<p>对于发送方来说，当窗口靠左侧的数据包已经成功发送并被确认后，窗口向右滑动直到某一个未发送或者未确认的字节位置。</p>
<p>对于接收方来说，当窗口靠左侧的数据包已经收到，窗口向右滑动直到某一个未接收到的字节。</p>
<h3 id="流量控制"><a href="#流量控制" class="headerlink" title="流量控制"></a>流量控制</h3><p>流量控制是为了控制发送方发送速率，保证接收方来得及接收。</p>
<p>接收方发送的确认报文中的窗口字段可以用来控制发送方窗口大小，从而影响发送方的发送速率。将窗口字段设置为 0，则发送方不能发送数据。</p>
<h3 id="拥塞控制"><a href="#拥塞控制" class="headerlink" title="拥塞控制"></a>拥塞控制</h3><p>如果网络出现拥塞，发送方发送的数据包丢失，发送方重传导致网络难以恢复。因此要进行一定的拥塞控制使得发送方降低发送速率。发送方需要维护一个拥塞窗口（cwnd）状态变量：决定发送方能发送多少数据。</p>
<h4 id="慢开始与拥塞避免"><a href="#慢开始与拥塞避免" class="headerlink" title="慢开始与拥塞避免"></a>慢开始与拥塞避免</h4><img src="https://i.loli.net/2020/10/30/8s2w3yMNVT6RL1k.png">

<p>发送的最初执行慢开始，令 cwnd = 1，发送方只能发送 1 个报文段；当收到确认后，将 cwnd 加倍，因此之后发送方能够发送的报文段数量为：2、4、8 …</p>
<p>注意到慢开始每个轮次都将 cwnd 加倍，这样会让 cwnd 增长速度非常快，从而使得发送方发送的速度增长速度过快，网络拥塞的可能性也就更高。设置一个慢开始门限 ssthresh，当 cwnd &gt;= ssthresh 时，进入拥塞避免，每个轮次只将 cwnd 加 1。</p>
<p>如果出现了超时，则令 ssthresh = cwnd / 2，然后重新执行慢开始。</p>
<h4 id="快速重传与快速恢复"><a href="#快速重传与快速恢复" class="headerlink" title="快速重传与快速恢复"></a>快速重传与快速恢复</h4><p>在接收方，要求每次接收到报文段都应该对最后一个已收到的有序报文段进行确认。例如已经接收到 M1 和 M2，此时收到 M4，应当发送对 M2 的确认。</p>
<p>在发送方，如果收到三个重复确认，那么可以知道下一个报文段丢失，此时执行快重传，立即重传下一个报文段。例如收到三个 M2，则 M3 丢失，立即重传 M3。</p>
<p>在这种情况下，只是丢失个别报文段，而不是网络拥塞。因此执行快恢复，令 ssthresh = cwnd / 2 ，cwnd = ssthresh，注意到此时直接进入拥塞避免。</p>
<p>慢开始和快恢复的快慢指的是 cwnd 的设定值，而不是 cwnd 的增长速率。慢开始 cwnd 设定为 1，而快恢复 cwnd 设定为 ssthresh。</p>
]]></content>
      <categories>
        <category>网络通信</category>
        <category>传输层</category>
        <category>TCP</category>
      </categories>
      <tags>
        <tag>tcp</tag>
      </tags>
  </entry>
  <entry>
    <title>剑指 Offer 09. 用两个栈实现队列</title>
    <url>/OXygenPanda.github.io/2020/10/19/leetcode/offer/%E5%89%91%E6%8C%87Offer%2009/</url>
    <content><![CDATA[<h2 id="剑指-Offer-09-用两个栈实现队列"><a href="#剑指-Offer-09-用两个栈实现队列" class="headerlink" title="剑指 Offer 09. 用两个栈实现队列"></a>剑指 Offer 09. 用两个栈实现队列</h2><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p><a class="btn" href="https://leetcode-cn.com/problems/yong-liang-ge-zhan-shi-xian-dui-lie-lcof/" title="leetcode链接">剑指 Offer 09. 用两个栈实现队列</a></p>
<p><strong>难度:</strong><font color="orange">中等</font></p>
<p><strong>描述</strong></p>
<p>用两个栈实现一个队列。队列的声明如下，请实现它的两个函数 <code>appendTail</code> 和 <code>deleteHead</code> ，分别完成在队列尾部插入整数和在队列头部删除整数的功能。(若队列中没有元素，<code>deleteHead</code> 操作返回 -1 )</p>
<p><strong>示例</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">输入：</span><br><span class="line">[<span class="string">&quot;CQueue&quot;</span>,<span class="string">&quot;appendTail&quot;</span>,<span class="string">&quot;deleteHead&quot;</span>,<span class="string">&quot;deleteHead&quot;</span>]</span><br><span class="line">[[],[<span class="number">3</span>],[],[]]</span><br><span class="line">输出：[null,null,<span class="number">3</span>,<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line">输入：</span><br><span class="line">[<span class="string">&quot;CQueue&quot;</span>,<span class="string">&quot;deleteHead&quot;</span>,<span class="string">&quot;appendTail&quot;</span>,<span class="string">&quot;appendTail&quot;</span>,<span class="string">&quot;deleteHead&quot;</span>,<span class="string">&quot;deleteHead&quot;</span>]</span><br><span class="line">[[],[],[<span class="number">5</span>],[<span class="number">2</span>],[],[]]</span><br><span class="line">输出：[null,<span class="number">-1</span>,null,null,<span class="number">5</span>,<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">限制：</span><br><span class="line"><span class="number">1</span> &lt;= values &lt;= <span class="number">10000</span></span><br><span class="line">最多会对 appendTail、deleteHead 进行 <span class="number">10000</span> 次调用</span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">API设计 :</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CQueue</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    CQueue() &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">appendTail</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">deleteHead</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>因为栈这一种线性结构的特性是后进先出，而队列这一种线性结构的特性是先进先出，它使用两个栈就可以通过两次后进先出实现我们想要的先进先出的特性。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CQueue</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; s_in; <span class="comment">// 数据先经过 s_in 栈</span></span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; s_out; <span class="comment">// 再经过 s_out 出栈</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    CQueue() &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">appendTail</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">        s_in.push(value);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">deleteHead</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(s_in.empty() &amp;&amp; s_out.empty()) <span class="comment">//都空说明没有元素</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(s_out.empty())&#123; <span class="comment">// s_out 空 s_in 不空</span></span><br><span class="line">            <span class="keyword">while</span>(!s_in.empty())&#123; <span class="comment">//全部转移</span></span><br><span class="line">                s_out.push(s_in.top());</span><br><span class="line">                s_in.pop();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 经过 s_out 出栈</span></span><br><span class="line">        <span class="keyword">int</span> ans = s_out.top();</span><br><span class="line">        s_out.pop();</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Leetcode</category>
        <category>剑指 Offer 专题</category>
      </categories>
      <tags>
        <tag>栈</tag>
        <tag>Leetcode</tag>
        <tag>队列</tag>
      </tags>
  </entry>
  <entry>
    <title>前缀/中缀/后缀表达式的转换/计算/构建二叉树[未完成]</title>
    <url>/OXygenPanda.github.io/2020/10/18/CodingSkills/%E5%89%8D%E7%BC%80%E4%B8%AD%E7%BC%80%E5%90%8E%E7%BC%80%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%BD%AC%E6%8D%A2%E6%B1%82%E5%80%BC/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p align="center">
<a href="https://oxygenpanda.github.io/" target="_blank"><img alt="Website" src="https://img.shields.io/badge/博客-劳振煜的知識倉儲-faf2f2.svg?style=flat-square&logo=Blogger"></a>
<a href="https://www.github.com/OXygenPanda" target="_blank"><img src="https://img.shields.io/badge/Github-@劳振煜-f3e1e1.svg?style=flat-square&logo=GitHub"></a>
<a href="https://i.loli.net/2020/11/11/SBZ2mFJGKLjUtTO.jpg" target="_blank"><img src="https://img.shields.io/badge/微信-@OXygen-f1d1d1.svg?style=flat-square&logo=WeChat"></a>

</p><p>我们从小学至今，接触到最多的表达式就是中缀表达式，形如 : <code>(5+(3*2)-6/2)</code> 作用的运算符落在数字两边。但是这一个表达式作为字符串输入到计算机中，计算机可不太喜欢这样的表达式，它顺序遍历的时候，由于运算符优先级不同，难以计算。因此，出现了前缀表达式和后缀表达式，他们两者的特点是不携带括号，顺序遍历时，明确了运算的优先级。前缀和后缀表达式都可以由中缀表达式转换而来。</p>
<p>本篇文章会带你学习如何把中缀表达式转换成前缀 / 后缀表达式，如果根据前缀 / 后缀表达式计算表达式的值，最后由表达式来构建出一棵表达式二叉树。</p>
<a id="more"></a>

<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><h3 id="前缀表达式"><a href="#前缀表达式" class="headerlink" title="前缀表达式"></a>前缀表达式</h3><p>前缀表达式是一种没有括号的算术表达式，与中缀表达式不同的是，其将运算符写在前面，操作数写在后面。</p>
<blockquote>
<p>  为纪念其发明者波兰数学家Jan Lukasiewicz，前缀表达式也称为“波兰式”。</p>
</blockquote>
<p>例如，<code>- 1 + 2 3</code>，它等价于<code>1 - (2 + 3)</code>。</p>
<h3 id="中缀表达式"><a href="#中缀表达式" class="headerlink" title="中缀表达式"></a>中缀表达式</h3><p>中缀表达式是一个通用的算术或逻辑公式表示方法， 操作符是以中缀形式处于操作数的中间。</p>
<p>例如：<code>3 + 4</code>。</p>
<h3 id="后缀表达式"><a href="#后缀表达式" class="headerlink" title="后缀表达式"></a>后缀表达式</h3><p>后缀表达式与前缀表达式类似的是一种没有括号的算术表达式，不同的是运算符写在后面，操作数写在前面。</p>
<blockquote>
<p>  后缀表达式也称为“逆波兰式”。</p>
</blockquote>
<p>例如<code>+ 2 3</code>，它等价于 <code>2 + 3</code>。</p>
<h3 id="表达式二叉树"><a href="#表达式二叉树" class="headerlink" title="表达式二叉树"></a>表达式二叉树</h3><p>算数表达式是分层的递归结构，一个运算符作用于相应的运算对象，其运算对象又可以是任意复杂的表达式。树的递归结构正好用来表示这种表达式。下面只讨论二元表达式。<br>二元表达式可以很自然的联系到二叉树：以基本运算对象作为叶节点中的数据；以运算符作为非叶节点中的数据，其两棵子树是它的运算对象，子树可以是基本运算对象，也可以是复杂表达式。如图是一个表达式树。</p>
<img src="https://i.loli.net/2020/10/21/WXc2r8deZBVKYCR.jpg">

<p>留意一下颜色和遍历顺序和表达式类型的对应关系。</p>
<ul>
<li>表达式树的先序遍历：前缀表达式</li>
<li>表达式树的中序遍历：中缀表达式</li>
<li>表达式树的后序遍历：后缀表达式</li>
</ul>
<p><font color="\#87CEEB">运算数</font> ：是二叉树的叶子节点</p>
<p><font color="#EE6363">运算符</font>：是二叉树的非叶子节点</p>
<h2 id="转换"><a href="#转换" class="headerlink" title="转换"></a>转换</h2><h3 id="中缀表达式转前缀表达式"><a href="#中缀表达式转前缀表达式" class="headerlink" title="中缀表达式转前缀表达式"></a>中缀表达式转前缀表达式</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; <span class="title">prefix</span><span class="params">(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; &amp; mid_str)</span></span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 中缀表达式转换成前缀表达式</span></span><br><span class="line"><span class="comment">     * 采用 vector &lt; string &gt; 的存储方式存储</span></span><br><span class="line"><span class="comment">     * 运算符占用一字符串, 多位整数占用一字符串</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; pre;</span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="built_in">string</span>&gt; op;</span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="built_in">string</span>&gt; tmp; <span class="comment">// 用于最后转置所有字符串顺序</span></span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt; priority;</span><br><span class="line">    priority[<span class="string">&quot;+&quot;</span>] = <span class="number">0</span>;</span><br><span class="line">    priority[<span class="string">&quot;-&quot;</span>] = <span class="number">0</span>;</span><br><span class="line">    priority[<span class="string">&quot;*&quot;</span>] = <span class="number">1</span>;</span><br><span class="line">    priority[<span class="string">&quot;/&quot;</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = mid_str.size() - <span class="number">1</span> ; i &gt;= <span class="number">0</span> ; i -- )&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">isdigit</span>(mid_str[i][<span class="number">0</span>]) || <span class="built_in">isalpha</span>(mid_str[i][<span class="number">0</span>]))&#123;</span><br><span class="line">            tmp.push(mid_str[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (mid_str[i] == <span class="string">&quot;)&quot;</span>)&#123;</span><br><span class="line">            op.push(<span class="string">&quot;)&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(mid_str[i] == <span class="string">&quot;(&quot;</span>)&#123;</span><br><span class="line">            <span class="keyword">while</span>(op.top() != <span class="string">&quot;)&quot;</span>)&#123;</span><br><span class="line">                tmp.push(op.top());</span><br><span class="line">                op.pop();</span><br><span class="line">            &#125;</span><br><span class="line">            op.pop(); <span class="comment">//弹出 &quot;)&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (mid_str[i] == <span class="string">&quot;+&quot;</span> || mid_str[i] == <span class="string">&quot;-&quot;</span> || mid_str[i] == <span class="string">&quot;*&quot;</span> || mid_str[i] == <span class="string">&quot;/&quot;</span>) &#123;</span><br><span class="line">            <span class="keyword">while</span>(!op.empty() &amp;&amp; op.top() != <span class="string">&quot;)&quot;</span> &amp;&amp; priority[mid_str[i]] &lt;= priority[op.top()])&#123;</span><br><span class="line">                tmp.push(op.top());</span><br><span class="line">                op.pop();</span><br><span class="line">            &#125;</span><br><span class="line">            op.push(mid_str[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(!op.empty())&#123;</span><br><span class="line">        tmp.push(op.top());</span><br><span class="line">        op.pop();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(!tmp.empty())&#123;</span><br><span class="line">        pre.push_back(tmp.top());</span><br><span class="line">        tmp.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pre;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="中缀表达式转后缀表达式"><a href="#中缀表达式转后缀表达式" class="headerlink" title="中缀表达式转后缀表达式"></a>中缀表达式转后缀表达式</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; <span class="title">postfix</span><span class="params">(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; &amp;mid_str)</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 中缀表达式转换成后缀表达式</span></span><br><span class="line"><span class="comment">     * 采用 vector &lt; string &gt; 的存储方式存储</span></span><br><span class="line"><span class="comment">     * 运算符占用一字符串, 多位整数占用一字符串</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;post;</span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="built_in">string</span>&gt; op;</span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt; priority;</span><br><span class="line">    priority[<span class="string">&quot;+&quot;</span>] = <span class="number">0</span>;</span><br><span class="line">    priority[<span class="string">&quot;-&quot;</span>] = <span class="number">0</span>;</span><br><span class="line">    priority[<span class="string">&quot;*&quot;</span>] = <span class="number">1</span>;</span><br><span class="line">    priority[<span class="string">&quot;/&quot;</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mid_str.size(); ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">isdigit</span>(mid_str[i][<span class="number">0</span>]) || <span class="built_in">isalpha</span>(mid_str[i][<span class="number">0</span>]))&#123;</span><br><span class="line">            post.push_back(mid_str[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (mid_str[i] == <span class="string">&quot;(&quot;</span>)&#123;</span><br><span class="line">            op.push(<span class="string">&quot;(&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(mid_str[i] == <span class="string">&quot;)&quot;</span>)&#123;</span><br><span class="line">            <span class="keyword">while</span>(op.top() != <span class="string">&quot;(&quot;</span>)&#123;</span><br><span class="line">                post.push_back(op.top());</span><br><span class="line">                op.pop();</span><br><span class="line">            &#125;</span><br><span class="line">            op.pop(); <span class="comment">//弹出 &quot;(&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (mid_str[i] == <span class="string">&quot;+&quot;</span> || mid_str[i] == <span class="string">&quot;-&quot;</span> || mid_str[i] == <span class="string">&quot;*&quot;</span> || mid_str[i] == <span class="string">&quot;/&quot;</span>) &#123;</span><br><span class="line">            <span class="keyword">while</span>(!op.empty() &amp;&amp; op.top() != <span class="string">&quot;(&quot;</span> &amp;&amp; priority[mid_str[i]] &lt;= priority[op.top()])&#123;</span><br><span class="line">                post.push_back(op.top());</span><br><span class="line">                op.pop();</span><br><span class="line">            &#125;</span><br><span class="line">            op.push(mid_str[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(!op.empty())&#123;</span><br><span class="line">        post.push_back(op.top());</span><br><span class="line">        op.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> post;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="测试部分"><a href="#测试部分" class="headerlink" title="测试部分"></a>测试部分</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//    vector&lt;string&gt; mid(&#123;&quot;2&quot;,&quot;+&quot;,&quot;9&quot;,&quot;/&quot;,&quot;3&quot;,&quot;-&quot;,&quot;5&quot;&#125;);  // 2 + 9 / 3 - 5</span></span><br><span class="line"><span class="comment">//    vector&lt;string&gt; mid(&#123;&quot;a&quot;,&quot;*&quot;,&quot;(&quot;,&quot;b&quot;,&quot;+&quot;,&quot;c&quot;,&quot;)&quot;,&quot;/&quot;,&quot;d&quot;&#125;);  //  a * (b + c) / d</span></span><br><span class="line"><span class="comment">//    vector&lt;string&gt; mid(&#123;&quot;2&quot;,&quot;*&quot;,&quot;(&quot;,&quot;9&quot;,&quot;+&quot;,&quot;6&quot;,&quot;/&quot;,&quot;3&quot;,&quot;-&quot;,&quot;5&quot;,&quot;)&quot;,&quot;+&quot;,&quot;4&quot;&#125;);  // 2 * (9 + 6 / 3 - 5) + 4</span></span><br><span class="line"><span class="comment">//    vector&lt;string&gt; mid(&#123;&quot;a&quot;,&quot;+&quot;,&quot;b&quot;,&quot;*&quot;,&quot;c&quot;,&quot;-&quot;,&quot;(&quot;,&quot;d&quot;,&quot;+&quot;,&quot;e&quot;,&quot;)&quot;&#125;);  // a + b * c - (d + e)</span></span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; <span class="title">mid</span><span class="params">(&#123;<span class="string">&quot;(&quot;</span>,<span class="string">&quot;3&quot;</span>,<span class="string">&quot;+&quot;</span>,<span class="string">&quot;4&quot;</span>,<span class="string">&quot;)&quot;</span>,<span class="string">&quot;*&quot;</span>,<span class="string">&quot;5&quot;</span>,<span class="string">&quot;-&quot;</span>,<span class="string">&quot;6&quot;</span>&#125;)</span></span>;  <span class="comment">//(3 + 4) * 5 - 6</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; post = postfix(mid);</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; pre = prefix(mid);</span><br></pre></td></tr></table></figure>



<h2 id="计算"><a href="#计算" class="headerlink" title="计算"></a>计算</h2><h3 id="前缀表达式计算"><a href="#前缀表达式计算" class="headerlink" title="前缀表达式计算"></a>前缀表达式计算</h3><h3 id="后缀表达式计算"><a href="#后缀表达式计算" class="headerlink" title="后缀表达式计算"></a>后缀表达式计算</h3><p><a class="btn" href="https://leetcode-cn.com/problems/evaluate-reverse-polish-notation/" title="leetcode链接">后缀表达式求值</a></p>
<h2 id="构建二叉树"><a href="#构建二叉树" class="headerlink" title="构建二叉树"></a>构建二叉树</h2><h3 id="前缀和中缀表达式构建二叉树"><a href="#前缀和中缀表达式构建二叉树" class="headerlink" title="前缀和中缀表达式构建二叉树"></a>前缀和中缀表达式构建二叉树</h3><h3 id="后缀和中缀表达式构建二叉树"><a href="#后缀和中缀表达式构建二叉树" class="headerlink" title="后缀和中缀表达式构建二叉树"></a>后缀和中缀表达式构建二叉树</h3>]]></content>
      <categories>
        <category>数据结构</category>
        <category>栈</category>
      </categories>
      <tags>
        <tag>二叉树</tag>
        <tag>数据结构</tag>
        <tag>栈</tag>
      </tags>
  </entry>
  <entry>
    <title>剑指 Offer 07. 重建二叉树</title>
    <url>/OXygenPanda.github.io/2020/10/16/leetcode/offer/%E5%89%91%E6%8C%87Offer%2007/</url>
    <content><![CDATA[<h2 id="剑指-Offer-07-重建二叉树"><a href="#剑指-Offer-07-重建二叉树" class="headerlink" title="剑指 Offer 07. 重建二叉树"></a>剑指 Offer 07. 重建二叉树</h2><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p><a class="btn" href="https://leetcode-cn.com/problems/shu-zu-zhong-zhong-fu-de-shu-zi-lcof/" title="leetcode链接">剑指 Offer 07. 重建二叉树</a></p>
<p><strong>难度:</strong><font color="orange">中等</font></p>
<p><strong>描述</strong></p>
<p>输入某二叉树的前序遍历和中序遍历的结果，请重建该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。</p>
<p><strong>示例</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">例如，给出</span><br><span class="line">前序遍历 preorder = [<span class="number">3</span>,<span class="number">9</span>,<span class="number">20</span>,<span class="number">15</span>,<span class="number">7</span>]</span><br><span class="line">中序遍历 inorder = [<span class="number">9</span>,<span class="number">3</span>,<span class="number">15</span>,<span class="number">20</span>,<span class="number">7</span>]</span><br><span class="line">    </span><br><span class="line">限制：</span><br><span class="line"><span class="number">0</span> &lt;= 节点个数 &lt;= <span class="number">5000</span></span><br></pre></td></tr></table></figure>
<p>返回如下的二叉树：</p>
<img src="https://i.loli.net/2020/10/17/izmOr39HkujLW86.png">


<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">函数签名:</span><br><span class="line"><span class="function">TreeNode* <span class="title">buildTree</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; preorder, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; inorder)</span></span>;</span><br></pre></td></tr></table></figure>

<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>事实上，我们通过遍历顺序还原二叉树，必须知道中序遍历以及前序后序中的一种，就可以还原出唯一的一棵二叉树。这一道题目是前序和中序还原二叉树，leetcode中也有中序和后序还原二叉树，解法其实是类似的。</p>
<p><a href="https://leetcode-cn.com/problems/construct-binary-tree-from-inorder-and-postorder-traversal/">106. 从中序与后序遍历序列构造二叉树</a></p>
<p>还原思路主要是依据前序和中序顺序的特点。</p>
<ul>
<li>前序的第一个节点一定是树的根节点；</li>
<li>中序中根节点的左侧为左子树节点，右侧为右子树节点；</li>
<li>前序中除去根节点以外，左子树的节点集中在左边，右子树的节点集中在右边；</li>
<li>对于每一颗子树来说，也满足以上两个特点。</li>
</ul>
<img src="https://i.loli.net/2020/10/17/5ekJB1Vy2nLoGhP.jpg">

<h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">TreeNode* <span class="title">buildTree</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; preorder, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; inorder)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//函数签名不支持我们方便的书写递归,因此再构建一个函数</span></span><br><span class="line">    <span class="keyword">return</span> build(preorder,<span class="number">0</span>,preorder.size()<span class="number">-1</span>,inorder,<span class="number">0</span>,inorder.size()<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">TreeNode* <span class="title">build</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; preorder, <span class="keyword">int</span> pbegin, <span class="keyword">int</span> pend, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; inorder, <span class="keyword">int</span> ibegin, <span class="keyword">int</span> iend)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(pbegin &gt; pend) <span class="comment">//剪枝条件</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="keyword">int</span> midnum = preorder[pbegin]; <span class="comment">//特点1:前序第一个节点是根节点</span></span><br><span class="line">    <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=ibegin;i&lt;=iend;++i)</span><br><span class="line">        <span class="keyword">if</span>(inorder[i] == midnum) <span class="comment">//利用特点2之前需要找到中序中的根节点</span></span><br><span class="line">            index = i;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> leftsize = index - ibegin; <span class="comment">// 找到左子树的节点数</span></span><br><span class="line">    TreeNode * node = <span class="keyword">new</span> TreeNode(midnum);</span><br><span class="line">    node-&gt;left = build(preorder,pbegin+<span class="number">1</span>,pbegin+leftsize,inorder,ibegin,index<span class="number">-1</span>); <span class="comment">//构建左子树</span></span><br><span class="line">    node-&gt;right = build(preorder,pbegin+leftsize+<span class="number">1</span>,pend,inorder,index+<span class="number">1</span>,iend); <span class="comment">//构建右子树</span></span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Leetcode</category>
        <category>剑指 Offer 专题</category>
      </categories>
      <tags>
        <tag>二叉树</tag>
        <tag>Leetcode</tag>
        <tag>中等</tag>
      </tags>
  </entry>
  <entry>
    <title>剑指 Offer 06. 从尾到头打印链表</title>
    <url>/OXygenPanda.github.io/2020/10/14/leetcode/offer/%E5%89%91%E6%8C%87Offer%2006/</url>
    <content><![CDATA[<h2 id="剑指-Offer-06-从尾到头打印链表"><a href="#剑指-Offer-06-从尾到头打印链表" class="headerlink" title="剑指 Offer 06. 从尾到头打印链表"></a>剑指 Offer 06. 从尾到头打印链表</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p><a href="https://leetcode-cn.com/problems/shu-zu-zhong-zhong-fu-de-shu-zi-lcof/">剑指 Offer 06. 从尾到头打印链表</a></p>
<p><strong>难度:</strong><font color="green">简单</font></p>
<p><strong>描述</strong></p>
<p>输入一个链表的头节点，从尾到头反过来返回每个节点的值（用数组返回）。</p>
<p><strong>示例</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">输入：</span><br><span class="line">    head = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>]</span><br><span class="line">输出：</span><br><span class="line">    [<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>]</span><br><span class="line">限制:</span><br><span class="line"><span class="number">0</span> &lt;= 链表长度 &lt;= <span class="number">10000</span></span><br><span class="line">函数签名:</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; reversePrint(ListNode* head);</span><br></pre></td></tr></table></figure>



<h3 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h3><p>第一种思路栈。</p>
<p>我们看到了 <em>反过来</em> 这几个字眼，心里应该要知道这个地方可以借助一个辅助栈来完成。栈这一种数据结构的特性是先进后出，那么原本是<code>1-2-3-4-5</code> 的序列，经过 <strong>入栈</strong> 和 <strong>出栈</strong> 的操作之后，就变成了 <code>5-4-3-2-1</code> 的序列。</p>
<p>那么来看这一个题目，一个链表遍历的方法是迭代遍历而不是地址偏移的随机访问遍历，因此我们在遍历过程中把节点的值放入一个辅助栈中，当链表遍历完成后，再将辅助栈的数值给赋值到一个数组中返回。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">reversePrint</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res; <span class="comment">//结果</span></span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; s; <span class="comment">//辅助栈</span></span><br><span class="line">    <span class="keyword">if</span>(!head)   <span class="keyword">return</span> res;</span><br><span class="line">    ListNode* cur = head; <span class="comment">//尽量不破坏传入的指针</span></span><br><span class="line">    <span class="keyword">while</span>(cur)&#123;</span><br><span class="line">        <span class="comment">//正序遍历链表,将值入栈</span></span><br><span class="line">        s.push(cur-&gt;val); </span><br><span class="line">        cur = cur-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(!s.empty())&#123;</span><br><span class="line">        <span class="comment">//将值出栈</span></span><br><span class="line">        res.push_back(s.top());</span><br><span class="line">        s.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>因为我们只需要遍历一次链表和访问<code>N</code>次栈，而空间需要一个返回的<code>vector&lt;int&gt;</code>的结果和一个辅助栈。</p>
<p>因此，时间复杂度 : <code>O(N)</code> 空间复杂度 : <code>O(N)</code> 。</p>
<h3 id="解法一·改进"><a href="#解法一·改进" class="headerlink" title="解法一·改进"></a>解法一·改进</h3><p>仍然是解法一的思路。</p>
<p>我们可以不需要一个栈，而是反转数组。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">reversePrint</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res; <span class="comment">//结果</span></span><br><span class="line">        <span class="keyword">if</span>(!head)   <span class="keyword">return</span> res;</span><br><span class="line">        ListNode* cur = head;</span><br><span class="line">        <span class="keyword">while</span>(cur)&#123;</span><br><span class="line">            <span class="comment">//正序遍历链表,直接加入到数组中</span></span><br><span class="line">            res.push_back(cur-&gt;val);</span><br><span class="line">            cur = cur-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">    	<span class="comment">//用反向迭代器创建一个vector&lt;int&gt;对象</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(res.rbegin(),res.rend());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//这里偷懒使用了反向迭代器</span></span><br><span class="line"><span class="comment">//也可以使用双指针原地反转数组</span></span><br><span class="line"><span class="keyword">int</span> left = <span class="number">0</span>, right = res.size() - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(left &lt; right)&#123;</span><br><span class="line">    <span class="keyword">int</span> tmp = res[left];</span><br><span class="line">    res[left] = res[right];</span><br><span class="line">    res[right] = tmp;</span><br><span class="line">    left ++;</span><br><span class="line">    right --;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>时间复杂度 : <code>O(N)</code> 空间复杂度 : <code>O(N)</code> 。</p>
<h3 id="解法二"><a href="#解法二" class="headerlink" title="解法二"></a>解法二</h3><p>第二种思路是利用链表和数组的迭代次数与索引的关系。</p>
<p>我们可以想到，链表的迭代次数和数组的索引值是有一定关系的：<code>迭代次数 + 索引值 = 链表长度 - 1</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">reversePrint</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!head)   <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    ListNode* cur = head;</span><br><span class="line">    <span class="keyword">while</span>(cur)&#123;</span><br><span class="line">       	<span class="comment">//遍历计数链表长度</span></span><br><span class="line">        count ++;</span><br><span class="line">        cur = cur-&gt;next; </span><br><span class="line">    &#125;        </span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">res</span><span class="params">(count)</span></span>; <span class="comment">//创建链表长度的数组</span></span><br><span class="line">    <span class="keyword">int</span> index = count - <span class="number">1</span>;</span><br><span class="line">    cur = head;</span><br><span class="line">    <span class="keyword">while</span>(cur)&#123;</span><br><span class="line">        <span class="comment">//利用关系</span></span><br><span class="line">        res[index--] = cur-&gt;val;</span><br><span class="line">        cur = cur-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>  这里第11行，<code>vector&lt;int&gt; res(count);</code> 是必须的。如果没有使用传入一个整型值来确定<code>res</code>的构造函数来构造对象的话，<code>res.size()</code> 和 <code>res.capacity()</code> 都会是0，因此无法使用例如<code>res[8]</code>这样的方式去存取数值。如果没有了解过这一方面的知识，可以看我之前的一篇文章：<a href="https://blog.csdn.net/qq_32416781/article/details/109071413">浅析STL中vector容器的用法/特性/实现</a>。</p>
</blockquote>
<p>时间复杂度 : <code>O(N)</code> , 空间复杂度 :  <code>O(N)</code>。 </p>
]]></content>
      <categories>
        <category>Leetcode</category>
        <category>剑指 Offer 专题</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
        <tag>简单</tag>
        <tag>链表</tag>
      </tags>
  </entry>
  <entry>
    <title>剑指 Offer 05. 替换空格</title>
    <url>/OXygenPanda.github.io/2020/10/12/leetcode/offer/%E5%89%91%E6%8C%87%20Offer%2005.%20%E6%9B%BF%E6%8D%A2%E7%A9%BA%E6%A0%BC/</url>
    <content><![CDATA[<h2 id="剑指-Offer-05-替换空格"><a href="#剑指-Offer-05-替换空格" class="headerlink" title="剑指 Offer 05. 替换空格"></a>剑指 Offer 05. 替换空格</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p><a href="https://leetcode-cn.com/problems/ti-huan-kong-ge-lcof/">剑指 Offer 05. 替换空格</a></p>
<p><strong>难度:</strong><font color="green">简单</font></p>
<p><strong>描述</strong></p>
<p>请实现一个函数，把字符串 <code>s</code> 中的每个空格替换成”%20”。</p>
<p><strong>示例</strong></p>
<p>现有矩阵 matrix 如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">输入：s = <span class="string">&quot;We are happy.&quot;</span></span><br><span class="line">输出：<span class="string">&quot;We%20are%20happy.&quot;</span></span><br><span class="line">    </span><br><span class="line">限制：</span><br><span class="line"><span class="number">0</span> &lt;= s 的长度 &lt;= <span class="number">10000</span></span><br><span class="line"></span><br><span class="line">函数签名:</span><br><span class="line"><span class="built_in">string</span> replaceSpace(<span class="built_in">string</span> s)</span><br></pre></td></tr></table></figure>



<h3 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h3><p>第一种思路是创建一个新的空字符串，遍历原字符串，判断当前字符是否是空格，如果是空格，新串 <code>+= &quot;%20&quot;</code> 如果不是空格，新串加 <code>+= 当前字符</code></p>
<p>代码过于简单，就不展示啦。</p>
<p>时间复杂度 : <code>O(N)</code> 空间复杂度 : <code>O(N)</code> 。</p>
<h3 id="解法二"><a href="#解法二" class="headerlink" title="解法二"></a>解法二</h3><p>第二种思路是原地调整字符串大小，直接将<code>&quot;%20&quot;</code>加入到原字符串中。</p>
<p>我们需要遍历一次数组，统计空格字符出现的次数，那么调整后的字符串大小应该等于<code>old_size + 2*space_num</code> 。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">replaceSpace</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> space_num = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> size_old = s.size(); <span class="comment">//旧串大小</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">char</span> c:s)</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">isspace</span>(c))</span><br><span class="line">                space_num++;</span><br><span class="line">        <span class="keyword">int</span> size_new = size_old + <span class="number">2</span> * space_num; <span class="comment">//新串大小</span></span><br><span class="line"></span><br><span class="line">        s.resize(size_new);</span><br><span class="line">        <span class="keyword">int</span> i = size_new<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">int</span> j = size_old<span class="number">-1</span>;        </span><br><span class="line">        <span class="keyword">while</span>(i != j)&#123; <span class="comment">//如果 i==j,说明再前面的字符串子串里不存在空格字符,剪枝操作</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">isspace</span>(s[j]))&#123;</span><br><span class="line">                s[i] = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">                s[i<span class="number">-1</span>] = <span class="string">&#x27;2&#x27;</span>;</span><br><span class="line">                s[i<span class="number">-2</span>] = <span class="string">&#x27;%&#x27;</span>;</span><br><span class="line">                i -= <span class="number">3</span>;</span><br><span class="line">                j -= <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                s[i] = s[j];</span><br><span class="line">                j--;</span><br><span class="line">                i--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>时间复杂度 : <code>O(N)</code> , 空间复杂度 :  <code>O(N)</code>。 </p>
<p>这里的空间复杂度明显要比前一种小很多，尤其是字符串很长而空格字符很少的情况。如果形式参数是传引用的形式传递，应该采用解法一，尽量不改变传入的字符串。</p>
]]></content>
      <categories>
        <category>Leetcode</category>
        <category>剑指 Offer 专题</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
        <tag>字符串</tag>
        <tag>简单</tag>
      </tags>
  </entry>
  <entry>
    <title>剑指 Offer 04. 二维数组中的查找</title>
    <url>/OXygenPanda.github.io/2020/10/12/leetcode/offer/%E5%89%91%E6%8C%87Offer%2004.%20%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9F%A5%E6%89%BE/</url>
    <content><![CDATA[<h2 id="剑指-Offer-04-二维数组中的查找"><a href="#剑指-Offer-04-二维数组中的查找" class="headerlink" title="剑指 Offer 04. 二维数组中的查找"></a>剑指 Offer 04. 二维数组中的查找</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p><a href="https://leetcode-cn.com/problems/shu-zu-zhong-zhong-fu-de-shu-zi-lcof/">剑指 Offer 04. 二维数组中的查找</a></p>
<p><strong>难度:</strong><font color="green">简单</font></p>
<p><strong>描述</strong></p>
<p>在一个 n * m 的二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p>
<p><strong>示例</strong></p>
<p>现有矩阵 matrix 如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">  [<span class="number">1</span>,   <span class="number">4</span>,  <span class="number">7</span>, <span class="number">11</span>, <span class="number">15</span>],</span><br><span class="line">  [<span class="number">2</span>,   <span class="number">5</span>,  <span class="number">8</span>, <span class="number">12</span>, <span class="number">19</span>],</span><br><span class="line">  [<span class="number">3</span>,   <span class="number">6</span>,  <span class="number">9</span>, <span class="number">16</span>, <span class="number">22</span>],</span><br><span class="line">  [<span class="number">10</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">17</span>, <span class="number">24</span>],</span><br><span class="line">  [<span class="number">18</span>, <span class="number">21</span>, <span class="number">23</span>, <span class="number">26</span>, <span class="number">30</span>]</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">给定 target = <span class="number">5</span>，返回 <span class="literal">true</span>。</span><br><span class="line"></span><br><span class="line">给定 target = <span class="number">20</span>，返回 <span class="literal">false</span>。</span><br><span class="line"></span><br><span class="line">函数签名:</span><br><span class="line"><span class="keyword">bool</span> findNumberIn2DArray(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; matrix, <span class="keyword">int</span> target)</span><br></pre></td></tr></table></figure>



<h3 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h3><p>第一种思路是类似暴力法，因为二维数组每一个维度都是从 <code>index = 0</code> 到 <code>index = size()-1</code> 升序，因此我们可以找到两个边界，缩小遍历的空间大小。</p>
<p>我们只需要两次循环找到边界，再用找到的边界二层循环去寻找 <code>target</code>。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">findNumberIn2DArray</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; matrix, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(matrix.size() == <span class="number">0</span> || matrix[<span class="number">0</span>].size() == <span class="number">0</span>)  <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">//边界</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> s_m,s_n; <span class="comment">//每一个维度的边界</span></span><br><span class="line">    <span class="keyword">int</span> size_0 = matrix.size();</span><br><span class="line">    <span class="keyword">int</span> size_1 = matrix[<span class="number">0</span>].size();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>;i&lt;size_0;++i) <span class="comment">//找到纵向的边界</span></span><br><span class="line">        <span class="keyword">if</span>(matrix[i][<span class="number">0</span>] &gt; target)&#123;</span><br><span class="line">            s_m = i;</span><br><span class="line">            <span class="keyword">break</span>;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; size_1; ++ j) <span class="comment">//找到横向的边界</span></span><br><span class="line">        <span class="keyword">if</span>(matrix[<span class="number">0</span>][j] &gt; target)&#123;</span><br><span class="line">            s_n = j;</span><br><span class="line">            <span class="keyword">break</span>;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s_m;++i) <span class="comment">//缩小遍历空间大小</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;s_n;++j)</span><br><span class="line">            <span class="keyword">if</span>(matrix[i][j] == target)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>时间复杂度 : <code>O(N*M)</code> 空间复杂度 : <code>O(1)</code> 。但是，如果二维数组特别大，这么做应该还是能够有效减少遍历次数的。</p>
<h3 id="解法二"><a href="#解法二" class="headerlink" title="解法二"></a>解法二</h3><p>第二种思路是类似于二叉搜索树。</p>
<p>我们只需要遍历一次数组，每一次先判定当前元素是否出现过(在集合中)，如果没有出现过加入到集合中，如果出现过就直接返回这个元素值即可。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">findNumberIn2DArray</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; matrix, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(matrix.size() == <span class="number">0</span> || matrix[<span class="number">0</span>].size() == <span class="number">0</span>)  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> j = matrix[<span class="number">0</span>].size() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>( i &lt; matrix.size() &amp;&amp; j &gt;= <span class="number">0</span> )&#123;</span><br><span class="line">            <span class="comment">// 站在右上角,把数组看成二叉搜索树</span></span><br><span class="line">            <span class="keyword">if</span>(matrix[i][j] == target)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(matrix[i][j] &gt; target)</span><br><span class="line">                j--;<span class="comment">// 1</span></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1 : 这里不需要给i置零</span></span><br><span class="line"><span class="comment">// 比如我们要找14,我们11的时候要i++,12的时候i++,16的时候j--,但是target已经大于12了，必不需要从7开始重新判断</span></span><br></pre></td></tr></table></figure>

<p>可以发现这一种解法一步到位，但是也类似于第一种方法，只是我们的起点设计的比较巧妙，能够通过索引 <code>i</code> <code>j</code> 的一定规律的移动就能找到 <code>target</code> 是否存在。</p>
<p>时间复杂度 : <code>O(N+M)</code> , 空间复杂度 :  <code>O(1)</code>。 </p>
]]></content>
      <categories>
        <category>Leetcode</category>
        <category>剑指 Offer 专题</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
        <tag>简单</tag>
        <tag>数组</tag>
      </tags>
  </entry>
  <entry>
    <title>剑指Offer 03. 数组中重复的数字</title>
    <url>/OXygenPanda.github.io/2020/10/11/leetcode/offer/%E5%89%91%E6%8C%87Offer%2003.%20%E6%95%B0%E7%BB%84%E4%B8%AD%E9%87%8D%E5%A4%8D%E7%9A%84%E6%95%B0%E5%AD%97/</url>
    <content><![CDATA[<h2 id="剑指Offer-03-数组中重复的数字"><a href="#剑指Offer-03-数组中重复的数字" class="headerlink" title="剑指Offer 03. 数组中重复的数字"></a>剑指Offer 03. 数组中重复的数字</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p><a href="https://leetcode-cn.com/problems/shu-zu-zhong-zhong-fu-de-shu-zi-lcof/">剑指 Offer 03. 数组中重复的数字</a></p>
<p><strong>难度:</strong><font color="green">简单</font></p>
<p><strong>描述</strong></p>
<p>找出数组中重复的数字。</p>
<p>在一个长度为 n 的数组 nums 里的所有数字都在 0～n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字。</p>
<p><strong>示例</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">输入:</span><br><span class="line">[<span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">3</span>]</span><br><span class="line">输出:</span><br><span class="line"><span class="number">2</span> 或 <span class="number">3</span></span><br><span class="line">限制:</span><br><span class="line"><span class="number">2</span> &lt;= n &lt;= <span class="number">100000</span></span><br><span class="line">函数签名:</span><br><span class="line"><span class="keyword">int</span> findRepeatNumber(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span><br></pre></td></tr></table></figure>



<h3 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h3><p>第一种思路是采用暴力法。</p>
<p>我们只需要两层循环遍历数组，当内外层索引对应的元素值相等时，返回这个元素值即可。</p>
<p>时间复杂度 : <code>O(N^2)</code> 空间复杂度 : <code>O(1)</code> 。</p>
<h3 id="解法二"><a href="#解法二" class="headerlink" title="解法二"></a>解法二</h3><p>第二种思路是采用哈希集合。</p>
<p>我们只需要遍历一次数组，每一次先判定当前元素是否出现过(在集合中)，如果没有出现过加入到集合中，如果出现过就直接返回这个元素值即可。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findRepeatNumber</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">unordered_set</span>&lt;<span class="keyword">int</span>&gt; record; <span class="comment">//存出现过的数</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> num : nums)&#123;</span><br><span class="line">        <span class="keyword">if</span>(record.find(num) != record.end()) <span class="comment">// 找到了</span></span><br><span class="line">            <span class="keyword">return</span> num;</span><br><span class="line">        record.insert(num);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>因为我们在 <code>hashset</code> 中查找的时间复杂度是 <code>O(1)</code> 。</p>
<p>因此，时间复杂度 : <code>O(N)</code> , 空间复杂度 :  <code>O(N)</code>。 </p>
<h3 id="解法三"><a href="#解法三" class="headerlink" title="解法三"></a>解法三</h3><p>第三种思路是一个萝卜一个坑。剑指Offer书中解答。</p>
<p>因为数组中的编号是 [0, n-1]，因此每一个索引应该对应的是它的值，即<code>i == nums[i]</code> ，所以我们如果现在 <code>i != nums[i]</code> 就把当前的 <code>nums[i]</code> 放到合适的位置，进行两数交换。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findRepeatNumber</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.size();++i)&#123;</span><br><span class="line">        <span class="keyword">while</span>(nums[i] != i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i] == nums[nums[i]]) <span class="comment">//如果交换位置的元素相等就直接找到了</span></span><br><span class="line">                <span class="keyword">return</span> nums[i];</span><br><span class="line">            <span class="comment">//两数交换</span></span><br><span class="line">            <span class="keyword">int</span> tmp = nums[i];</span><br><span class="line">            nums[i] = nums[tmp];</span><br><span class="line">            nums[tmp] = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>因为有题目的限制：</p>
<ol>
<li>一定有重复；</li>
<li>最大元素值是 <code>size()-1</code>。</li>
</ol>
<p>所以题目中的 <code>while</code> 循环一定能够退出。 </p>
]]></content>
      <categories>
        <category>Leetcode</category>
        <category>剑指 Offer 专题</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
        <tag>简单</tag>
        <tag>哈希集合</tag>
      </tags>
  </entry>
  <entry>
    <title>浅析list用法/特性/实现</title>
    <url>/OXygenPanda.github.io/2020/10/11/STL/STL-list%20%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h1 id="list-容器"><a href="#list-容器" class="headerlink" title="list 容器"></a>list 容器</h1><p><strong>list</strong> 在 C++ 中是一种用起来像链表的模板类。侯捷老师主要介绍的是<code>G2.9</code>和<code>G4.9</code>两个版本。我将阅读一下 <code>clang</code> 中的源码。</p>
<a id="more"></a>

<h2 id="list-结构"><a href="#list-结构" class="headerlink" title="list . 结构"></a>list . 结构</h2><p><strong>G2.9</strong> 下，<strong>list</strong> 只有一个成员变量，<code>list_node * node</code> ，是<code>list_node</code>类的指针，在32位机中占用4个字节，在64位机中占用8个字节。</p>
<p>而 <code>list_node</code> 类中，又有三个成员变量 :</p>
<ul>
<li><code>void * prev</code> : 指向当前节点的前驱</li>
<li><code>void * next</code> : 指向当前节点的后继</li>
<li><code>void * data</code> : 指向当前节点</li>
</ul>
<p>数据结构课程里的双向链表就是这样的一个结构，每一个节点拥有前驱后继节点且有一个数据。因此，<strong>list</strong> 容器是一个双向链表，与之对应的还有一个单向链表容器 <strong>forward_list</strong>。</p>
<blockquote>
<p>  侯捷老师提到此处设计有一个不合理的点 : <code>list_node</code> 已经接收到了模板参数，但是其内部的指针和数据的类型都是 <code>void</code> 。</p>
</blockquote>
<p>双向链表底层逻辑是一个环状链表结构，也就是说最后一个节点 <code>next</code> 的 <code>next</code> 是头结点。尾结点后还有一个节点，是为了考虑所有迭代器的区间是前闭后开。</p>
<p><strong>G4.9</strong> 下，<strong>list</strong> 中有两个成员变量。</p>
<h2 id="list-iterator"><a href="#list-iterator" class="headerlink" title="list . iterator"></a>list . iterator</h2><p>除了 <strong>array</strong> 和 <strong>vector</strong> 之外的所有容器的 <strong>iterator</strong> 必须得是一个类。因为需要重载许多运算符。</p>
<p><strong>list</strong> 相较于 <strong>vector</strong> 的迭代器中的 <code>++</code> 操作，就不能是简单的在内存中做偏移了，而是得去寻找 <strong>list</strong> 的下一个节点，也就是迭代器 <strong>iterator</strong> 所指节点的 <code>next</code>。</p>
<blockquote>
<p>  运算符重载中的 <code>i++</code> 和 <code>++i</code> 的声明方式</p>
<p>  <code>Self&amp; operator++()</code> 重载的是 <code>++i</code> 操作</p>
<p>  <code>Self&amp; operator++(int)</code> 重载的是 <code>i++</code> 操作，其中 <code>int</code> 是占位符</p>
</blockquote>
<h2 id="list-继承关系"><a href="#list-继承关系" class="headerlink" title="list . 继承关系"></a>list . 继承关系</h2><p>待补充</p>
]]></content>
      <categories>
        <category>C++</category>
        <category>STL</category>
        <category>容器</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>STL</tag>
        <tag>list</tag>
      </tags>
  </entry>
  <entry>
    <title>浅析vector用法/特性/实现</title>
    <url>/OXygenPanda.github.io/2020/10/10/STL/STL-vector%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h1 id="vector-容器"><a href="#vector-容器" class="headerlink" title="vector 容器"></a>vector 容器</h1><p><strong>vector</strong> 原意是向量。在C++中，是一种用起来像动态数组的模板类。在不同的编译器中，<strong>vector</strong> 的实现都不尽相同，侯捷老师主要介绍的是<code>G2.9</code>和<code>G4.9</code>两个版本。</p>
<a id="more"></a>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//G2.9中 vector类的声明</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> _<span class="title">Tp</span>, <span class="title">class</span> _<span class="title">alloc</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">vector</span>&#123;</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    iterator start;</span><br><span class="line">    iterator finish;</span><br><span class="line">    iterator end_of_storage;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="vector-sizeof"><a href="#vector-sizeof" class="headerlink" title="vector . sizeof()"></a>vector . sizeof()</h2><p>曾经有同学试图使用 <code>sizeof()</code> 来计算 <strong>vector</strong> 对象有多少个元素，可是得到的结果都是意料之外的 ( 因为他数组可能有十多个整形变量，但是<code>sizeof()</code>得到的结果居然是 12 或者 24)。</p>
<p>从源码中可以看到vector的成员变量只有三个类型为 <strong>iterator</strong> 的迭代器对象，分别名为<code>start</code> , <code>finish</code> , <code>end_of_storage</code> :</p>
<ul>
<li><p><code>start</code> : 指向所有内存空间开始的地址</p>
</li>
<li><p><code>finish</code> : 指向所有内存空间使用的尾地址</p>
</li>
<li><p><code>end_of_storage</code> : 指向所有内存空间结束的尾地址</p>
</li>
</ul>
<p><strong>vector</strong> 对象通过三个指针管理使用的内存空间，而实际的数据并不存储在 <strong>vector</strong> 对象中。这也就是 <code>sizeof()</code> 得不到想要的数组内存大小的原因。</p>
<h2 id="vector-内存成长"><a href="#vector-内存成长" class="headerlink" title="vector . 内存成长"></a>vector . 内存成长</h2><p><strong>vector</strong> 我们在使用的时候都知道它是一个动态数组，那么这个动态就体现在了可以动态地插入，动态地删除。那么 <strong>vector</strong> 对象控制的内存空间应该分配多少大小才能满足动态地插入呢？</p>
<p>答案是未知。因为我们并不知道会动态插入多少数组，因此最好的方法是 : 内存空间动态增长。</p>
<p>规则 :</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res; <span class="comment">//默认构造 start == finish == end_of_storage 不分配内存空间</span></span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 成长方式</span></span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">  	<span class="keyword">const</span> size_type old_size = size();</span><br><span class="line">  	<span class="keyword">const</span> size_type len = old_size != <span class="number">0</span> ? <span class="number">2</span> * old_size : <span class="number">1</span>; <span class="comment">//下方第三点规则</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<ul>
<li>在 <code>res.size() == 0</code> 时，插入一个元素会使得 <code>res.size() == 1</code> 以及 <code>res.capacity() == 1</code></li>
<li>如果初始化的时候，赋予了它一定的内存空间，那么<code>res.size() == res.capacity() == 赋值的长度</code> </li>
<li>在 <code>res.size() != 0</code> 时，如果<code>res.size() == res.capacity()</code> ，那么 <code>res.capacity()</code> 呈2倍增长</li>
</ul>
<p>需要注意的是，我们在最初为 vector 的某一个对象分配了一块内存之后，内存中紧接着之后的内存可能会被其他变量使用，因此 <strong>vector</strong> 的内存成长并不会发生在原地。它的实做是 : 在另一个位置申请好 <code>capicity()</code>  两倍大小的内存之后，进行逐一拷贝(copy或move)。那么如果 <strong>vector&lt;_Tp&gt;</strong> 这里的模板参数 <code>typename _Tp</code> 如果是一个类的话，会涉及到  <code>_Tp</code> 的析构函数和拷贝构造函数或移动构造函数。</p>
<h2 id="vector-iterator"><a href="#vector-iterator" class="headerlink" title="vector . iterator"></a>vector . iterator</h2><p>迭代器 <strong>iterator</strong> 实际上是一种用起来像指针的类，本质上还是类，每一个迭代器都是类实例化的对象。并且，由于 <strong>vector</strong> <strong>queue</strong> <strong>list</strong> <strong>map/set</strong> 不同容器底层实现不完全相同或者有几种完全不同，因此并不能设计一种迭代器类同时满足所有容器的操作。</p>
<p>由于 <strong>vector</strong> 底层是内存连续的空间，因此迭代器也是最简单的。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//G2.9</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="title">class</span> <span class="title">Alloc</span> = <span class="title">alloc</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">vector</span>&#123;</span></span><br><span class="line">	<span class="keyword">typedef</span> T value_type;</span><br><span class="line">    <span class="keyword">typedef</span> value_type* iterator; <span class="comment">//T*</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>可以从源码中看到，**vector ** 的迭代器就是元素类型的指针，类型为 <code>T*</code> 。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//xcode : clang</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">Tp</span>, <span class="title">class</span> _<span class="title">Allocator</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">class</span> __<span class="title">vector_base</span> :</span> <span class="keyword">protected</span> __vector_base_common&lt;<span class="literal">true</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="keyword">typedef</span> _Allocator                               allocator_type;</span><br><span class="line">        <span class="keyword">typedef</span> allocator_traits&lt;allocator_type&gt;         __alloc_traits;</span><br><span class="line">        <span class="keyword">typedef</span> <span class="keyword">typename</span> __alloc_traits::size_type       size_type;</span><br><span class="line">    <span class="keyword">protected</span>:</span><br><span class="line">        <span class="keyword">typedef</span> _Tp                                      value_type;</span><br><span class="line">        <span class="keyword">typedef</span> value_type&amp;                              reference;</span><br><span class="line">        <span class="keyword">typedef</span> <span class="keyword">const</span> value_type&amp;                        const_reference;</span><br><span class="line">        <span class="keyword">typedef</span> <span class="keyword">typename</span> __alloc_traits::difference_type difference_type;</span><br><span class="line">        <span class="keyword">typedef</span> <span class="keyword">typename</span> __alloc_traits::pointer         pointer;</span><br><span class="line">        <span class="keyword">typedef</span> <span class="keyword">typename</span> __alloc_traits::const_pointer   const_pointer;</span><br><span class="line">        <span class="keyword">typedef</span> pointer                                  iterator;</span><br><span class="line">        <span class="keyword">typedef</span> const_pointer                            const_iterator;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 从上面提取</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">Tp</span>, <span class="title">class</span> _<span class="title">Allocator</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">typedef</span> _<span class="title">Allocator</span>                               <span class="title">allocator_type</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> allocator_traits&lt;allocator_type&gt;         __alloc_traits;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">typename</span> __alloc_traits::pointer         pointer;</span><br><span class="line"><span class="keyword">typedef</span> pointer                                  iterator;</span><br><span class="line"></span><br><span class="line"><span class="comment">//因此,vector中的iterator 实际上是 allocator_traits&lt;_Allocator&gt;::pointer 类型</span></span><br><span class="line"><span class="comment">//而默认的 allocator 中 pointer 的定义就是 T* (T通过模板参数传递)</span></span><br></pre></td></tr></table></figure>

<p>从现在的 clang 中，都难以看出 <strong>iterator</strong> 实际的类型了，侯捷老师在STL源码剖析课程中多次吐槽版本迭代之后，标准库设计的越来越复杂了，也可能是我的功底仍然不够深厚，只能解析到这一步了。之后，在看完侯老师的《源码剖析》书之后，再来详细填补各种留下的坑。</p>
<p>迭代器的使用，迭代器类的继承，以及迭代器的操作符重载，在后续迭代器专题中整理。</p>
<h2 id="vector-继承关系"><a href="#vector-继承关系" class="headerlink" title="vector . 继承关系"></a>vector . 继承关系</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*class __vector_base_common*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">bool</span>&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> __<span class="title">vector_base_common</span>&#123;</span></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    _LIBCPP_NORETURN <span class="keyword">void</span> __throw_length_error() <span class="keyword">const</span>; <span class="comment">//模板传递在函数中使用</span></span><br><span class="line">    _LIBCPP_NORETURN <span class="keyword">void</span> __throw_out_of_range() <span class="keyword">const</span>; <span class="comment">//模板传递在函数中使用</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*class __vector_base*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">Tp</span>, <span class="title">class</span> _<span class="title">Allocator</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">class</span> __<span class="title">vector_base</span> :</span> <span class="keyword">public</span> __vector_base_common&lt;<span class="literal">true</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">typedef</span> _Allocator                               allocator_type;</span><br><span class="line">    <span class="keyword">typedef</span> allocator_traits&lt;allocator_type&gt;         __alloc_traits;</span><br><span class="line">    <span class="keyword">typedef</span> ...</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">typename</span> __alloc_traits::pointer         pointer;</span><br><span class="line">    <span class="keyword">typedef</span> ...</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//成员变量定义处,注意这里的类名不是vector,是vector私有继承了这个类</span></span><br><span class="line">    <span class="comment">//sizeof() = 24 （= 8 * 3）</span></span><br><span class="line">    pointer __begin_;</span><br><span class="line">    pointer __end_;</span><br><span class="line">    __compressed_pair&lt;pointer,allocator_type &gt; __end_cap_; <span class="comment">//命名和G++不同,但是可以看得出说的是end_capacity</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*struct __compressed_pair_elem*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">Tp</span>, <span class="title">int</span> _<span class="title">Idx</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">struct</span> __<span class="title">compressed_pair_elem</span>&lt;_Tp, _Idx, true&gt; :</span> <span class="keyword">private</span> _Tp</span><br><span class="line">&#123;&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*class __compressed_pair*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">T1</span>, <span class="title">class</span> _<span class="title">T2</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">class</span> __<span class="title">compressed_pair</span> :</span> <span class="keyword">private</span> __compressed_pair_elem&lt;_T1, <span class="number">0</span>&gt;,</span><br><span class="line">                          <span class="keyword">private</span> __compressed_pair_elem&lt;_T2, <span class="number">1</span>&gt;</span><br><span class="line">                          &#123;&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*class vector*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">Tp</span>, <span class="title">class</span> _<span class="title">Allocator</span> /* = <span class="title">allocator</span>&lt;_Tp&gt; */&gt;</span></span><br><span class="line"><span class="class"><span class="title">class</span> _<span class="title">LIBCPP_TEMPLATE_VIS</span> <span class="title">vector</span> :</span> <span class="keyword">private</span> __vector_base&lt;_Tp, _Allocator&gt;</span><br><span class="line">&#123;&#125;</span><br></pre></td></tr></table></figure>

<p>以上是从 <code>xcode : clang</code> 中的 <code>vector</code> 和 <code>memory</code> 头文件中找到的源码，粘贴了部分我想展示的。</p>
<p>并且绘制了继承关系图，如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">classDiagram</span><br><span class="line">	class _Tp</span><br><span class="line">	class __compressed_pair_elem</span><br><span class="line">	class __compressed_pair</span><br><span class="line">	class __vector_base_common&#123;</span><br><span class="line">		- pointer __begin__</span><br><span class="line">		- pointer __end__</span><br><span class="line">		- __compressed_pair&lt;pointer,allocator_type&gt; __end_cap_</span><br><span class="line">	&#125;</span><br><span class="line">	class __vector_base</span><br><span class="line">	class vector</span><br><span class="line">	__vector_base &lt;|-- vector : Inheritance</span><br><span class="line">	__vector_base_common &lt;|-- 	__vector_base : Inheritance</span><br><span class="line">	__vector_base_common *-- __compressed_pair : Composition</span><br><span class="line">	__compressed_pair_elem &lt;|-- __compressed_pair : Inheritance</span><br><span class="line">	_Tp &lt;|-- __compressed_pair_elem : Inheritance</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>可以看到，我们使用的是 <strong>vector</strong> 模板类，它的 <code>sizeof() = 24</code> ，也就是 <em>class __vector_base_common</em> 中定义的三根指针，在64位机中，指针为8字节。</p>
]]></content>
      <categories>
        <category>C++</category>
        <category>STL</category>
        <category>容器</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>STL</tag>
        <tag>vector</tag>
      </tags>
  </entry>
  <entry>
    <title>两数之和</title>
    <url>/OXygenPanda.github.io/2020/10/09/leetcode/others/%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/</url>
    <content><![CDATA[<h1 id="两数之和问题"><a href="#两数之和问题" class="headerlink" title="两数之和问题"></a>两数之和问题</h1><a id="more"></a>

<h2 id="两数之和"><a href="#两数之和" class="headerlink" title="两数之和"></a>两数之和</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p><a href="https://leetcode-cn.com/problems/two-sum/">Leetcode 1.两数之和</a></p>
<p><strong>难度:</strong><font color="green">简单</font></p>
<p><strong>描述</strong></p>
<p>给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。</p>
<p>* 你可以假设每种输入只会对应一个答案。但是，数组中同一个元素不能使用两遍。</p>
<p><strong>示例</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">给定 nums = [<span class="number">2</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">15</span>], target = <span class="number">9</span></span><br><span class="line">函数签名 <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; twoSum(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target)</span><br></pre></td></tr></table></figure>

<h3 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h3><p>第一种思路是采用暴力法(虽然说暴力法是无法通过leetcode的,但确实是首先想到的方法)。</p>
<p>我们只需要两层循环遍历数组，在循环索引不相等但是之和为 <code>target</code> 的时候，返回两个索引组成的数组即可。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">twoSum</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums, <span class="keyword">int</span> target)</span></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res; <span class="comment">// 结果</span></span><br><span class="line">    <span class="keyword">if</span>(nums.empty())    <span class="keyword">return</span> res;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.size()<span class="number">-1</span>;++i)&#123; <span class="comment">//为减少内存循环次数,i只循环到最大值-1</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;nums.size();++j)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums.at(i) + nums.at(j) == target)&#123;</span><br><span class="line">                res.push_back(i);</span><br><span class="line">                res.push_back(j);</span><br><span class="line">                <span class="keyword">return</span> res;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>因为数组中同一元素不能使用两遍，因此内层循环索引 <code>j</code> 只需要从 <code>i+1</code> 开始，但是注意的是 <code>i</code> 不能到达 <code>nums.size()-1</code> ，否则 <code>j</code> 会越界。所以外层判断条件得是 <code>i&lt;nums.size()-1</code>  。</p>
<p>时间复杂度 : <code>O(N^2)</code> 空间复杂度 : <code>O(1)</code> 。</p>
<h3 id="解法二"><a href="#解法二" class="headerlink" title="解法二"></a>解法二</h3><p>第二种思路是采用哈希表。</p>
<p>我们需要遍历一次数组，存下每一个&lt;num,index&gt;对，再逐一判断 <code>key:target-num[i]</code> 是否出现在哈希表中。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">twoSum</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums, <span class="keyword">int</span> target)</span></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res; <span class="comment">// 结果</span></span><br><span class="line">    <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; record; <span class="comment">//&lt;数值,索引&gt;</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.size();++i)</span><br><span class="line">        record[nums.at(i)] = i;</span><br><span class="line">    <span class="comment">// 等同于 record.insert(pair&lt;int,int&gt;(nums.at(i),i));</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.size();++i)</span><br><span class="line">        <span class="keyword">if</span>(record.find(target-nums.at(i)) != record.end()) &#123;</span><br><span class="line">            <span class="comment">//找到</span></span><br><span class="line">            res.push_back(i);</span><br><span class="line">            res.push_back(record[target - nums.at(i)]);</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>因为我们在 <code>hashmap</code> 中查找的时间复杂度是 <code>O(1)</code> 。</p>
<p>因此，时间复杂度 : <code>O(N)</code> , 空间复杂度 :  <code>O(N)</code>。 </p>
<h3 id="解法三"><a href="#解法三" class="headerlink" title="解法三"></a>解法三</h3><p>第三种思路是采用排序+双指针。</p>
<p>因为形式参数的<code>nums</code>是传引用，所以我们需要对传入的<code>nums</code>进行一次拷贝，在拷贝上进行排序。排序后采用双指针法，找到两个加数的索引。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">twoSum</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums, <span class="keyword">int</span> target)</span></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res; <span class="comment">// 结果</span></span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">nums_cp</span><span class="params">(nums)</span></span>; <span class="comment">// 不让排序操作改变原数组</span></span><br><span class="line">    sort(nums_cp.begin(),nums_cp.end());</span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">0</span>, right = nums_cp.size() - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(left &lt; right)&#123; <span class="comment">// 1</span></span><br><span class="line">        <span class="keyword">int</span> sum = nums_cp.at(left) + nums_cp.at(right);</span><br><span class="line">        <span class="keyword">if</span>( sum == target)&#123;</span><br><span class="line">            res.push_back(left);</span><br><span class="line">            res.push_back(right);</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>( sum &gt; target)</span><br><span class="line">            right --;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>( sum &lt; target)</span><br><span class="line">            left ++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>注释:1</code> 不能有等号，虽然我们定义的<code>left</code> <code>right</code> 是左闭右闭区间，但是题目要求一个数不能使用两次。因此不能取相等的情况。</p>
<p>时间复杂度 : <code>O(NlogN+N) = O(NlogN)</code> 空间复杂度 : <code>O(N)</code> 主要是多了一份拷贝。</p>
<h2 id="两数之和数据结构设计"><a href="#两数之和数据结构设计" class="headerlink" title="两数之和数据结构设计"></a>两数之和数据结构设计</h2><h3 id="设计API"><a href="#设计API" class="headerlink" title="设计API"></a>设计API</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TwoSum</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 向数组中添加一个新的数 number</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> number)</span></span>;</span><br><span class="line">    <span class="comment">// 查找当前数组中是否有两数之和为 value</span></span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> value)</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TwoSum</span>&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; record; <span class="comment">//&lt;数值,索引&gt;</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> index;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> number)</span></span>&#123;</span><br><span class="line">        record[number] = index++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> value)</span></span>&#123;</span><br><span class="line">        <span class="comment">//采用双指针法在红黑树的map</span></span><br><span class="line">        <span class="keyword">auto</span> left = record.begin();</span><br><span class="line">        <span class="keyword">auto</span> right = record.end();</span><br><span class="line">        right --;</span><br><span class="line">        <span class="keyword">while</span>(left != right)&#123;</span><br><span class="line">            <span class="keyword">int</span> sum = (*left).first + (*right).first; <span class="comment">//每一个节点是一个pair</span></span><br><span class="line">            <span class="keyword">if</span>(sum == value)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(sum &lt; value)</span><br><span class="line">                left ++;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(sum &gt; value)</span><br><span class="line">                right --;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> TwoSum::index = <span class="number">0</span>;</span><br></pre></td></tr></table></figure>

<p>实现find的时候，和我们做题的时候方法略有不同。因为我们做题的时候，是有vector作为数据的支撑，我们能够在一个随机访问的内存结构里存取数据，而现在我们整个类只有record这一个map&lt;int,int&gt;类的数据和一个静态索引值，而且红黑树的迭代器遍历顺序是按照key升序的，因此我们可以采用双指针的方式来遍历。</p>
<p><code>class TwoSum</code> 空间复杂度 : <code>O(N)</code></p>
<p><code>add(int)</code> 时间复杂度 : <code>O(1)</code> </p>
<p><code>find(int)</code> 时间复杂度 : <code>O(N)</code> </p>
<h3 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h3><p>如果是一个查询次数明显对于插入次数的场景，那么我们的 <code>find()</code> 函数的效率就有点过于低下，我们会重复查询许多次。于是，我们可以把查询的结果也给存下来，记录下每一种可能的和的数值。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TwoSum</span>&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; nums; <span class="comment">//记录现有数组</span></span><br><span class="line">    <span class="built_in">unordered_set</span>&lt;<span class="keyword">int</span>&gt; sums; <span class="comment">//记录可能的和</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> number)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> n:nums) <span class="comment">//每一次插入都把所有和给记录下来</span></span><br><span class="line">            sums.insert(n+number);</span><br><span class="line">        nums.push_back(number);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> value)</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> (sums.find(value) != sums.end()); <span class="comment">//查找到value返回true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><code>class TwoSum</code> 空间复杂度 : <code>O(N)</code></p>
<p><code>add(int)</code> 时间复杂度 : <code>O(N)</code> </p>
<p><code>find(int)</code> 时间复杂度 : <code>O(1)</code> </p>
<blockquote>
<p>  学习自 labuladong</p>
</blockquote>
<h2 id="三数之和"><a href="#三数之和" class="headerlink" title="三数之和"></a>三数之和</h2><h2 id="N数之和"><a href="#N数之和" class="headerlink" title="N数之和"></a>N数之和</h2>]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
        <tag>双指针</tag>
        <tag>哈希表</tag>
      </tags>
  </entry>
  <entry>
    <title>初识STL</title>
    <url>/OXygenPanda.github.io/2020/10/07/STL/%E7%AC%AC%E4%B8%80%E7%AF%87%20%E8%AE%A4%E8%AF%86STL/</url>
    <content><![CDATA[<a id="more"></a>

<h1 id="STL"><a href="#STL" class="headerlink" title="STL"></a>STL</h1><p>什么是STL？STL : standard Template Library 标准模板库，STL是C++的一个重要组成部分。</p>
<p>STL包含了众多头文件 :</p>
<table>
<thead>
<tr>
<th>头文件名称</th>
<th>类型</th>
</tr>
</thead>
<tbody><tr>
<td>&lt;algorithm&gt;</td>
<td>算法</td>
</tr>
<tr>
<td>&lt;deque&gt;</td>
<td>容器</td>
</tr>
<tr>
<td>&lt;functional&gt;</td>
<td>仿函数</td>
</tr>
<tr>
<td>&lt;iterator&gt;</td>
<td>迭代器</td>
</tr>
<tr>
<td>&lt;vector&gt;</td>
<td>容器</td>
</tr>
<tr>
<td>&lt;list&gt;</td>
<td>容器</td>
</tr>
<tr>
<td>&lt;map&gt;</td>
<td>容器</td>
</tr>
<tr>
<td>&lt;memory.h&gt;</td>
<td>智能指针</td>
</tr>
<tr>
<td>&lt;numeric&gt;</td>
<td>数值算法</td>
</tr>
<tr>
<td>&lt;queue&gt;</td>
<td>容器</td>
</tr>
<tr>
<td>&lt;set&gt;</td>
<td>容器</td>
</tr>
<tr>
<td>&lt;stack&gt;</td>
<td>容器</td>
</tr>
<tr>
<td>&lt;utility&gt;</td>
<td>比较符 + pair</td>
</tr>
</tbody></table>
<p>浏览完以上这一个表格，可以简单了解到STL的组成。</p>
<h2 id="六大部件"><a href="#六大部件" class="headerlink" title="六大部件"></a>六大部件</h2><p>STL主要包含六个部件：</p>
<ul>
<li>容器 containers 是一个class template</li>
<li>分配器 allocators 是一个 class template</li>
<li>算法 algorithms 是一个 function template(用起来像函数)</li>
<li>迭代器 iterators 是一个 class template</li>
<li>适配器 adapters 是一个 class template</li>
<li>仿函数 functors 是一个 class template</li>
</ul>
<h3 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h3><h4 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h4><p>容器是数据的承载，容器的设计使得我们”看不到”内存</p>
<h4 id="分配器"><a href="#分配器" class="headerlink" title="分配器"></a>分配器</h4><p>分配器为容器分配内存回收内存，使得我们不需要插手容器的内存管理</p>
<h4 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h4><p>算法是模板函数，独立于容器，更加泛化。(有一些容器里有同名重新处理过的函数)</p>
<h4 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h4><p>算法作用于容器的中介，存取数据的一种泛化指针，本质是一种用起来像指针的对象</p>
<h4 id="适配器"><a href="#适配器" class="headerlink" title="适配器"></a>适配器</h4><p>容器 / 仿函数 / 迭代器的转换，设计思想：适配器设计模式</p>
<h4 id="仿函数"><a href="#仿函数" class="headerlink" title="仿函数"></a>仿函数</h4><p>作用于容器元素的一种用起来像函数的类</p>
<h3 id="设计思想"><a href="#设计思想" class="headerlink" title="设计思想"></a>设计思想</h3><p>GP模板编程思想：容器与算法分开。</p>
<p>相对的，OO编程思想：把成员变量和成员函数封装起来。</p>
<h3 id="简单代码演示"><a href="#简单代码演示" class="headerlink" title="简单代码演示"></a>简单代码演示</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">vector&lt;int,allocator&lt;int&gt;&gt; vi(ia,ia+6); //容器 分配器</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;count_if(vi.begin(),vi.end(),not1(bind2nd(less&lt;<span class="keyword">int</span>&gt;(),<span class="number">40</span>)));</span><br><span class="line"><span class="comment">//less&lt;int&gt;()原本是a和b比较，bind2nd适配器绑定第二参数,用a和40比,not1适配是变成了大于等于条件</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>  学习自 : 侯捷 STL</p>
</blockquote>
]]></content>
      <categories>
        <category>C++</category>
        <category>STL</category>
      </categories>
      <tags>
        <tag>STL</tag>
      </tags>
  </entry>
  <entry>
    <title>单调队列</title>
    <url>/OXygenPanda.github.io/2020/10/07/leetcode/others/%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97/</url>
    <content><![CDATA[<h1 id="单调队列"><a href="#单调队列" class="headerlink" title="单调队列"></a>单调队列</h1><a id="more"></a>

<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>单调队列是一种特殊的数据结构。用来保持一个有序的队列。(无序的数据出队列)</p>
<p>通过适配 deque 而来。</p>
<h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt; <span class="class"><span class="keyword">class</span> <span class="title">Type</span> &gt;</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">monotonous_queue</span>&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">deque</span>&lt;Type&gt; data; <span class="comment">//或者使用queue</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(Type)</span></span>; <span class="comment">//尾部插入到单调队列中</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pop</span><span class="params">(Type)</span></span>; <span class="comment">//从头部离开单调队列</span></span><br><span class="line">    <span class="function">Type <span class="title">max</span><span class="params">()</span></span>; <span class="comment">//返回单调队列中的最大元素</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt; <span class="class"><span class="keyword">class</span> <span class="title">Type</span> &gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">monotonous_queue</span>&lt;Type&gt;:</span>:push(Type n)&#123;</span><br><span class="line">    <span class="keyword">while</span>(!data.empty() &amp;&amp; n &gt; data.back()) <span class="comment">//保持单调队列特性，尾部比输入小的数值全部舍弃</span></span><br><span class="line">        data.pop_back();</span><br><span class="line">    data.push_back(n);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt; <span class="class"><span class="keyword">class</span> <span class="title">Type</span> &gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">monotonous_queue</span>&lt;Type&gt;:</span>:pop(Type n)&#123; </span><br><span class="line">    <span class="keyword">if</span>(!data.empty() &amp;&amp; data.front() == n) <span class="comment">//有可能在pop之前，就因为push()中的步骤pop掉</span></span><br><span class="line">        data.pop_front();</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt; <span class="class"><span class="keyword">class</span> <span class="title">Type</span> &gt;</span></span><br><span class="line"><span class="class"><span class="title">Type</span> <span class="title">monotonous_queue</span>&lt;Type&gt;:</span>:max()&#123;</span><br><span class="line">    <span class="keyword">return</span> data.front();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实际上单调队列这一种数据结构使用的是队列中的<code>pop_back()</code>  <code>push_back()</code> <code>pop_front()</code> <code>back()</code> <code>front()</code> 方法，queue容器中不提供 <code>pop_back()</code> 方法，因此不可以通过适配 queue 而来。</p>
<h2 id="Leetcode-239-滑动窗口最大值"><a href="#Leetcode-239-滑动窗口最大值" class="headerlink" title="Leetcode 239 滑动窗口最大值"></a>Leetcode 239 滑动窗口最大值</h2><p>难度:hard</p>
<p>链接:<a href="https://leetcode-cn.com/problems/sliding-window-maximum/">https://leetcode-cn.com/problems/sliding-window-maximum/</a></p>
<p>源码:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">maxSlidingWindow</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    monotonous_queue&lt;<span class="keyword">int</span>&gt; mq;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.size();++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i&lt;k<span class="number">-1</span>) <span class="comment">//当前滑动窗口中的元素小于k个时,直接入队</span></span><br><span class="line">            mq.push(nums[i]);</span><br><span class="line">        <span class="keyword">else</span>&#123; <span class="comment">//入队后,输出窗口中的最大值给res,再弹出最前端为 nums[i-k+1] 的值,没有就不弹出</span></span><br><span class="line">            mq.push(nums[i]);</span><br><span class="line">            res.push_back(mq.max());</span><br><span class="line">            mq.pop(nums[i-k+<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>时间复杂度：O(N) </p>
<p>空间复杂度：O(k)</p>
<blockquote>
<p>  学习自labuladong</p>
</blockquote>
]]></content>
      <categories>
        <category>数据结构</category>
        <category>队列</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>队列</tag>
        <tag>单调队列</tag>
      </tags>
  </entry>
  <entry>
    <title>单调栈</title>
    <url>/OXygenPanda.github.io/2020/10/06/leetcode/others/%E5%8D%95%E8%B0%83%E6%A0%88/</url>
    <content><![CDATA[<h1 id="单调栈"><a href="#单调栈" class="headerlink" title="单调栈"></a>单调栈</h1><a id="more"></a>

<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>单调栈是一种特殊的数据结构。专门用于解决一类问题叫做 Next Greater Number的问题。</p>
<p>性质：单调栈本身还是栈，只是每一次入栈，都会使得栈的排列有序。(其实也就是不满足有序的元素都不要)</p>
<p>通过适配 stack 而来。</p>
<h1 id="Next-Greater-Number"><a href="#Next-Greater-Number" class="headerlink" title="Next Greater Number"></a>Next Greater Number</h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>找到数组中每一个数之后最近的一个比该数大的数字(两种情况，返回索引或返回数值)</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">next_greater_elem</span><span class="params">(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp; nums)</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">res</span><span class="params">(nums.size())</span></span>; <span class="comment">//为了倒序访问,提前确定大小方便索引</span></span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="built_in">pair</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;&gt; s; <span class="comment">//单调栈 : pair&lt;数字,索引&gt;</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=nums.size()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">        <span class="keyword">while</span>(!s.empty() &amp;&amp; s.top().first &lt;= nums[i]) <span class="comment">//如果栈顶端的数无法满足有序性,就全弹出</span></span><br><span class="line">            s.pop();</span><br><span class="line">        res[i] = (s.empty() == <span class="literal">true</span> ) ? <span class="number">0</span> : s.top().second-i; <span class="comment">//这里返回的是距离,也可返回索引或数值</span></span><br><span class="line">        s.push(<span class="built_in">pair</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;(nums[i],i)); <span class="comment">//插入pair&lt;数字,索引&gt;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>时间复杂度：O(N) </p>
<p>空间复杂度：O(N)</p>
<h2 id="Leetcode-相关题目"><a href="#Leetcode-相关题目" class="headerlink" title="Leetcode 相关题目"></a>Leetcode 相关题目</h2><p><a href="https://leetcode-cn.com/problems/next-greater-element-i/">496. 下一个更大元素I</a></p>
<p><a href="https://leetcode-cn.com/problems/next-greater-element-ii/">503.下一个更大元素II</a></p>
<p><a href="https://leetcode-cn.com/problems/number-of-days-in-a-month">1118.一月有多少天</a></p>
<blockquote>
<p>  学习自labuladong</p>
</blockquote>
]]></content>
      <categories>
        <category>数据结构</category>
        <category>栈</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>栈</tag>
        <tag>单调栈</tag>
      </tags>
  </entry>
  <entry>
    <title>二叉树的遍历</title>
    <url>/OXygenPanda.github.io/2020/09/25/CodingSkills/%E4%BA%8C%E5%8F%89%E6%A0%91%E9%81%8D%E5%8E%86/</url>
    <content><![CDATA[<h1 id="二叉树遍历"><a href="#二叉树遍历" class="headerlink" title="二叉树遍历"></a>二叉树遍历</h1><p align="center">
<a href="https://oxygenpanda.github.io/" target="_blank"><img alt="Website" src="https://img.shields.io/badge/博客-劳振煜的知識倉儲-faf2f2.svg?style=flat-square&logo=Blogger"></a>
<a href="https://www.github.com/OXygenPanda" target="_blank"><img src="https://img.shields.io/badge/Github-@劳振煜-f3e1e1.svg?style=flat-square&logo=GitHub"></a>
<a href="https://i.loli.net/2020/11/11/SBZ2mFJGKLjUtTO.jpg" target="_blank"><img src="https://img.shields.io/badge/微信-@OXygen-f1d1d1.svg?style=flat-square&logo=WeChat"></a>

<blockquote>
<p>  博客文章主要目的是分享和记录。</p>
<p>  分享给需要学习的同学，记录自己学习路上的点滴。</p>
</blockquote>
</p><p>相信大家对于二叉树的定义以及结构，在本科《数据结构与算法》课程中或者在其他同学的博客中有所了解。在此，不在过多地回顾课本理论知识。</p>
<a id="more"></a>

<p>我们编码语言主要为C++，如下是二叉树在C++中类的表现形式，这边使用的是 struct 结构体，在C++中类和结构体的区别在于不标志 public , private 以及 protected 时, 成员变量和成员函数是 public 还是 private 以及默认的继承方式是 public 还是 private。使用 struct 的原因在于，结构体更想表达的是一种数据的组织形式，而不是ADT。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span> &#123;</span></span><br><span class="line">  	<span class="keyword">int</span> val;</span><br><span class="line">  	TreeNode* left;</span><br><span class="line">  	TreeNode* right;</span><br><span class="line">  	TreeNode*(<span class="keyword">int</span> x):val(x),left(<span class="literal">nullptr</span>),right(<span class="literal">nullptr</span>)&#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>并且配图可以更好地理解二叉树的结构。</p>
<img src="https://i.loli.net/2020/10/17/tFRamoSqrQC6M2n.png">

<h2 id="二叉树的遍历方式"><a href="#二叉树的遍历方式" class="headerlink" title="二叉树的遍历方式"></a>二叉树的遍历方式</h2><p>在线性结构中，例如，在数组中我们采用索引值（即，地址偏移）的方式去遍历整个数组；在链表中我们采用迭代的方式去遍历整个链表。而二叉树和线性的数组和链表的最大区别在于，二叉树的每一个节点并非只有一个后继节点。因此就有了许多有趣的遍历方式。</p>
<h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><p>按照遍历顺序可以分为三种:</p>
<ul>
<li>前序</li>
<li>中序</li>
<li>后序</li>
<li>层序</li>
</ul>
<p>按照遍历算法的写法可以分为：</p>
<ul>
<li>DFS（对应前中后的递归）</li>
<li>BFS（对应层序）</li>
</ul>
<p>还可以根据是否采用迭代写法分为：</p>
<ul>
<li>迭代</li>
<li>递归</li>
</ul>
<h3 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h3><h4 id="递归框架（前序中序后序框架）"><a href="#递归框架（前序中序后序框架）" class="headerlink" title="递归框架（前序中序后序框架）"></a>递归框架（前序中序后序框架）</h4><p>首先是递归，也是最简单书写的一种，其代码框架如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">order</span><span class="params">(TreeNode * root)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(root == <span class="literal">nullptr</span>)	<span class="keyword">return</span>;</span><br><span class="line">  <span class="comment">// 前序</span></span><br><span class="line">  order(root-&gt;left);</span><br><span class="line">  <span class="comment">// 中序</span></span><br><span class="line">  order(root-&gt;right);</span><br><span class="line">  <span class="comment">// 后序</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h5><p><strong>优点</strong>：递归很简单，我们只需要记住这一个代码框架就可以完成前中后序遍历；</p>
<p><strong>缺点</strong>：递归过程中，从根节点出发不断递归左右节点，这一些函数调用的开销发生在栈空间，使得栈空间消耗巨大，甚至可能会导致栈溢出。</p>
<h5 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h5><p>那么，为什么这样就可以实现遍历呢？</p>
<ul>
<li><p>递归写法必须有一个递归出口，也就是我们框架函数体内第一个语句，也就是我们递归到了叶子节点的时候，会调用 <code>order(叶子节点的左孩子)</code> 和 <code>order(叶子节点的右孩子)</code> 。那么这两个调用我们就应该停止递归了，也就是遇到了 <code>root==nullptr</code> 这个条件为 <code>true </code> ，递归返回。</p>
</li>
<li><p>那么对于任意一个非空节点来说我们需要做什么？我们无非是要做 : 访问它，访问它的左孩子，访问它的右孩子这三件事。那么既然有三件事，一定会涉及到顺序问题。这三者的顺序不同，就分出了三种访问顺序：</p>
<ul>
<li><p>前序：根-左-右</p>
</li>
<li><p>中序：左-根-右</p>
</li>
<li><p>后序：左-右-根</p>
<p>比如，我们要按照中序的顺序输出二叉树的节点值：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">order</span><span class="params">(TreeNode* root)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="literal">nullptr</span>)	<span class="keyword">return</span>;</span><br><span class="line">    order(root-&gt;left);</span><br><span class="line">    <span class="comment">/*中序 begin */</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; root-&gt;val &lt;&lt; <span class="string">&#x27; &#x27;</span>; <span class="comment">//中序位置写执行语句,这一个区域写的root就是中序的节点</span></span><br><span class="line">    <span class="comment">/*中序 end */</span></span><br><span class="line">    order(root-&gt;right);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h4 id="迭代框架（前序框架-与-中序框架）"><a href="#迭代框架（前序框架-与-中序框架）" class="headerlink" title="迭代框架（前序框架 与 中序框架）"></a>迭代框架（前序框架 与 中序框架）</h4><p>迭代框架没有递归框架那么简单，既没有对前中后序以及层序的通用模板，也没有递归那么语句短小，接下来主要介绍：前序，中序，后序，层序的迭代框架（模板）。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">PreOrder</span><span class="params">(TreeNode *root)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line">    <span class="keyword">if</span> (!root) <span class="keyword">return</span> res;</span><br><span class="line">    <span class="built_in">stack</span>&lt;TreeNode *&gt; s;</span><br><span class="line">    <span class="keyword">while</span> (root || !s.empty()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (root) &#123;</span><br><span class="line">            s.push(root);</span><br><span class="line">            <span class="comment">// res.push_back(root-&gt;val);  // PreOrder</span></span><br><span class="line">            root = root-&gt;left;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            root = s.top();</span><br><span class="line">            s.pop();</span><br><span class="line">            <span class="comment">// res.push_back(root-&gt;val);  // InOrder</span></span><br><span class="line">            root = root-&gt;right;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>代码在上方，可以看到前序和中序的框架比较相似，在不同的位置执行操作，那么它的遍历顺序就可以不同。</p>
<h5 id="理解-1"><a href="#理解-1" class="headerlink" title="理解"></a>理解</h5><p>前序遍历，我们总是先读根节点（或者对根节点做一系列操作），如果左孩子存在，再去访问当前根节点的左孩子，那么我们要访问当前节点的左孩子，如果我们需要之后再访问右孩子，我们岂不是无法回到那个根节点了？（树的结构不支持子节点到父节点的指针）。所以，我们需要借助一个辅助栈来存放没有访问过右节点的根节点，等我们把左子树访问完毕之后，再提出之前的根节点，来访问他的右子树。</p>
<p><img src="https://i.loli.net/2020/10/17/xnbAWvpwgMqLfur.jpg"></p>
<p>如图，我们访问了节点1，去访问了节点2，那么我们访问完节点5之后需要回到节点1，再去访问节点3，因此必须把1给保留下来，但是我们不能用单个变量来保存节点1，因为在访问过程中，访问了节点2之后，访问节点4，再之后需要通过节点2，再去访问节点5，这样又需要一个变量来保存节点2，因此再迭代过程中，这个节点记录是一个变长的，所以需要一个辅助栈。</p>
<h4 id="迭代框架（后序框架）"><a href="#迭代框架（后序框架）" class="headerlink" title="迭代框架（后序框架）"></a>迭代框架（后序框架）</h4><p>前序和中序遍历的迭代框架是类似的，但是后序遍历的框架截然不同。后序遍历顺序：左-右-根。我们可以看到，后序的遍历顺序和前序遍历顺序（根-左-右）类似。我们可以稍微修改前序遍历的框架，再对数组进行反转，获得后序遍历顺序。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">PostOrder</span><span class="params">(TreeNode *root)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line">    <span class="keyword">if</span> (!root) <span class="keyword">return</span> res;</span><br><span class="line">    <span class="built_in">stack</span>&lt;TreeNode *&gt; visit;</span><br><span class="line">    TreeNode *cur = root;</span><br><span class="line">    TreeNode *pre = <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="keyword">while</span> (cur != <span class="literal">nullptr</span> || !visit.empty()) &#123;</span><br><span class="line">        <span class="keyword">while</span> (cur != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            visit.push(cur);</span><br><span class="line">            cur = cur-&gt;left;</span><br><span class="line">        &#125;</span><br><span class="line">        cur = visit.top();</span><br><span class="line">        <span class="keyword">if</span> (cur-&gt;right == <span class="literal">nullptr</span> || cur-&gt;right == pre) &#123;</span><br><span class="line">            visit.pop();</span><br><span class="line">            res.push_back(cur-&gt;val);</span><br><span class="line">            pre = cur;</span><br><span class="line">            cur = <span class="literal">nullptr</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            cur = cur-&gt;right;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">PostOrder_2</span><span class="params">(TreeNode *root)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line">    <span class="keyword">if</span> (!root) <span class="keyword">return</span> res;</span><br><span class="line">    <span class="built_in">stack</span>&lt;TreeNode *&gt; s;</span><br><span class="line">    TreeNode *p = root;</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">nullptr</span> || !s.empty()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (p != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            res.push_back(p-&gt;val); <span class="comment">//前序的位置</span></span><br><span class="line">            s.push(p);</span><br><span class="line">            p = p-&gt;right; <span class="comment">//区别在于遍历顺序是 根-右-左</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(!s.empty())&#123;</span><br><span class="line">            p = s.top();</span><br><span class="line">            s.pop();</span><br><span class="line">            p = p-&gt;left;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    reverse(res.begin(),res.end()); <span class="comment">//得到 根-右-左, 反转之后得到 左-右-根</span></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="理解-2"><a href="#理解-2" class="headerlink" title="理解"></a>理解</h5><p>可以看一下以上的代码：<code>PostOrder(TreeNode* root)</code> 是正常思路的后序遍历迭代写法，而 <code>PostOrder_2(TreeNode* root)</code> 是前序遍历反转的写法。个人感觉前序遍历反转的模板和前序中序模板类似，思想方式较为统一。</p>
<h4 id="迭代框架（层序遍历）"><a href="#迭代框架（层序遍历）" class="headerlink" title="迭代框架（层序遍历）"></a>迭代框架（层序遍历）</h4><p>层序遍历其实就是BFS的思想，遍历的顺序是按层从低到高来遍历。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">levelOrder</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; res;</span><br><span class="line">    <span class="keyword">if</span>(!root)   <span class="keyword">return</span> res;</span><br><span class="line">    <span class="built_in">deque</span>&lt;TreeNode*&gt; q;</span><br><span class="line">    q.push_back(root);</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">        <span class="keyword">int</span> size = q.size();</span><br><span class="line">        res.push_back(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;());</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= size;++i)&#123;</span><br><span class="line">            TreeNode* node = q.front();q.pop_front();</span><br><span class="line">            res.back().push_back(node-&gt;val);</span><br><span class="line">            <span class="keyword">if</span>(node-&gt;left)  q.push_back(node-&gt;left);</span><br><span class="line">            <span class="keyword">if</span>(node-&gt;right) q.push_back(node-&gt;right);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="理解-3"><a href="#理解-3" class="headerlink" title="理解"></a>理解</h5><p><img src="https://i.loli.net/2020/10/17/Ct2SP5GclqrK4VF.jpg"></p>
<p>层序遍历相较于前中后序来说，它访问到了当前节点的兄弟节点以后，我们无法访问前节点的孩子节点。因此，这里不同的是，需要一个辅助的队列来存放同层的节点。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>那么，二叉树的常见遍历写法都在这边啦。</p>
<p>递归写法因为每一个节点访问一次，所以时间复杂度为:<code>O(N)</code>，而递归需要在栈空间里开辟许多空间，平均递归的深度是logN，因此空间复杂度也是:<code>O(logN)</code>。</p>
<p>迭代写法因为每一个节点访问一次，所以时间复杂度为:<code>O(N)</code>，而迭代需要一个辅助栈或者辅助队列，平均的情况是把logN的节点放入栈或队列，最差的情况是把大多数节点全部放入栈或队列，因此空间复杂度也是：<code>O(logN)</code>。</p>
<p>而还有一个遍历写法叫做morris遍历，它能够实现空间复杂度为<code>O(1)</code>。但是写法较为复杂，准备另外再写一篇关于morris遍历的模板。</p>
]]></content>
      <categories>
        <category>数据结构</category>
        <category>二叉树</category>
      </categories>
      <tags>
        <tag>二叉树</tag>
      </tags>
  </entry>
</search>
