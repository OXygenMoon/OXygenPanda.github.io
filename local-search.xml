<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>测试图片</title>
    <link href="/OXygenPanda.github.io/2020/10/09/%E6%B5%8B%E8%AF%95%E5%9B%BE%E7%89%87/"/>
    <url>/OXygenPanda.github.io/2020/10/09/%E6%B5%8B%E8%AF%95%E5%9B%BE%E7%89%87/</url>
    
    <content type="html"><![CDATA[<h1 id="测试一下"><a href="#测试一下" class="headerlink" title="测试一下"></a>测试一下</h1><p><img src="/OXygenPanda.github.io/OXygenPanda.github/p1.png" alt="1"></p><p><img src="/OXygenPanda.github.io/OXygenPanda.github/p2.png" alt="2"></p><p><src img="index/p1.png"></src></p><p><src img="index/p2.png"></src></p><src img="index/p1.png"></src>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>初识STL</title>
    <link href="/OXygenPanda.github.io/2020/10/07/%E5%88%9D%E8%AF%86STL%202/"/>
    <url>/OXygenPanda.github.io/2020/10/07/%E5%88%9D%E8%AF%86STL%202/</url>
    
    <content type="html"><![CDATA[<a id="more"></a><h1 id="STL"><a href="#STL" class="headerlink" title="STL"></a>STL</h1><p>什么是STL？STL : standard Template Library 标准模板库，STL是C++的一个重要组成部分。</p><p>STL包含了众多头文件 :</p><table><thead><tr><th>头文件名称</th><th>类型</th></tr></thead><tbody><tr><td>&lt;algorithm&gt;</td><td>算法</td></tr><tr><td>&lt;deque&gt;</td><td>容器</td></tr><tr><td>&lt;functional&gt;</td><td>仿函数</td></tr><tr><td>&lt;iterator&gt;</td><td>迭代器</td></tr><tr><td>&lt;vector&gt;</td><td>容器</td></tr><tr><td>&lt;list&gt;</td><td>容器</td></tr><tr><td>&lt;map&gt;</td><td>容器</td></tr><tr><td>&lt;memory.h&gt;</td><td>智能指针</td></tr><tr><td>&lt;numeric&gt;</td><td>数值算法</td></tr><tr><td>&lt;queue&gt;</td><td>容器</td></tr><tr><td>&lt;set&gt;</td><td>容器</td></tr><tr><td>&lt;stack&gt;</td><td>容器</td></tr><tr><td>&lt;utility&gt;</td><td>比较符 + pair</td></tr></tbody></table><p>浏览完以上这一个表格，可以简单了解到STL的组成。</p><h2 id="六大部件"><a href="#六大部件" class="headerlink" title="六大部件"></a>六大部件</h2><p>STL主要包含六个部件：</p><ul><li>容器 containers 是一个class template</li><li>分配器 allocators 是一个 class template</li><li>算法 algorithms 是一个 function template(用起来像函数)</li><li>迭代器 iterators 是一个 class template</li><li>适配器 adapters 是一个 class template</li><li>仿函数 functors 是一个 class template</li></ul><h3 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h3><h4 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h4><p>容器是数据的承载，容器的设计使得我们”看不到”内存</p><h4 id="分配器"><a href="#分配器" class="headerlink" title="分配器"></a>分配器</h4><p>分配器为容器分配内存回收内存，使得我们不需要插手容器的内存管理</p><h4 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h4><p>算法是模板函数，独立于容器，更加泛化。(有一些容器里有同名重新处理过的函数)</p><h4 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h4><p>算法作用于容器的中介，存取数据的一种泛化指针，本质是一种用起来像指针的对象</p><h4 id="适配器"><a href="#适配器" class="headerlink" title="适配器"></a>适配器</h4><p>容器 / 仿函数 / 迭代器的转换，设计思想：适配器设计模式</p><h4 id="仿函数"><a href="#仿函数" class="headerlink" title="仿函数"></a>仿函数</h4><p>作用于容器元素的一种用起来像函数的类</p><h3 id="设计思想"><a href="#设计思想" class="headerlink" title="设计思想"></a>设计思想</h3><p>GP模板编程思想：容器与算法分开。</p><p>相对的，OO编程思想：把成员变量和成员函数封装起来。</p><h3 id="简单代码演示"><a href="#简单代码演示" class="headerlink" title="简单代码演示"></a>简单代码演示</h3><pre><code class="hljs C++">vector&lt;int,allocator&lt;int&gt;&gt; vi(ia,ia+6); //容器 分配器<span class="hljs-built_in">cout</span>&lt;&lt;count_if(vi.begin(),vi.end(),not1(bind2nd(less&lt;<span class="hljs-keyword">int</span>&gt;(),<span class="hljs-number">40</span>)));<span class="hljs-comment">//less&lt;int&gt;()原本是a和b比较，bind2nd适配器绑定第二参数,用a和40比,not1适配是变成了大于等于条件</span></code></pre><blockquote><p>  学习自 : 侯捷 STL</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>STL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>STL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>单调队列</title>
    <link href="/OXygenPanda.github.io/2020/10/07/%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97/"/>
    <url>/OXygenPanda.github.io/2020/10/07/%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97/</url>
    
    <content type="html"><![CDATA[<a id="more"></a><h1 id="单调队列"><a href="#单调队列" class="headerlink" title="单调队列"></a>单调队列</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>单调队列是一种特殊的数据结构。用来保持一个有序的队列。(无序的数据出队列)</p><p>通过适配 deque 而来。</p><h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><pre><code class="hljs c++"><span class="hljs-keyword">template</span>&lt; <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Type</span> &gt;</span><span class="hljs-class"><span class="hljs-title">class</span> <span class="hljs-title">monotonous_queue</span>&#123;</span><span class="hljs-keyword">private</span>:    <span class="hljs-built_in">deque</span>&lt;Type&gt; data; <span class="hljs-comment">//或者使用queue</span><span class="hljs-keyword">public</span>:    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">push</span><span class="hljs-params">(Type)</span></span>; <span class="hljs-comment">//尾部插入到单调队列中</span>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">pop</span><span class="hljs-params">(Type)</span></span>; <span class="hljs-comment">//从头部离开单调队列</span>    <span class="hljs-function">Type <span class="hljs-title">max</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">//返回单调队列中的最大元素</span>&#125;;</code></pre><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><pre><code class="hljs C++"><span class="hljs-keyword">template</span> &lt; <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Type</span> &gt;</span><span class="hljs-class"><span class="hljs-title">void</span> <span class="hljs-title">monotonous_queue</span>&lt;Type&gt;:</span>:push(Type n)&#123;    <span class="hljs-keyword">while</span>(!data.empty() &amp;&amp; n &gt; data.back()) <span class="hljs-comment">//保持单调队列特性，尾部比输入小的数值全部舍弃</span>        data.pop_back();    data.push_back(n);    <span class="hljs-keyword">return</span>;&#125;<span class="hljs-keyword">template</span> &lt; <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Type</span> &gt;</span><span class="hljs-class"><span class="hljs-title">void</span> <span class="hljs-title">monotonous_queue</span>&lt;Type&gt;:</span>:pop(Type n)&#123;     <span class="hljs-keyword">if</span>(!data.empty() &amp;&amp; data.front() == n) <span class="hljs-comment">//有可能在pop之前，就因为push()中的步骤pop掉</span>        data.pop_front();    <span class="hljs-keyword">return</span>;&#125;<span class="hljs-keyword">template</span> &lt; <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Type</span> &gt;</span><span class="hljs-class"><span class="hljs-title">Type</span> <span class="hljs-title">monotonous_queue</span>&lt;Type&gt;:</span>:max()&#123;    <span class="hljs-keyword">return</span> data.front();&#125;</code></pre><p>实际上单调队列这一种数据结构使用的是队列中的<code>pop_back()</code>  <code>push_back()</code> <code>pop_front()</code> <code>back()</code> <code>front()</code> 方法，queue容器中不提供 <code>pop_back()</code> 方法，因此不可以通过适配 queue 而来。</p><h2 id="Leetcode-239-滑动窗口最大值"><a href="#Leetcode-239-滑动窗口最大值" class="headerlink" title="Leetcode 239 滑动窗口最大值"></a>Leetcode 239 滑动窗口最大值</h2><p>难度:hard</p><p>链接:<a href="https://leetcode-cn.com/problems/sliding-window-maximum/">https://leetcode-cn.com/problems/sliding-window-maximum/</a></p><p>源码:</p><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">maxSlidingWindow</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; nums, <span class="hljs-keyword">int</span> k)</span> </span>&#123;    monotonous_queue&lt;<span class="hljs-keyword">int</span>&gt; mq;    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; res;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;nums.size();++i)&#123;        <span class="hljs-keyword">if</span>(i&lt;k<span class="hljs-number">-1</span>) <span class="hljs-comment">//当前滑动窗口中的元素小于k个时,直接入队</span>            mq.push(nums[i]);        <span class="hljs-keyword">else</span>&#123; <span class="hljs-comment">//入队后,输出窗口中的最大值给res,再弹出最前端为 nums[i-k+1] 的值,没有就不弹出</span>            mq.push(nums[i]);            res.push_back(mq.max());            mq.pop(nums[i-k+<span class="hljs-number">1</span>]);        &#125;    &#125;    <span class="hljs-keyword">return</span> res;&#125;</code></pre><p>时间复杂度：O(N) </p><p>空间复杂度：O(k)</p><blockquote><p>  学习自labuladong</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
      <category>队列</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>单调队列</tag>
      
      <tag>队列</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>单调栈</title>
    <link href="/OXygenPanda.github.io/2020/10/06/%E5%8D%95%E8%B0%83%E6%A0%88/"/>
    <url>/OXygenPanda.github.io/2020/10/06/%E5%8D%95%E8%B0%83%E6%A0%88/</url>
    
    <content type="html"><![CDATA[<a id="more"></a><h1 id="单调栈"><a href="#单调栈" class="headerlink" title="单调栈"></a>单调栈</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>单调栈是一种特殊的数据结构。专门用于解决一类问题叫做 Next Greater Number的问题。</p><p>性质：单调栈本身还是栈，只是每一次入栈，都会使得栈的排列有序。(其实也就是不满足有序的元素都不要)</p><p>通过适配 stack 而来。</p><h1 id="Next-Greater-Number"><a href="#Next-Greater-Number" class="headerlink" title="Next Greater Number"></a>Next Greater Number</h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>找到数组中每一个数之后最近的一个比该数大的数字(两种情况，返回索引或返回数值)</p><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">next_greater_elem</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; &amp; nums)</span></span>&#123;    <span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">res</span><span class="hljs-params">(nums.size())</span></span>; <span class="hljs-comment">//为了倒序访问,提前确定大小方便索引</span>    <span class="hljs-built_in">stack</span>&lt;<span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt;&gt; s; <span class="hljs-comment">//单调栈 : pair&lt;数字,索引&gt;</span>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=nums.size()<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">0</span>;i--)&#123;        <span class="hljs-keyword">while</span>(!s.empty() &amp;&amp; s.top().first &lt;= nums[i]) <span class="hljs-comment">//如果栈顶端的数无法满足有序性,就全弹出</span>            s.pop();        res[i] = (s.empty() == <span class="hljs-literal">true</span> ) ? <span class="hljs-number">0</span> : s.top().second-i; <span class="hljs-comment">//这里返回的是距离,也可返回索引或数值</span>        s.push(<span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt;(nums[i],i)); <span class="hljs-comment">//插入pair&lt;数字,索引&gt;</span>    &#125;    <span class="hljs-keyword">return</span> res;&#125;</code></pre><p>时间复杂度：O(N) </p><p>空间复杂度：O(N)</p><h2 id="Leetcode-相关题目"><a href="#Leetcode-相关题目" class="headerlink" title="Leetcode 相关题目"></a>Leetcode 相关题目</h2><p><a href="https://leetcode-cn.com/problems/next-greater-element-i/">496. 下一个更大元素I</a></p><p><a href="https://leetcode-cn.com/problems/next-greater-element-ii/">503.下一个更大元素II</a></p><p><a href="https://leetcode-cn.com/problems/number-of-days-in-a-month">1118.一月有多少天</a></p><blockquote><p>  学习自labuladong</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
      <category>栈</category>
      
    </categories>
    
    
    <tags>
      
      <tag>单调栈</tag>
      
      <tag>栈</tag>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>二叉树的遍历</title>
    <link href="/OXygenPanda.github.io/2020/09/25/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <url>/OXygenPanda.github.io/2020/09/25/%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
    
    <content type="html"><![CDATA[<a id="more"></a><h1 id="二叉树的递归方式"><a href="#二叉树的递归方式" class="headerlink" title="二叉树的递归方式"></a>二叉树的递归方式</h1><blockquote><p>博客文章主要目的是分享和记录。</p><p>分享给需要学习的同学，记录自己学习路上的点滴。</p></blockquote><p>首先，相信大家对于二叉树的定义以及结构，在本科《数据结构与算法》课程中或者在其他同学的博客中有所了解。在此，不在过多地回顾课本理论知识。</p><p>我们编码语言主要为C++，如下是二叉树在C++中类的表现形式，这边使用的是 struct 结构体，在C++中类和结构体的区别在于不标志 public , private 以及 protected 时, 成员变量和成员函数是 public 还是 private。使用 struct 的原因在于，结构体更想表达的是一种数据的组织形式。</p><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">TreeNode</span> &#123;</span>  <span class="hljs-keyword">int</span> val;  TreeNode* left;  TreeNode* right;  TreeNode*(<span class="hljs-keyword">int</span> x):val(x),left(<span class="hljs-literal">nullptr</span>),right(<span class="hljs-literal">nullptr</span>)&#123;&#125;&#125;;</code></pre><p>并且配图可以更好地理解二叉树的结构。</p><p><img src="/OXygenPanda.github.io/OXygenPanda.github/binaryTreeNode.png" alt="p1"></p><h2 id="二叉树的递归方式——递归"><a href="#二叉树的递归方式——递归" class="headerlink" title="二叉树的递归方式——递归"></a>二叉树的递归方式——递归</h2><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><p>二叉树的递归方式可以分为三种:</p><ul><li>递归</li><li>迭代</li><li>Morris</li></ul><h3 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h3><p>这一篇主要讲的是递归，也是最简单书写的一种，其代码框架如下：</p><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">order</span><span class="hljs-params">(TreeNode * root)</span></span>&#123;  <span class="hljs-keyword">if</span>(root == <span class="hljs-literal">nullptr</span>)<span class="hljs-keyword">return</span>;  <span class="hljs-comment">// 前序</span>  order(root-&gt;left);  <span class="hljs-comment">// 中序</span>  order(root-&gt;right);  <span class="hljs-comment">// 后序</span>  <span class="hljs-keyword">return</span>;&#125;</code></pre><h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3><p>递归的简单在于我们只需要这么一个代码框架即可，记住理解这一个框架几乎不需要花费多少时间。那么它的缺点是什么呢？缺点是递归过程中，从根节点出发不断递归左右节点，这一些函数调用的开销发生在栈空间，使得栈空间消耗巨大，甚至可能会导致栈溢出。</p><h3 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h3><p>那么，为什么这样就可以实现遍历呢？</p><ul><li><p>递归语句是有一个递归出口的，也就是我们框架函数体内第一个语句，当 当前节点 为空时，那么我们也就不需要访问这个节点也没有必要去访问它的左右孩子因为它没有。</p></li><li><p>那么对于任意一个非空节点来说我们需要做什么？我们无非是要做 : 访问它，访问它的左孩子，访问它的右孩子这三件事。那么既然有三件事，一定会涉及到顺序问题。这个时候你是不是有感觉了？我们先访问自己，再访问左孩子，最后访问右孩子不就是先序遍历的顺序嘛？因此，我们想要先序遍历一棵二叉树时，我们只需要把访问或者处理语句放在最前面，再对左孩子做同样的事情，最后对右孩子做同样的事情。中序遍历和后续遍历类似于此。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
      <category>二叉树</category>
      
      <category>二叉树的遍历</category>
      
    </categories>
    
    
    <tags>
      
      <tag>二叉树</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>二叉树的遍历</title>
    <link href="/OXygenPanda.github.io/2020/09/25/%E4%BA%8C%E5%8F%89%E6%A0%91%E9%81%8D%E5%8E%86/"/>
    <url>/OXygenPanda.github.io/2020/09/25/%E4%BA%8C%E5%8F%89%E6%A0%91%E9%81%8D%E5%8E%86/</url>
    
    <content type="html"><![CDATA[<a id="more"></a><h1 id="二叉树的递归方式"><a href="#二叉树的递归方式" class="headerlink" title="二叉树的递归方式"></a>二叉树的递归方式</h1><blockquote><p>博客文章主要目的是分享和记录。</p><p>分享给需要学习的同学，记录自己学习路上的点滴。</p></blockquote><p>首先，相信大家对于二叉树的定义以及结构，在本科《数据结构与算法》课程中或者在其他同学的博客中有所了解。在此，不在过多地回顾课本理论知识。</p><p>我们编码语言主要为C++，如下是二叉树在C++中类的表现形式，这边使用的是 struct 结构体，在C++中类和结构体的区别在于不标志 public , private 以及 protected 时, 成员变量和成员函数是 public 还是 private。使用 struct 的原因在于，结构体更想表达的是一种数据的组织形式。</p><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">TreeNode</span> &#123;</span>  <span class="hljs-keyword">int</span> val;  TreeNode* left;  TreeNode* right;  TreeNode*(<span class="hljs-keyword">int</span> x):val(x),left(<span class="hljs-literal">nullptr</span>),right(<span class="hljs-literal">nullptr</span>)&#123;&#125;&#125;;</code></pre><p>并且配图可以更好地理解二叉树的结构。</p><p><img src="/OXygenPanda.github.io/OXygenPanda.github/p1.png" alt="p1"></p><p><img src="/OXygenPanda.github.io/OXygenPanda.github/p2.png" alt="p2"></p><h2 id="二叉树的递归方式——递归"><a href="#二叉树的递归方式——递归" class="headerlink" title="二叉树的递归方式——递归"></a>二叉树的递归方式——递归</h2><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><p>二叉树的递归方式可以分为三种:</p><ul><li>递归</li><li>迭代</li><li>Morris</li></ul><h3 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h3><p>这一篇主要讲的是递归，也是最简单书写的一种，其代码框架如下：</p><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">order</span><span class="hljs-params">(TreeNode * root)</span></span>&#123;  <span class="hljs-keyword">if</span>(root == <span class="hljs-literal">nullptr</span>)<span class="hljs-keyword">return</span>;  <span class="hljs-comment">// 前序</span>  order(root-&gt;left);  <span class="hljs-comment">// 中序</span>  order(root-&gt;right);  <span class="hljs-comment">// 后序</span>  <span class="hljs-keyword">return</span>;&#125;</code></pre><h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3><p>递归的简单在于我们只需要这么一个代码框架即可，记住理解这一个框架几乎不需要花费多少时间。那么它的缺点是什么呢？缺点是递归过程中，从根节点出发不断递归左右节点，这一些函数调用的开销发生在栈空间，使得栈空间消耗巨大，甚至可能会导致栈溢出。</p><h3 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h3><p>那么，为什么这样就可以实现遍历呢？</p><ul><li><p>递归语句是有一个递归出口的，也就是我们框架函数体内第一个语句，当 当前节点 为空时，那么我们也就不需要访问这个节点也没有必要去访问它的左右孩子因为它没有。</p></li><li><p>那么对于任意一个非空节点来说我们需要做什么？我们无非是要做 : 访问它，访问它的左孩子，访问它的右孩子这三件事。那么既然有三件事，一定会涉及到顺序问题。这个时候你是不是有感觉了？我们先访问自己，再访问左孩子，最后访问右孩子不就是先序遍历的顺序嘛？因此，我们想要先序遍历一棵二叉树时，我们只需要把访问或者处理语句放在最前面，再对左孩子做同样的事情，最后对右孩子做同样的事情。中序遍历和后续遍历类似于此。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
      <category>二叉树</category>
      
      <category>二叉树的遍历</category>
      
    </categories>
    
    
    <tags>
      
      <tag>二叉树</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
