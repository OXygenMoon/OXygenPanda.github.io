<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>剑指 Offer 07. 重建二叉树</title>
    <link href="/2020/10/16/%E5%89%91%E6%8C%87Offer%2007/"/>
    <url>/2020/10/16/%E5%89%91%E6%8C%87Offer%2007/</url>
    
    <content type="html"><![CDATA[<h2 id="剑指-Offer-07-重建二叉树"><a href="#剑指-Offer-07-重建二叉树" class="headerlink" title="剑指 Offer 07. 重建二叉树"></a>剑指 Offer 07. 重建二叉树</h2><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p><a href="https://leetcode-cn.com/problems/shu-zu-zhong-zhong-fu-de-shu-zi-lcof/">剑指 Offer 07. 重建二叉树</a></p><p><strong>难度:</strong><font color="orange">中等</font></p><p><strong>描述</strong></p><p>输入某二叉树的前序遍历和中序遍历的结果，请重建该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。</p><p><strong>示例</strong></p><pre><code class="hljs cpp">例如，给出前序遍历 preorder = [<span class="hljs-number">3</span>,<span class="hljs-number">9</span>,<span class="hljs-number">20</span>,<span class="hljs-number">15</span>,<span class="hljs-number">7</span>]中序遍历 inorder = [<span class="hljs-number">9</span>,<span class="hljs-number">3</span>,<span class="hljs-number">15</span>,<span class="hljs-number">20</span>,<span class="hljs-number">7</span>]    限制：<span class="hljs-number">0</span> &lt;= 节点个数 &lt;= <span class="hljs-number">5000</span></code></pre><p>返回如下的二叉树：</p><img src="https://i.loli.net/2020/10/17/izmOr39HkujLW86.png"><pre><code class="hljs cpp">函数签名:<span class="hljs-function">TreeNode* <span class="hljs-title">buildTree</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; preorder, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; inorder)</span></span>;</code></pre><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>事实上，我们通过遍历顺序还原二叉树，必须知道中序遍历以及前序后序中的一种，就可以还原出唯一的一棵二叉树。这一道题目是前序和中序还原二叉树，leetcode中也有中序和后序还原二叉树，解法其实是类似的。</p><p><a href="https://leetcode-cn.com/problems/construct-binary-tree-from-inorder-and-postorder-traversal/">106. 从中序与后序遍历序列构造二叉树</a></p><p>还原思路主要是依据前序和中序顺序的特点。</p><ul><li>前序的第一个节点一定是树的根节点；</li><li>中序中根节点的左侧为左子树节点，右侧为右子树节点；</li><li>前序中除去根节点以外，左子树的节点集中在左边，右子树的节点集中在右边；</li><li>对于每一颗子树来说，也满足以上两个特点。</li></ul><img src="https://i.loli.net/2020/10/17/5ekJB1Vy2nLoGhP.jpg"><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><pre><code class="hljs cpp"><span class="hljs-function">TreeNode* <span class="hljs-title">buildTree</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; preorder, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; inorder)</span> </span>&#123;    <span class="hljs-comment">//函数签名不支持我们方便的书写递归,因此再构建一个函数</span>    <span class="hljs-keyword">return</span> build(preorder,<span class="hljs-number">0</span>,preorder.size()<span class="hljs-number">-1</span>,inorder,<span class="hljs-number">0</span>,inorder.size()<span class="hljs-number">-1</span>);&#125;<span class="hljs-function">TreeNode* <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; preorder, <span class="hljs-keyword">int</span> pbegin, <span class="hljs-keyword">int</span> pend, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; inorder, <span class="hljs-keyword">int</span> ibegin, <span class="hljs-keyword">int</span> iend)</span></span>&#123;    <span class="hljs-keyword">if</span>(pbegin &gt; pend) <span class="hljs-comment">//剪枝条件</span>        <span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;    <span class="hljs-keyword">int</span> midnum = preorder[pbegin]; <span class="hljs-comment">//特点1:前序第一个节点是根节点</span>    <span class="hljs-keyword">int</span> index = <span class="hljs-number">0</span>;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=ibegin;i&lt;=iend;++i)        <span class="hljs-keyword">if</span>(inorder[i] == midnum) <span class="hljs-comment">//利用特点2之前需要找到中序中的根节点</span>            index = i;    <span class="hljs-keyword">int</span> leftsize = index - ibegin; <span class="hljs-comment">// 找到左子树的节点数</span>    TreeNode * node = <span class="hljs-keyword">new</span> TreeNode(midnum);    node-&gt;left = build(preorder,pbegin+<span class="hljs-number">1</span>,pbegin+leftsize,inorder,ibegin,index<span class="hljs-number">-1</span>); <span class="hljs-comment">//构建左子树</span>    node-&gt;right = build(preorder,pbegin+leftsize+<span class="hljs-number">1</span>,pend,inorder,index+<span class="hljs-number">1</span>,iend); <span class="hljs-comment">//构建右子树</span>    <span class="hljs-keyword">return</span> node;&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>Leetcode</category>
      
      <category>剑指 Offer 专题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Leetcode</tag>
      
      <tag>二叉树</tag>
      
      <tag>中等</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>剑指 Offer 06. 从尾到头打印链表</title>
    <link href="/2020/10/14/%E5%89%91%E6%8C%87Offer%2006/"/>
    <url>/2020/10/14/%E5%89%91%E6%8C%87Offer%2006/</url>
    
    <content type="html"><![CDATA[<h2 id="剑指-Offer-06-从尾到头打印链表"><a href="#剑指-Offer-06-从尾到头打印链表" class="headerlink" title="剑指 Offer 06. 从尾到头打印链表"></a>剑指 Offer 06. 从尾到头打印链表</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p><a href="https://leetcode-cn.com/problems/shu-zu-zhong-zhong-fu-de-shu-zi-lcof/">剑指 Offer 06. 从尾到头打印链表</a></p><p><strong>难度:</strong><font color="green">简单</font></p><p><strong>描述</strong></p><p>输入一个链表的头节点，从尾到头反过来返回每个节点的值（用数组返回）。</p><p><strong>示例</strong></p><pre><code class="hljs c">输入：    head = [<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>]输出：    [<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>]限制:<span class="hljs-number">0</span> &lt;= 链表长度 &lt;= <span class="hljs-number">10000</span>函数签名:<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; reversePrint(ListNode* head);</code></pre><h3 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h3><p>第一种思路栈。</p><p>我们看到了 <em>反过来</em> 这几个字眼，心里应该要知道这个地方可以借助一个辅助栈来完成。栈这一种数据结构的特性是先进后出，那么原本是<code>1-2-3-4-5</code> 的序列，经过 <strong>入栈</strong> 和 <strong>出栈</strong> 的操作之后，就变成了 <code>5-4-3-2-1</code> 的序列。</p><p>那么来看这一个题目，一个链表遍历的方法是迭代遍历而不是地址偏移的随机访问遍历，因此我们在遍历过程中把节点的值放入一个辅助栈中，当链表遍历完成后，再将辅助栈的数值给赋值到一个数组中返回。</p><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">reversePrint</span><span class="hljs-params">(ListNode* head)</span> </span>&#123;    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; res; <span class="hljs-comment">//结果</span>    <span class="hljs-built_in">stack</span>&lt;<span class="hljs-keyword">int</span>&gt; s; <span class="hljs-comment">//辅助栈</span>    <span class="hljs-keyword">if</span>(!head)   <span class="hljs-keyword">return</span> res;    ListNode* cur = head; <span class="hljs-comment">//尽量不破坏传入的指针</span>    <span class="hljs-keyword">while</span>(cur)&#123;        <span class="hljs-comment">//正序遍历链表,将值入栈</span>        s.push(cur-&gt;val);         cur = cur-&gt;next;    &#125;    <span class="hljs-keyword">while</span>(!s.empty())&#123;        <span class="hljs-comment">//将值出栈</span>        res.push_back(s.top());        s.pop();    &#125;    <span class="hljs-keyword">return</span> res;&#125;</code></pre><p>因为我们只需要遍历一次链表和访问<code>N</code>次栈，而空间需要一个返回的<code>vector&lt;int&gt;</code>的结果和一个辅助栈。</p><p>因此，时间复杂度 : <code>O(N)</code> 空间复杂度 : <code>O(N)</code> 。</p><h3 id="解法一·改进"><a href="#解法一·改进" class="headerlink" title="解法一·改进"></a>解法一·改进</h3><p>仍然是解法一的思路。</p><p>我们可以不需要一个栈，而是反转数组。</p><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">reversePrint</span><span class="hljs-params">(ListNode* head)</span> </span>&#123;        <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; res; <span class="hljs-comment">//结果</span>        <span class="hljs-keyword">if</span>(!head)   <span class="hljs-keyword">return</span> res;        ListNode* cur = head;        <span class="hljs-keyword">while</span>(cur)&#123;            <span class="hljs-comment">//正序遍历链表,直接加入到数组中</span>            res.push_back(cur-&gt;val);            cur = cur-&gt;next;        &#125;    <span class="hljs-comment">//用反向迭代器创建一个vector&lt;int&gt;对象</span>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;(res.rbegin(),res.rend());&#125;</code></pre><pre><code class="hljs c"><span class="hljs-comment">//这里偷懒使用了反向迭代器</span><span class="hljs-comment">//也可以使用双指针原地反转数组</span><span class="hljs-keyword">int</span> left = <span class="hljs-number">0</span>, right = res.size() - <span class="hljs-number">1</span>;<span class="hljs-keyword">while</span>(left &lt; right)&#123;    <span class="hljs-keyword">int</span> tmp = res[left];    res[left] = res[right];    res[right] = tmp;    left ++;    right --;&#125;</code></pre><p>时间复杂度 : <code>O(N)</code> 空间复杂度 : <code>O(N)</code> 。</p><h3 id="解法二"><a href="#解法二" class="headerlink" title="解法二"></a>解法二</h3><p>第二种思路是利用链表和数组的迭代次数与索引的关系。</p><p>我们可以想到，链表的迭代次数和数组的索引值是有一定关系的：<code>迭代次数 + 索引值 = 链表长度 - 1</code></p><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">reversePrint</span><span class="hljs-params">(ListNode* head)</span> </span>&#123;    <span class="hljs-keyword">if</span>(!head)   <span class="hljs-keyword">return</span> &#123;&#125;;        <span class="hljs-keyword">int</span> count = <span class="hljs-number">0</span>;    ListNode* cur = head;    <span class="hljs-keyword">while</span>(cur)&#123;       <span class="hljs-comment">//遍历计数链表长度</span>        count ++;        cur = cur-&gt;next;     &#125;            <span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">res</span><span class="hljs-params">(count)</span></span>; <span class="hljs-comment">//创建链表长度的数组</span>    <span class="hljs-keyword">int</span> index = count - <span class="hljs-number">1</span>;    cur = head;    <span class="hljs-keyword">while</span>(cur)&#123;        <span class="hljs-comment">//利用关系</span>        res[index--] = cur-&gt;val;        cur = cur-&gt;next;    &#125;    <span class="hljs-keyword">return</span> res;&#125;</code></pre><blockquote><p>  这里第11行，<code>vector&lt;int&gt; res(count);</code> 是必须的。如果没有使用传入一个整型值来确定<code>res</code>的构造函数来构造对象的话，<code>res.size()</code> 和 <code>res.capacity()</code> 都会是0，因此无法使用例如<code>res[8]</code>这样的方式去存取数值。如果没有了解过这一方面的知识，可以看我之前的一篇文章：<a href="https://blog.csdn.net/qq_32416781/article/details/109071413">浅析STL中vector容器的用法/特性/实现</a>。</p></blockquote><p>时间复杂度 : <code>O(N)</code> , 空间复杂度 :  <code>O(N)</code>。 </p>]]></content>
    
    
    <categories>
      
      <category>Leetcode</category>
      
      <category>剑指 Offer 专题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Leetcode</tag>
      
      <tag>简单</tag>
      
      <tag>链表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>剑指 Offer 04. 二维数组中的查找</title>
    <link href="/2020/10/12/%E5%89%91%E6%8C%87Offer%2004.%20%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9F%A5%E6%89%BE/"/>
    <url>/2020/10/12/%E5%89%91%E6%8C%87Offer%2004.%20%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9F%A5%E6%89%BE/</url>
    
    <content type="html"><![CDATA[<h2 id="剑指-Offer-04-二维数组中的查找"><a href="#剑指-Offer-04-二维数组中的查找" class="headerlink" title="剑指 Offer 04. 二维数组中的查找"></a>剑指 Offer 04. 二维数组中的查找</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p><a href="https://leetcode-cn.com/problems/shu-zu-zhong-zhong-fu-de-shu-zi-lcof/">剑指 Offer 04. 二维数组中的查找</a></p><p><strong>难度:</strong><font color="green">简单</font></p><p><strong>描述</strong></p><p>在一个 n * m 的二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p><p><strong>示例</strong></p><p>现有矩阵 matrix 如下：</p><pre><code class="hljs C++">[  [<span class="hljs-number">1</span>,   <span class="hljs-number">4</span>,  <span class="hljs-number">7</span>, <span class="hljs-number">11</span>, <span class="hljs-number">15</span>],  [<span class="hljs-number">2</span>,   <span class="hljs-number">5</span>,  <span class="hljs-number">8</span>, <span class="hljs-number">12</span>, <span class="hljs-number">19</span>],  [<span class="hljs-number">3</span>,   <span class="hljs-number">6</span>,  <span class="hljs-number">9</span>, <span class="hljs-number">16</span>, <span class="hljs-number">22</span>],  [<span class="hljs-number">10</span>, <span class="hljs-number">13</span>, <span class="hljs-number">14</span>, <span class="hljs-number">17</span>, <span class="hljs-number">24</span>],  [<span class="hljs-number">18</span>, <span class="hljs-number">21</span>, <span class="hljs-number">23</span>, <span class="hljs-number">26</span>, <span class="hljs-number">30</span>]]给定 target = <span class="hljs-number">5</span>，返回 <span class="hljs-literal">true</span>。给定 target = <span class="hljs-number">20</span>，返回 <span class="hljs-literal">false</span>。函数签名:<span class="hljs-keyword">bool</span> findNumberIn2DArray(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&gt;&amp; matrix, <span class="hljs-keyword">int</span> target)</code></pre><h3 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h3><p>第一种思路是类似暴力法，因为二维数组每一个维度都是从 <code>index = 0</code> 到 <code>index = size()-1</code> 升序，因此我们可以找到两个边界，缩小遍历的空间大小。</p><p>我们只需要两次循环找到边界，再用找到的边界二层循环去寻找 <code>target</code>。</p><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">findNumberIn2DArray</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&gt;&amp; matrix, <span class="hljs-keyword">int</span> target)</span> </span>&#123;    <span class="hljs-keyword">if</span>(matrix.size() == <span class="hljs-number">0</span> || matrix[<span class="hljs-number">0</span>].size() == <span class="hljs-number">0</span>)  <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>; <span class="hljs-comment">//边界</span>    <span class="hljs-keyword">int</span> s_m,s_n; <span class="hljs-comment">//每一个维度的边界</span>    <span class="hljs-keyword">int</span> size_0 = matrix.size();    <span class="hljs-keyword">int</span> size_1 = matrix[<span class="hljs-number">0</span>].size();    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i =<span class="hljs-number">0</span>;i&lt;size_0;++i) <span class="hljs-comment">//找到纵向的边界</span>        <span class="hljs-keyword">if</span>(matrix[i][<span class="hljs-number">0</span>] &gt; target)&#123;            s_m = i;            <span class="hljs-keyword">break</span>;&#125;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; size_1; ++ j) <span class="hljs-comment">//找到横向的边界</span>        <span class="hljs-keyword">if</span>(matrix[<span class="hljs-number">0</span>][j] &gt; target)&#123;            s_n = j;            <span class="hljs-keyword">break</span>;&#125;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;s_m;++i) <span class="hljs-comment">//缩小遍历空间大小</span>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;s_n;++j)            <span class="hljs-keyword">if</span>(matrix[i][j] == target)                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;&#125;</code></pre><p>时间复杂度 : <code>O(N*M)</code> 空间复杂度 : <code>O(1)</code> 。但是，如果二维数组特别大，这么做应该还是能够有效减少遍历次数的。</p><h3 id="解法二"><a href="#解法二" class="headerlink" title="解法二"></a>解法二</h3><p>第二种思路是类似于二叉搜索树。</p><p>我们只需要遍历一次数组，每一次先判定当前元素是否出现过(在集合中)，如果没有出现过加入到集合中，如果出现过就直接返回这个元素值即可。</p><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">findNumberIn2DArray</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&gt;&amp; matrix, <span class="hljs-keyword">int</span> target)</span> </span>&#123;        <span class="hljs-keyword">if</span>(matrix.size() == <span class="hljs-number">0</span> || matrix[<span class="hljs-number">0</span>].size() == <span class="hljs-number">0</span>)  <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;        <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;        <span class="hljs-keyword">int</span> j = matrix[<span class="hljs-number">0</span>].size() - <span class="hljs-number">1</span>;        <span class="hljs-keyword">while</span>( i &lt; matrix.size() &amp;&amp; j &gt;= <span class="hljs-number">0</span> )&#123;            <span class="hljs-comment">// 站在右上角,把数组看成二叉搜索树</span>            <span class="hljs-keyword">if</span>(matrix[i][j] == target)                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(matrix[i][j] &gt; target)                j--;<span class="hljs-comment">// 1</span>            <span class="hljs-keyword">else</span>                i++;        &#125;        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;    &#125;</code></pre><pre><code class="hljs C++"><span class="hljs-comment">// 1 : 这里不需要给i置零</span><span class="hljs-comment">// 比如我们要找14,我们11的时候要i++,12的时候i++,16的时候j--,但是target已经大于12了，必不需要从7开始重新判断</span></code></pre><p>可以发现这一种解法一步到位，但是也类似于第一种方法，只是我们的起点设计的比较巧妙，能够通过索引 <code>i</code> <code>j</code> 的一定规律的移动就能找到 <code>target</code> 是否存在。</p><p>时间复杂度 : <code>O(N+M)</code> , 空间复杂度 :  <code>O(1)</code>。 </p>]]></content>
    
    
    <categories>
      
      <category>Leetcode</category>
      
      <category>剑指 Offer 专题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Leetcode</tag>
      
      <tag>简单</tag>
      
      <tag>数组</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>剑指 Offer 05. 替换空格</title>
    <link href="/2020/10/12/%E5%89%91%E6%8C%87%20Offer%2005.%20%E6%9B%BF%E6%8D%A2%E7%A9%BA%E6%A0%BC/"/>
    <url>/2020/10/12/%E5%89%91%E6%8C%87%20Offer%2005.%20%E6%9B%BF%E6%8D%A2%E7%A9%BA%E6%A0%BC/</url>
    
    <content type="html"><![CDATA[<h2 id="剑指-Offer-05-替换空格"><a href="#剑指-Offer-05-替换空格" class="headerlink" title="剑指 Offer 05. 替换空格"></a>剑指 Offer 05. 替换空格</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p><a href="https://leetcode-cn.com/problems/ti-huan-kong-ge-lcof/">剑指 Offer 05. 替换空格</a></p><p><strong>难度:</strong><font color="green">简单</font></p><p><strong>描述</strong></p><p>请实现一个函数，把字符串 <code>s</code> 中的每个空格替换成”%20”。</p><p><strong>示例</strong></p><p>现有矩阵 matrix 如下：</p><pre><code class="hljs C++">输入：s = <span class="hljs-string">&quot;We are happy.&quot;</span>输出：<span class="hljs-string">&quot;We%20are%20happy.&quot;</span>    限制：<span class="hljs-number">0</span> &lt;= s 的长度 &lt;= <span class="hljs-number">10000</span>函数签名:<span class="hljs-built_in">string</span> replaceSpace(<span class="hljs-built_in">string</span> s)</code></pre><h3 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h3><p>第一种思路是创建一个新的空字符串，遍历原字符串，判断当前字符是否是空格，如果是空格，新串 <code>+= &quot;%20&quot;</code> 如果不是空格，新串加 <code>+= 当前字符</code></p><p>代码过于简单，就不展示啦。</p><p>时间复杂度 : <code>O(N)</code> 空间复杂度 : <code>O(N)</code> 。</p><h3 id="解法二"><a href="#解法二" class="headerlink" title="解法二"></a>解法二</h3><p>第二种思路是原地调整字符串大小，直接将<code>&quot;%20&quot;</code>加入到原字符串中。</p><p>我们需要遍历一次数组，统计空格字符出现的次数，那么调整后的字符串大小应该等于<code>old_size + 2*space_num</code> 。</p><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-built_in">string</span> <span class="hljs-title">replaceSpace</span><span class="hljs-params">(<span class="hljs-built_in">string</span> s)</span> </span>&#123;        <span class="hljs-keyword">int</span> space_num = <span class="hljs-number">0</span>;        <span class="hljs-keyword">int</span> size_old = s.size(); <span class="hljs-comment">//旧串大小</span>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">char</span> c:s)            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">isspace</span>(c))                space_num++;        <span class="hljs-keyword">int</span> size_new = size_old + <span class="hljs-number">2</span> * space_num; <span class="hljs-comment">//新串大小</span>        s.resize(size_new);        <span class="hljs-keyword">int</span> i = size_new<span class="hljs-number">-1</span>;        <span class="hljs-keyword">int</span> j = size_old<span class="hljs-number">-1</span>;                <span class="hljs-keyword">while</span>(i != j)&#123; <span class="hljs-comment">//如果 i==j,说明再前面的字符串子串里不存在空格字符,剪枝操作</span>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">isspace</span>(s[j]))&#123;                s[i] = <span class="hljs-string">&#x27;0&#x27;</span>;                s[i<span class="hljs-number">-1</span>] = <span class="hljs-string">&#x27;2&#x27;</span>;                s[i<span class="hljs-number">-2</span>] = <span class="hljs-string">&#x27;%&#x27;</span>;                i -= <span class="hljs-number">3</span>;                j -= <span class="hljs-number">1</span>;            &#125;            <span class="hljs-keyword">else</span>&#123;                s[i] = s[j];                j--;                i--;            &#125;        &#125;        <span class="hljs-keyword">return</span> s;    &#125;</code></pre><p>时间复杂度 : <code>O(N)</code> , 空间复杂度 :  <code>O(N)</code>。 </p><p>这里的空间复杂度明显要比前一种小很多，尤其是字符串很长而空格字符很少的情况。如果形式参数是传引用的形式传递，应该采用解法一，尽量不改变传入的字符串。</p>]]></content>
    
    
    <categories>
      
      <category>Leetcode</category>
      
      <category>剑指 Offer 专题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Leetcode</tag>
      
      <tag>简单</tag>
      
      <tag>字符串</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>剑指Offer 03. 数组中重复的数字</title>
    <link href="/2020/10/11/%E5%89%91%E6%8C%87Offer%2003.%20%E6%95%B0%E7%BB%84%E4%B8%AD%E9%87%8D%E5%A4%8D%E7%9A%84%E6%95%B0%E5%AD%97/"/>
    <url>/2020/10/11/%E5%89%91%E6%8C%87Offer%2003.%20%E6%95%B0%E7%BB%84%E4%B8%AD%E9%87%8D%E5%A4%8D%E7%9A%84%E6%95%B0%E5%AD%97/</url>
    
    <content type="html"><![CDATA[<h2 id="剑指Offer-03-数组中重复的数字"><a href="#剑指Offer-03-数组中重复的数字" class="headerlink" title="剑指Offer 03. 数组中重复的数字"></a>剑指Offer 03. 数组中重复的数字</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p><a href="https://leetcode-cn.com/problems/shu-zu-zhong-zhong-fu-de-shu-zi-lcof/">剑指 Offer 03. 数组中重复的数字</a></p><p><strong>难度:</strong><font color="green">简单</font></p><p><strong>描述</strong></p><p>找出数组中重复的数字。</p><p>在一个长度为 n 的数组 nums 里的所有数字都在 0～n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字。</p><p><strong>示例</strong></p><pre><code class="hljs C++">输入:[<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">5</span>, <span class="hljs-number">3</span>]输出:<span class="hljs-number">2</span> 或 <span class="hljs-number">3</span>限制:<span class="hljs-number">2</span> &lt;= n &lt;= <span class="hljs-number">100000</span>函数签名:<span class="hljs-keyword">int</span> findRepeatNumber(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; nums)</code></pre><h3 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h3><p>第一种思路是采用暴力法。</p><p>我们只需要两层循环遍历数组，当内外层索引对应的元素值相等时，返回这个元素值即可。</p><p>时间复杂度 : <code>O(N^2)</code> 空间复杂度 : <code>O(1)</code> 。</p><h3 id="解法二"><a href="#解法二" class="headerlink" title="解法二"></a>解法二</h3><p>第二种思路是采用哈希集合。</p><p>我们只需要遍历一次数组，每一次先判定当前元素是否出现过(在集合中)，如果没有出现过加入到集合中，如果出现过就直接返回这个元素值即可。</p><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">findRepeatNumber</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; nums)</span> </span>&#123;    <span class="hljs-built_in">unordered_set</span>&lt;<span class="hljs-keyword">int</span>&gt; record; <span class="hljs-comment">//存出现过的数</span>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> num : nums)&#123;        <span class="hljs-keyword">if</span>(record.find(num) != record.end()) <span class="hljs-comment">// 找到了</span>            <span class="hljs-keyword">return</span> num;        record.insert(num);    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;&#125;</code></pre><p>因为我们在 <code>hashset</code> 中查找的时间复杂度是 <code>O(1)</code> 。</p><p>因此，时间复杂度 : <code>O(N)</code> , 空间复杂度 :  <code>O(N)</code>。 </p><h3 id="解法三"><a href="#解法三" class="headerlink" title="解法三"></a>解法三</h3><p>第三种思路是一个萝卜一个坑。剑指Offer书中解答。</p><p>因为数组中的编号是 [0, n-1]，因此每一个索引应该对应的是它的值，即<code>i == nums[i]</code> ，所以我们如果现在 <code>i != nums[i]</code> 就把当前的 <code>nums[i]</code> 放到合适的位置，进行两数交换。</p><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">findRepeatNumber</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; nums)</span> </span>&#123;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;nums.size();++i)&#123;        <span class="hljs-keyword">while</span>(nums[i] != i)&#123;            <span class="hljs-keyword">if</span>(nums[i] == nums[nums[i]]) <span class="hljs-comment">//如果交换位置的元素相等就直接找到了</span>                <span class="hljs-keyword">return</span> nums[i];            <span class="hljs-comment">//两数交换</span>            <span class="hljs-keyword">int</span> tmp = nums[i];            nums[i] = nums[tmp];            nums[tmp] = tmp;        &#125;    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;&#125;</code></pre><p>因为有题目的限制：</p><ol><li>一定有重复；</li><li>最大元素值是 <code>size()-1</code>。</li></ol><p>所以题目中的 <code>while</code> 循环一定能够退出。 </p>]]></content>
    
    
    <categories>
      
      <category>Leetcode</category>
      
      <category>剑指 Offer 专题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Leetcode</tag>
      
      <tag>哈希集合</tag>
      
      <tag>简单</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>浅析list用法/特性/实现</title>
    <link href="/2020/10/11/list-1/"/>
    <url>/2020/10/11/list-1/</url>
    
    <content type="html"><![CDATA[<h1 id="list-容器"><a href="#list-容器" class="headerlink" title="list 容器"></a>list 容器</h1><p><strong>list</strong> 在 C++ 中是一种用起来像链表的模板类。侯捷老师主要介绍的是<code>G2.9</code>和<code>G4.9</code>两个版本。我将阅读一下 <code>clang</code> 中的源码。</p><h2 id="list-结构"><a href="#list-结构" class="headerlink" title="list . 结构"></a>list . 结构</h2><p><strong>G2.9</strong> 下，<strong>list</strong> 只有一个成员变量，<code>list_node * node</code> ，是<code>list_node</code>类的指针，在32位机中占用4个字节，在64位机中占用8个字节。</p><p>而 <code>list_node</code> 类中，又有三个成员变量 :</p><ul><li><code>void * prev</code> : 指向当前节点的前驱</li><li><code>void * next</code> : 指向当前节点的后继</li><li><code>void * data</code> : 指向当前节点</li></ul><p>数据结构课程里的双向链表就是这样的一个结构，每一个节点拥有前驱后继节点且有一个数据。因此，<strong>list</strong> 容器是一个双向链表，与之对应的还有一个单向链表容器 <strong>forward_list</strong>。</p><blockquote><p>  侯捷老师提到此处设计有一个不合理的点 : <code>list_node</code> 已经接收到了模板参数，但是其内部的指针和数据的类型都是 <code>void</code> 。</p></blockquote><p>双向链表底层逻辑是一个环状链表结构，也就是说最后一个节点 <code>next</code> 的 <code>next</code> 是头结点。尾结点后还有一个节点，是为了考虑所有迭代器的区间是前闭后开。</p><p><strong>G4.9</strong> 下，<strong>list</strong> 中有两个成员变量。</p><h2 id="list-iterator"><a href="#list-iterator" class="headerlink" title="list . iterator"></a>list . iterator</h2><p>除了 <strong>array</strong> 和 <strong>vector</strong> 之外的所有容器的 <strong>iterator</strong> 必须得是一个类。因为需要重载许多运算符。</p><p><strong>list</strong> 相较于 <strong>vector</strong> 的迭代器中的 <code>++</code> 操作，就不能是简单的在内存中做偏移了，而是得去寻找 <strong>list</strong> 的下一个节点，也就是迭代器 <strong>iterator</strong> 所指节点的 <code>next</code>。</p><blockquote><p>  运算符重载中的 <code>i++</code> 和 <code>++i</code> 的声明方式</p><p>  <code>Self&amp; operator++()</code> 重载的是 <code>++i</code> 操作</p><p>  <code>Self&amp; operator++(int)</code> 重载的是 <code>i++</code> 操作，其中 <code>int</code> 是占位符</p></blockquote><h2 id="list-继承关系"><a href="#list-继承关系" class="headerlink" title="list . 继承关系"></a>list . 继承关系</h2><p>待补充</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>STL</category>
      
      <category>容器</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>STL</tag>
      
      <tag>list</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>浅析vector用法/特性/实现</title>
    <link href="/2020/10/10/vector-1/"/>
    <url>/2020/10/10/vector-1/</url>
    
    <content type="html"><![CDATA[<h1 id="vector-容器"><a href="#vector-容器" class="headerlink" title="vector 容器"></a>vector 容器</h1><p><strong>vector</strong> 原意是向量。在C++中，是一种用起来像动态数组的模板类。在不同的编译器中，<strong>vector</strong> 的实现都不尽相同，侯捷老师主要介绍的是<code>G2.9</code>和<code>G4.9</code>两个版本。</p><pre><code class="hljs C++"><span class="hljs-comment">//G2.9中 vector类的声明</span><span class="hljs-keyword">template</span>&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> _<span class="hljs-title">Tp</span>, <span class="hljs-title">class</span> _<span class="hljs-title">alloc</span>&gt;</span><span class="hljs-class"><span class="hljs-title">class</span> <span class="hljs-title">vector</span>&#123;</span>...<span class="hljs-keyword">protected</span>:    iterator start;    iterator finish;    iterator end_of_storage;&#125;;</code></pre><h2 id="vector-sizeof"><a href="#vector-sizeof" class="headerlink" title="vector . sizeof()"></a>vector . sizeof()</h2><p>曾经有同学试图使用 <code>sizeof()</code> 来计算 <strong>vector</strong> 对象有多少个元素，可是得到的结果都是意料之外的 ( 因为他数组可能有十多个整形变量，但是<code>sizeof()</code>得到的结果居然是 12 或者 24)。</p><p>从源码中可以看到vector的成员变量只有三个类型为 <strong>iterator</strong> 的迭代器对象，分别名为<code>start</code> , <code>finish</code> , <code>end_of_storage</code> :</p><ul><li><p><code>start</code> : 指向所有内存空间开始的地址</p></li><li><p><code>finish</code> : 指向所有内存空间使用的尾地址</p></li><li><p><code>end_of_storage</code> : 指向所有内存空间结束的尾地址</p></li></ul><p><strong>vector</strong> 对象通过三个指针管理使用的内存空间，而实际的数据并不存储在 <strong>vector</strong> 对象中。这也就是 <code>sizeof()</code> 得不到想要的数组内存大小的原因。</p><h2 id="vector-内存成长"><a href="#vector-内存成长" class="headerlink" title="vector . 内存成长"></a>vector . 内存成长</h2><p><strong>vector</strong> 我们在使用的时候都知道它是一个动态数组，那么这个动态就体现在了可以动态地插入，动态地删除。那么 <strong>vector</strong> 对象控制的内存空间应该分配多少大小才能满足动态地插入呢？</p><p>答案是未知。因为我们并不知道会动态插入多少数组，因此最好的方法是 : 内存空间动态增长。</p><p>规则 :</p><pre><code class="hljs C++"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; res; <span class="hljs-comment">//默认构造 start == finish == end_of_storage 不分配内存空间</span></code></pre><pre><code class="hljs C++"><span class="hljs-comment">// 成长方式</span><span class="hljs-keyword">else</span>&#123;  <span class="hljs-keyword">const</span> size_type old_size = size();  <span class="hljs-keyword">const</span> size_type len = old_size != <span class="hljs-number">0</span> ? <span class="hljs-number">2</span> * old_size : <span class="hljs-number">1</span>; <span class="hljs-comment">//下方第三点规则</span>&#125;</code></pre><ul><li>在 <code>res.size() == 0</code> 时，插入一个元素会使得 <code>res.size() == 1</code> 以及 <code>res.capacity() == 1</code></li><li>如果初始化的时候，赋予了它一定的内存空间，那么<code>res.size() == res.capacity() == 赋值的长度</code> </li><li>在 <code>res.size() != 0</code> 时，如果<code>res.size() == res.capacity()</code> ，那么 <code>res.capacity()</code> 呈2倍增长</li></ul><p>需要注意的是，我们在最初为 vector 的某一个对象分配了一块内存之后，内存中紧接着之后的内存可能会被其他变量使用，因此 <strong>vector</strong> 的内存成长并不会发生在原地。它的实做是 : 在另一个位置申请好 <code>capicity()</code>  两倍大小的内存之后，进行逐一拷贝(copy或move)。那么如果 <strong>vector&lt;_Tp&gt;</strong> 这里的模板参数 <code>typename _Tp</code> 如果是一个类的话，会涉及到  <code>_Tp</code> 的析构函数和拷贝构造函数或移动构造函数。</p><h2 id="vector-iterator"><a href="#vector-iterator" class="headerlink" title="vector . iterator"></a>vector . iterator</h2><p>迭代器 <strong>iterator</strong> 实际上是一种用起来像指针的类，本质上还是类，每一个迭代器都是类实例化的对象。并且，由于 <strong>vector</strong> <strong>queue</strong> <strong>list</strong> <strong>map/set</strong> 不同容器底层实现不完全相同或者有几种完全不同，因此并不能设计一种迭代器类同时满足所有容器的操作。</p><p>由于 <strong>vector</strong> 底层是内存连续的空间，因此迭代器也是最简单的。</p><pre><code class="hljs C++"><span class="hljs-comment">//G2.9</span><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>, <span class="hljs-title">class</span> <span class="hljs-title">Alloc</span> = <span class="hljs-title">alloc</span>&gt;</span><span class="hljs-class"><span class="hljs-title">class</span> <span class="hljs-title">vector</span>&#123;</span><span class="hljs-keyword">typedef</span> T value_type;    <span class="hljs-keyword">typedef</span> value_type* iterator; <span class="hljs-comment">//T*</span>&#125;;</code></pre><p>可以从源码中看到，**vector ** 的迭代器就是元素类型的指针，类型为 <code>T*</code> 。</p><pre><code class="hljs C++"><span class="hljs-comment">//xcode : clang</span><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> _<span class="hljs-title">Tp</span>, <span class="hljs-title">class</span> _<span class="hljs-title">Allocator</span>&gt;</span><span class="hljs-class"><span class="hljs-title">class</span> __<span class="hljs-title">vector_base</span> :</span> <span class="hljs-keyword">protected</span> __vector_base_common&lt;<span class="hljs-literal">true</span>&gt;&#123;    <span class="hljs-keyword">public</span>:        <span class="hljs-keyword">typedef</span> _Allocator                               allocator_type;        <span class="hljs-keyword">typedef</span> allocator_traits&lt;allocator_type&gt;         __alloc_traits;        <span class="hljs-keyword">typedef</span> <span class="hljs-keyword">typename</span> __alloc_traits::size_type       size_type;    <span class="hljs-keyword">protected</span>:        <span class="hljs-keyword">typedef</span> _Tp                                      value_type;        <span class="hljs-keyword">typedef</span> value_type&amp;                              reference;        <span class="hljs-keyword">typedef</span> <span class="hljs-keyword">const</span> value_type&amp;                        const_reference;        <span class="hljs-keyword">typedef</span> <span class="hljs-keyword">typename</span> __alloc_traits::difference_type difference_type;        <span class="hljs-keyword">typedef</span> <span class="hljs-keyword">typename</span> __alloc_traits::pointer         pointer;        <span class="hljs-keyword">typedef</span> <span class="hljs-keyword">typename</span> __alloc_traits::const_pointer   const_pointer;        <span class="hljs-keyword">typedef</span> pointer                                  iterator;        <span class="hljs-keyword">typedef</span> const_pointer                            const_iterator;    ...&#125;</code></pre><pre><code class="hljs C++"><span class="hljs-comment">// 从上面提取</span><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> _<span class="hljs-title">Tp</span>, <span class="hljs-title">class</span> _<span class="hljs-title">Allocator</span>&gt;</span><span class="hljs-class"><span class="hljs-title">typedef</span> _<span class="hljs-title">Allocator</span>                               <span class="hljs-title">allocator_type</span>;</span><span class="hljs-keyword">typedef</span> allocator_traits&lt;allocator_type&gt;         __alloc_traits;<span class="hljs-keyword">typedef</span> <span class="hljs-keyword">typename</span> __alloc_traits::pointer         pointer;<span class="hljs-keyword">typedef</span> pointer                                  iterator;<span class="hljs-comment">//因此,vector中的iterator 实际上是 allocator_traits&lt;_Allocator&gt;::pointer 类型</span><span class="hljs-comment">//而默认的 allocator 中 pointer 的定义就是 T* (T通过模板参数传递)</span></code></pre><p>从现在的 clang 中，都难以看出 <strong>iterator</strong> 实际的类型了，侯捷老师在STL源码剖析课程中多次吐槽版本迭代之后，标准库设计的越来越复杂了，也可能是我的功底仍然不够深厚，只能解析到这一步了。之后，在看完侯老师的《源码剖析》书之后，再来详细填补各种留下的坑。</p><p>迭代器的使用，迭代器类的继承，以及迭代器的操作符重载，在后续迭代器专题中整理。</p><h2 id="vector-继承关系"><a href="#vector-继承关系" class="headerlink" title="vector . 继承关系"></a>vector . 继承关系</h2><pre><code class="hljs C++"><span class="hljs-comment">/*class __vector_base_common*/</span><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">bool</span>&gt;<span class="hljs-class"><span class="hljs-keyword">class</span> __<span class="hljs-title">vector_base_common</span>&#123;</span><span class="hljs-keyword">protected</span>:    _LIBCPP_NORETURN <span class="hljs-keyword">void</span> __throw_length_error() <span class="hljs-keyword">const</span>; <span class="hljs-comment">//模板传递在函数中使用</span>    _LIBCPP_NORETURN <span class="hljs-keyword">void</span> __throw_out_of_range() <span class="hljs-keyword">const</span>; <span class="hljs-comment">//模板传递在函数中使用</span>&#125;;</code></pre><pre><code class="hljs C++"><span class="hljs-comment">/*class __vector_base*/</span><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> _<span class="hljs-title">Tp</span>, <span class="hljs-title">class</span> _<span class="hljs-title">Allocator</span>&gt;</span><span class="hljs-class"><span class="hljs-title">class</span> __<span class="hljs-title">vector_base</span> :</span> <span class="hljs-keyword">public</span> __vector_base_common&lt;<span class="hljs-literal">true</span>&gt;&#123;<span class="hljs-keyword">public</span>:    <span class="hljs-keyword">typedef</span> _Allocator                               allocator_type;    <span class="hljs-keyword">typedef</span> allocator_traits&lt;allocator_type&gt;         __alloc_traits;    <span class="hljs-keyword">typedef</span> ...<span class="hljs-keyword">protected</span>:    <span class="hljs-keyword">typedef</span> <span class="hljs-keyword">typename</span> __alloc_traits::pointer         pointer;    <span class="hljs-keyword">typedef</span> ...        <span class="hljs-comment">//成员变量定义处,注意这里的类名不是vector,是vector私有继承了这个类</span>    <span class="hljs-comment">//sizeof() = 24 （= 8 * 3）</span>    pointer __begin_;    pointer __end_;    __compressed_pair&lt;pointer,allocator_type &gt; __end_cap_; <span class="hljs-comment">//命名和G++不同,但是可以看得出说的是end_capacity</span>&#125;;</code></pre><pre><code class="hljs C++"><span class="hljs-comment">/*struct __compressed_pair_elem*/</span><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> _<span class="hljs-title">Tp</span>, <span class="hljs-title">int</span> _<span class="hljs-title">Idx</span>&gt;</span><span class="hljs-class"><span class="hljs-title">struct</span> __<span class="hljs-title">compressed_pair_elem</span>&lt;_Tp, _Idx, true&gt; :</span> <span class="hljs-keyword">private</span> _Tp&#123;&#125;</code></pre><pre><code class="hljs C++"><span class="hljs-comment">/*class __compressed_pair*/</span><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> _<span class="hljs-title">T1</span>, <span class="hljs-title">class</span> _<span class="hljs-title">T2</span>&gt;</span><span class="hljs-class"><span class="hljs-title">class</span> __<span class="hljs-title">compressed_pair</span> :</span> <span class="hljs-keyword">private</span> __compressed_pair_elem&lt;_T1, <span class="hljs-number">0</span>&gt;,                          <span class="hljs-keyword">private</span> __compressed_pair_elem&lt;_T2, <span class="hljs-number">1</span>&gt;                          &#123;&#125;</code></pre><pre><code class="hljs C++"><span class="hljs-comment">/*class vector*/</span><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> _<span class="hljs-title">Tp</span>, <span class="hljs-title">class</span> _<span class="hljs-title">Allocator</span> /* = <span class="hljs-title">allocator</span>&lt;_Tp&gt; */&gt;</span><span class="hljs-class"><span class="hljs-title">class</span> _<span class="hljs-title">LIBCPP_TEMPLATE_VIS</span> <span class="hljs-title">vector</span> :</span> <span class="hljs-keyword">private</span> __vector_base&lt;_Tp, _Allocator&gt;&#123;&#125;</code></pre><p>以上是从 <code>xcode : clang</code> 中的 <code>vector</code> 和 <code>memory</code> 头文件中找到的源码，粘贴了部分我想展示的。</p><p>并且绘制了继承关系图，如下：</p><p><img src="http://img.social/2020/10/10/8bd62073e7081.png" alt="继承图3"></p><p>可以看到，我们使用的是 <strong>vector</strong> 模板类，它的 <code>sizeof() = 24</code> ，也就是 <em>class __vector_base_common</em> 中定义的三根指针，在64位机中，指针为8字节。</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>STL</category>
      
      <category>容器</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>STL</tag>
      
      <tag>vector</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>两数之和</title>
    <link href="/2020/10/09/%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/"/>
    <url>/2020/10/09/%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/</url>
    
    <content type="html"><![CDATA[<h1 id="两数之和问题"><a href="#两数之和问题" class="headerlink" title="两数之和问题"></a>两数之和问题</h1><h2 id="两数之和"><a href="#两数之和" class="headerlink" title="两数之和"></a>两数之和</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p><a href="https://leetcode-cn.com/problems/two-sum/">Leetcode 1.两数之和</a></p><p><strong>难度:</strong><font color="green">简单</font></p><p><strong>描述</strong></p><p>给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。</p><p>* 你可以假设每种输入只会对应一个答案。但是，数组中同一个元素不能使用两遍。</p><p><strong>示例</strong></p><pre><code class="hljs C++">给定 nums = [<span class="hljs-number">2</span>, <span class="hljs-number">7</span>, <span class="hljs-number">11</span>, <span class="hljs-number">15</span>], target = <span class="hljs-number">9</span>函数签名 <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; twoSum(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; nums, <span class="hljs-keyword">int</span> target)</code></pre><h3 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h3><p>第一种思路是采用暴力法(虽然说暴力法是无法通过leetcode的,但确实是首先想到的方法)。</p><p>我们只需要两层循环遍历数组，在循环索引不相等但是之和为 <code>target</code> 的时候，返回两个索引组成的数组即可。</p><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">twoSum</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; &amp;nums, <span class="hljs-keyword">int</span> target)</span></span>&#123;    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; res; <span class="hljs-comment">// 结果</span>    <span class="hljs-keyword">if</span>(nums.empty())    <span class="hljs-keyword">return</span> res;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;nums.size()<span class="hljs-number">-1</span>;++i)&#123; <span class="hljs-comment">//为减少内存循环次数,i只循环到最大值-1</span>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=i+<span class="hljs-number">1</span>;j&lt;nums.size();++j)&#123;            <span class="hljs-keyword">if</span>(nums.at(i) + nums.at(j) == target)&#123;                res.push_back(i);                res.push_back(j);                <span class="hljs-keyword">return</span> res;            &#125;        &#125;    &#125;    <span class="hljs-keyword">return</span> res;&#125;</code></pre><p>因为数组中同一元素不能使用两遍，因此内层循环索引 <code>j</code> 只需要从 <code>i+1</code> 开始，但是注意的是 <code>i</code> 不能到达 <code>nums.size()-1</code> ，否则 <code>j</code> 会越界。所以外层判断条件得是 <code>i&lt;nums.size()-1</code>  。</p><p>时间复杂度 : <code>O(N^2)</code> 空间复杂度 : <code>O(1)</code> 。</p><h3 id="解法二"><a href="#解法二" class="headerlink" title="解法二"></a>解法二</h3><p>第二种思路是采用哈希表。</p><p>我们需要遍历一次数组，存下每一个&lt;num,index&gt;对，再逐一判断 <code>key:target-num[i]</code> 是否出现在哈希表中。</p><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">twoSum</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; &amp;nums, <span class="hljs-keyword">int</span> target)</span></span>&#123;    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; res; <span class="hljs-comment">// 结果</span>    <span class="hljs-built_in">unordered_map</span>&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt; record; <span class="hljs-comment">//&lt;数值,索引&gt;</span>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;nums.size();++i)        record[nums.at(i)] = i;    <span class="hljs-comment">// 等同于 record.insert(pair&lt;int,int&gt;(nums.at(i),i));</span>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;nums.size();++i)        <span class="hljs-keyword">if</span>(record.find(target-nums.at(i)) != record.end()) &#123;            <span class="hljs-comment">//找到</span>            res.push_back(i);            res.push_back(record[target - nums.at(i)]);            <span class="hljs-keyword">return</span> res;        &#125;    <span class="hljs-keyword">return</span> res;&#125;</code></pre><p>因为我们在 <code>hashmap</code> 中查找的时间复杂度是 <code>O(1)</code> 。</p><p>因此，时间复杂度 : <code>O(N)</code> , 空间复杂度 :  <code>O(N)</code>。 </p><h3 id="解法三"><a href="#解法三" class="headerlink" title="解法三"></a>解法三</h3><p>第三种思路是采用排序+双指针。</p><p>因为形式参数的<code>nums</code>是传引用，所以我们需要对传入的<code>nums</code>进行一次拷贝，在拷贝上进行排序。排序后采用双指针法，找到两个加数的索引。</p><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">twoSum</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; &amp;nums, <span class="hljs-keyword">int</span> target)</span></span>&#123;    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; res; <span class="hljs-comment">// 结果</span>    <span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">nums_cp</span><span class="hljs-params">(nums)</span></span>; <span class="hljs-comment">// 不让排序操作改变原数组</span>    sort(nums_cp.begin(),nums_cp.end());    <span class="hljs-keyword">int</span> left = <span class="hljs-number">0</span>, right = nums_cp.size() - <span class="hljs-number">1</span>;    <span class="hljs-keyword">while</span>(left &lt; right)&#123; <span class="hljs-comment">// 1</span>        <span class="hljs-keyword">int</span> sum = nums_cp.at(left) + nums_cp.at(right);        <span class="hljs-keyword">if</span>( sum == target)&#123;            res.push_back(left);            res.push_back(right);            <span class="hljs-keyword">return</span> res;        &#125;        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>( sum &gt; target)            right --;        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>( sum &lt; target)            left ++;    &#125;    <span class="hljs-keyword">return</span> res;&#125;</code></pre><p><code>注释:1</code> 不能有等号，虽然我们定义的<code>left</code> <code>right</code> 是左闭右闭区间，但是题目要求一个数不能使用两次。因此不能取相等的情况。</p><p>时间复杂度 : <code>O(NlogN+N) = O(NlogN)</code> 空间复杂度 : <code>O(N)</code> 主要是多了一份拷贝。</p><h2 id="两数之和数据结构设计"><a href="#两数之和数据结构设计" class="headerlink" title="两数之和数据结构设计"></a>两数之和数据结构设计</h2><h3 id="设计API"><a href="#设计API" class="headerlink" title="设计API"></a>设计API</h3><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TwoSum</span>&#123;</span><span class="hljs-keyword">public</span>:    <span class="hljs-comment">// 向数组中添加一个新的数 number</span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> number)</span></span>;    <span class="hljs-comment">// 查找当前数组中是否有两数之和为 value</span><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-keyword">int</span> value)</span></span>;&#125;;</code></pre><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TwoSum</span>&#123;</span><span class="hljs-keyword">private</span>:    <span class="hljs-built_in">map</span>&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt; record; <span class="hljs-comment">//&lt;数值,索引&gt;</span>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> index;    <span class="hljs-keyword">public</span>:    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> number)</span></span>&#123;        record[number] = index++;    &#125;    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-keyword">int</span> value)</span></span>&#123;        <span class="hljs-comment">//采用双指针法在红黑树的map</span>        <span class="hljs-keyword">auto</span> left = record.begin();        <span class="hljs-keyword">auto</span> right = record.end();        right --;        <span class="hljs-keyword">while</span>(left != right)&#123;            <span class="hljs-keyword">int</span> sum = (*left).first + (*right).first; <span class="hljs-comment">//每一个节点是一个pair</span>            <span class="hljs-keyword">if</span>(sum == value)                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(sum &lt; value)                left ++;            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(sum &gt; value)                right --;        &#125;        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;    &#125;&#125;;<span class="hljs-keyword">int</span> TwoSum::index = <span class="hljs-number">0</span>;</code></pre><p>实现find的时候，和我们做题的时候方法略有不同。因为我们做题的时候，是有vector作为数据的支撑，我们能够在一个随机访问的内存结构里存取数据，而现在我们整个类只有record这一个map&lt;int,int&gt;类的数据和一个静态索引值，而且红黑树的迭代器遍历顺序是按照key升序的，因此我们可以采用双指针的方式来遍历。</p><p><code>class TwoSum</code> 空间复杂度 : <code>O(N)</code></p><p><code>add(int)</code> 时间复杂度 : <code>O(1)</code> </p><p><code>find(int)</code> 时间复杂度 : <code>O(N)</code> </p><h3 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h3><p>如果是一个查询次数明显对于插入次数的场景，那么我们的 <code>find()</code> 函数的效率就有点过于低下，我们会重复查询许多次。于是，我们可以把查询的结果也给存下来，记录下每一种可能的和的数值。</p><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TwoSum</span>&#123;</span><span class="hljs-keyword">private</span>:    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; nums; <span class="hljs-comment">//记录现有数组</span>    <span class="hljs-built_in">unordered_set</span>&lt;<span class="hljs-keyword">int</span>&gt; sums; <span class="hljs-comment">//记录可能的和</span>    <span class="hljs-keyword">public</span>:    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> number)</span></span>&#123;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> n:nums) <span class="hljs-comment">//每一次插入都把所有和给记录下来</span>            sums.insert(n+number);        nums.push_back(number);    &#125;    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-keyword">int</span> value)</span></span>&#123;<span class="hljs-keyword">return</span> (sums.find(value) != sums.end()); <span class="hljs-comment">//查找到value返回true</span>    &#125;&#125;;</code></pre><p><code>class TwoSum</code> 空间复杂度 : <code>O(N)</code></p><p><code>add(int)</code> 时间复杂度 : <code>O(N)</code> </p><p><code>find(int)</code> 时间复杂度 : <code>O(1)</code> </p><blockquote><p>  学习自 labuladong</p></blockquote><h2 id="三数之和"><a href="#三数之和" class="headerlink" title="三数之和"></a>三数之和</h2><h2 id="N数之和"><a href="#N数之和" class="headerlink" title="N数之和"></a>N数之和</h2>]]></content>
    
    
    <categories>
      
      <category>Leetcode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Leetcode</tag>
      
      <tag>双指针</tag>
      
      <tag>哈希表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>初识STL</title>
    <link href="/2020/10/07/%E5%88%9D%E8%AF%86STL%202/"/>
    <url>/2020/10/07/%E5%88%9D%E8%AF%86STL%202/</url>
    
    <content type="html"><![CDATA[<a id="more"></a><h1 id="STL"><a href="#STL" class="headerlink" title="STL"></a>STL</h1><p>什么是STL？STL : standard Template Library 标准模板库，STL是C++的一个重要组成部分。</p><p>STL包含了众多头文件 :</p><table><thead><tr><th>头文件名称</th><th>类型</th></tr></thead><tbody><tr><td>&lt;algorithm&gt;</td><td>算法</td></tr><tr><td>&lt;deque&gt;</td><td>容器</td></tr><tr><td>&lt;functional&gt;</td><td>仿函数</td></tr><tr><td>&lt;iterator&gt;</td><td>迭代器</td></tr><tr><td>&lt;vector&gt;</td><td>容器</td></tr><tr><td>&lt;list&gt;</td><td>容器</td></tr><tr><td>&lt;map&gt;</td><td>容器</td></tr><tr><td>&lt;memory.h&gt;</td><td>智能指针</td></tr><tr><td>&lt;numeric&gt;</td><td>数值算法</td></tr><tr><td>&lt;queue&gt;</td><td>容器</td></tr><tr><td>&lt;set&gt;</td><td>容器</td></tr><tr><td>&lt;stack&gt;</td><td>容器</td></tr><tr><td>&lt;utility&gt;</td><td>比较符 + pair</td></tr></tbody></table><p>浏览完以上这一个表格，可以简单了解到STL的组成。</p><h2 id="六大部件"><a href="#六大部件" class="headerlink" title="六大部件"></a>六大部件</h2><p>STL主要包含六个部件：</p><ul><li>容器 containers 是一个class template</li><li>分配器 allocators 是一个 class template</li><li>算法 algorithms 是一个 function template(用起来像函数)</li><li>迭代器 iterators 是一个 class template</li><li>适配器 adapters 是一个 class template</li><li>仿函数 functors 是一个 class template</li></ul><h3 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h3><h4 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h4><p>容器是数据的承载，容器的设计使得我们”看不到”内存</p><h4 id="分配器"><a href="#分配器" class="headerlink" title="分配器"></a>分配器</h4><p>分配器为容器分配内存回收内存，使得我们不需要插手容器的内存管理</p><h4 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h4><p>算法是模板函数，独立于容器，更加泛化。(有一些容器里有同名重新处理过的函数)</p><h4 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h4><p>算法作用于容器的中介，存取数据的一种泛化指针，本质是一种用起来像指针的对象</p><h4 id="适配器"><a href="#适配器" class="headerlink" title="适配器"></a>适配器</h4><p>容器 / 仿函数 / 迭代器的转换，设计思想：适配器设计模式</p><h4 id="仿函数"><a href="#仿函数" class="headerlink" title="仿函数"></a>仿函数</h4><p>作用于容器元素的一种用起来像函数的类</p><h3 id="设计思想"><a href="#设计思想" class="headerlink" title="设计思想"></a>设计思想</h3><p>GP模板编程思想：容器与算法分开。</p><p>相对的，OO编程思想：把成员变量和成员函数封装起来。</p><h3 id="简单代码演示"><a href="#简单代码演示" class="headerlink" title="简单代码演示"></a>简单代码演示</h3><pre><code class="hljs C++">vector&lt;int,allocator&lt;int&gt;&gt; vi(ia,ia+6); //容器 分配器<span class="hljs-built_in">cout</span>&lt;&lt;count_if(vi.begin(),vi.end(),not1(bind2nd(less&lt;<span class="hljs-keyword">int</span>&gt;(),<span class="hljs-number">40</span>)));<span class="hljs-comment">//less&lt;int&gt;()原本是a和b比较，bind2nd适配器绑定第二参数,用a和40比,not1适配是变成了大于等于条件</span></code></pre><blockquote><p>  学习自 : 侯捷 STL</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>STL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>STL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>单调队列</title>
    <link href="/2020/10/07/%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97/"/>
    <url>/2020/10/07/%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97/</url>
    
    <content type="html"><![CDATA[<a id="more"></a><h1 id="单调队列"><a href="#单调队列" class="headerlink" title="单调队列"></a>单调队列</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>单调队列是一种特殊的数据结构。用来保持一个有序的队列。(无序的数据出队列)</p><p>通过适配 deque 而来。</p><h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><pre><code class="hljs c++"><span class="hljs-keyword">template</span>&lt; <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Type</span> &gt;</span><span class="hljs-class"><span class="hljs-title">class</span> <span class="hljs-title">monotonous_queue</span>&#123;</span><span class="hljs-keyword">private</span>:    <span class="hljs-built_in">deque</span>&lt;Type&gt; data; <span class="hljs-comment">//或者使用queue</span><span class="hljs-keyword">public</span>:    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">push</span><span class="hljs-params">(Type)</span></span>; <span class="hljs-comment">//尾部插入到单调队列中</span>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">pop</span><span class="hljs-params">(Type)</span></span>; <span class="hljs-comment">//从头部离开单调队列</span>    <span class="hljs-function">Type <span class="hljs-title">max</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">//返回单调队列中的最大元素</span>&#125;;</code></pre><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><pre><code class="hljs C++"><span class="hljs-keyword">template</span> &lt; <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Type</span> &gt;</span><span class="hljs-class"><span class="hljs-title">void</span> <span class="hljs-title">monotonous_queue</span>&lt;Type&gt;:</span>:push(Type n)&#123;    <span class="hljs-keyword">while</span>(!data.empty() &amp;&amp; n &gt; data.back()) <span class="hljs-comment">//保持单调队列特性，尾部比输入小的数值全部舍弃</span>        data.pop_back();    data.push_back(n);    <span class="hljs-keyword">return</span>;&#125;<span class="hljs-keyword">template</span> &lt; <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Type</span> &gt;</span><span class="hljs-class"><span class="hljs-title">void</span> <span class="hljs-title">monotonous_queue</span>&lt;Type&gt;:</span>:pop(Type n)&#123;     <span class="hljs-keyword">if</span>(!data.empty() &amp;&amp; data.front() == n) <span class="hljs-comment">//有可能在pop之前，就因为push()中的步骤pop掉</span>        data.pop_front();    <span class="hljs-keyword">return</span>;&#125;<span class="hljs-keyword">template</span> &lt; <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Type</span> &gt;</span><span class="hljs-class"><span class="hljs-title">Type</span> <span class="hljs-title">monotonous_queue</span>&lt;Type&gt;:</span>:max()&#123;    <span class="hljs-keyword">return</span> data.front();&#125;</code></pre><p>实际上单调队列这一种数据结构使用的是队列中的<code>pop_back()</code>  <code>push_back()</code> <code>pop_front()</code> <code>back()</code> <code>front()</code> 方法，queue容器中不提供 <code>pop_back()</code> 方法，因此不可以通过适配 queue 而来。</p><h2 id="Leetcode-239-滑动窗口最大值"><a href="#Leetcode-239-滑动窗口最大值" class="headerlink" title="Leetcode 239 滑动窗口最大值"></a>Leetcode 239 滑动窗口最大值</h2><p>难度:hard</p><p>链接:<a href="https://leetcode-cn.com/problems/sliding-window-maximum/">https://leetcode-cn.com/problems/sliding-window-maximum/</a></p><p>源码:</p><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">maxSlidingWindow</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; nums, <span class="hljs-keyword">int</span> k)</span> </span>&#123;    monotonous_queue&lt;<span class="hljs-keyword">int</span>&gt; mq;    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; res;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;nums.size();++i)&#123;        <span class="hljs-keyword">if</span>(i&lt;k<span class="hljs-number">-1</span>) <span class="hljs-comment">//当前滑动窗口中的元素小于k个时,直接入队</span>            mq.push(nums[i]);        <span class="hljs-keyword">else</span>&#123; <span class="hljs-comment">//入队后,输出窗口中的最大值给res,再弹出最前端为 nums[i-k+1] 的值,没有就不弹出</span>            mq.push(nums[i]);            res.push_back(mq.max());            mq.pop(nums[i-k+<span class="hljs-number">1</span>]);        &#125;    &#125;    <span class="hljs-keyword">return</span> res;&#125;</code></pre><p>时间复杂度：O(N) </p><p>空间复杂度：O(k)</p><blockquote><p>  学习自labuladong</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
      <category>队列</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>单调队列</tag>
      
      <tag>队列</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>单调栈</title>
    <link href="/2020/10/06/%E5%8D%95%E8%B0%83%E6%A0%88/"/>
    <url>/2020/10/06/%E5%8D%95%E8%B0%83%E6%A0%88/</url>
    
    <content type="html"><![CDATA[<a id="more"></a><h1 id="单调栈"><a href="#单调栈" class="headerlink" title="单调栈"></a>单调栈</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>单调栈是一种特殊的数据结构。专门用于解决一类问题叫做 Next Greater Number的问题。</p><p>性质：单调栈本身还是栈，只是每一次入栈，都会使得栈的排列有序。(其实也就是不满足有序的元素都不要)</p><p>通过适配 stack 而来。</p><h1 id="Next-Greater-Number"><a href="#Next-Greater-Number" class="headerlink" title="Next Greater Number"></a>Next Greater Number</h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>找到数组中每一个数之后最近的一个比该数大的数字(两种情况，返回索引或返回数值)</p><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">next_greater_elem</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; &amp; nums)</span></span>&#123;    <span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">res</span><span class="hljs-params">(nums.size())</span></span>; <span class="hljs-comment">//为了倒序访问,提前确定大小方便索引</span>    <span class="hljs-built_in">stack</span>&lt;<span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt;&gt; s; <span class="hljs-comment">//单调栈 : pair&lt;数字,索引&gt;</span>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=nums.size()<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">0</span>;i--)&#123;        <span class="hljs-keyword">while</span>(!s.empty() &amp;&amp; s.top().first &lt;= nums[i]) <span class="hljs-comment">//如果栈顶端的数无法满足有序性,就全弹出</span>            s.pop();        res[i] = (s.empty() == <span class="hljs-literal">true</span> ) ? <span class="hljs-number">0</span> : s.top().second-i; <span class="hljs-comment">//这里返回的是距离,也可返回索引或数值</span>        s.push(<span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt;(nums[i],i)); <span class="hljs-comment">//插入pair&lt;数字,索引&gt;</span>    &#125;    <span class="hljs-keyword">return</span> res;&#125;</code></pre><p>时间复杂度：O(N) </p><p>空间复杂度：O(N)</p><h2 id="Leetcode-相关题目"><a href="#Leetcode-相关题目" class="headerlink" title="Leetcode 相关题目"></a>Leetcode 相关题目</h2><p><a href="https://leetcode-cn.com/problems/next-greater-element-i/">496. 下一个更大元素I</a></p><p><a href="https://leetcode-cn.com/problems/next-greater-element-ii/">503.下一个更大元素II</a></p><p><a href="https://leetcode-cn.com/problems/number-of-days-in-a-month">1118.一月有多少天</a></p><blockquote><p>  学习自labuladong</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
      <category>栈</category>
      
    </categories>
    
    
    <tags>
      
      <tag>单调栈</tag>
      
      <tag>栈</tag>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>二叉树的遍历</title>
    <link href="/2020/09/25/%E4%BA%8C%E5%8F%89%E6%A0%91%E9%81%8D%E5%8E%86/"/>
    <url>/2020/09/25/%E4%BA%8C%E5%8F%89%E6%A0%91%E9%81%8D%E5%8E%86/</url>
    
    <content type="html"><![CDATA[<a id="more"></a><h1 id="二叉树遍历"><a href="#二叉树遍历" class="headerlink" title="二叉树遍历"></a>二叉树遍历</h1><blockquote><p>  博客文章主要目的是分享和记录。</p><p>  分享给需要学习的同学，记录自己学习路上的点滴。</p></blockquote><p>相信大家对于二叉树的定义以及结构，在本科《数据结构与算法》课程中或者在其他同学的博客中有所了解。在此，不在过多地回顾课本理论知识。</p><p>我们编码语言主要为C++，如下是二叉树在C++中类的表现形式，这边使用的是 struct 结构体，在C++中类和结构体的区别在于不标志 public , private 以及 protected 时, 成员变量和成员函数是 public 还是 private 以及默认的继承方式是 public 还是 private。使用 struct 的原因在于，结构体更想表达的是一种数据的组织形式，而不是ADT。</p><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">TreeNode</span> &#123;</span>  <span class="hljs-keyword">int</span> val;  TreeNode* left;  TreeNode* right;  TreeNode*(<span class="hljs-keyword">int</span> x):val(x),left(<span class="hljs-literal">nullptr</span>),right(<span class="hljs-literal">nullptr</span>)&#123;&#125;&#125;;</code></pre><p>并且配图可以更好地理解二叉树的结构。</p><img src="https://i.loli.net/2020/10/17/tFRamoSqrQC6M2n.png"><h2 id="二叉树的遍历方式"><a href="#二叉树的遍历方式" class="headerlink" title="二叉树的遍历方式"></a>二叉树的遍历方式</h2><p>在线性结构中，例如，在数组中我们采用索引值（即，地址偏移）的方式去遍历整个数组；在链表中我们采用迭代的方式去遍历整个链表。而二叉树和线性的数组和链表的最大区别在于，二叉树的每一个节点并非只有一个后继节点。因此就有了许多有趣的遍历方式。</p><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><p>按照遍历顺序可以分为三种:</p><ul><li>前序</li><li>中序</li><li>后序</li><li>层序</li></ul><p>按照遍历算法的写法可以分为：</p><ul><li>DFS（对应前中后的递归）</li><li>BFS（对应层序）</li></ul><p>还可以根据是否采用迭代写法分为：</p><ul><li>迭代</li><li>递归</li></ul><h3 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h3><h4 id="递归框架（前序中序后序框架）"><a href="#递归框架（前序中序后序框架）" class="headerlink" title="递归框架（前序中序后序框架）"></a>递归框架（前序中序后序框架）</h4><p>首先是递归，也是最简单书写的一种，其代码框架如下：</p><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">order</span><span class="hljs-params">(TreeNode * root)</span></span>&#123;  <span class="hljs-keyword">if</span>(root == <span class="hljs-literal">nullptr</span>)<span class="hljs-keyword">return</span>;  <span class="hljs-comment">// 前序</span>  order(root-&gt;left);  <span class="hljs-comment">// 中序</span>  order(root-&gt;right);  <span class="hljs-comment">// 后序</span>&#125;</code></pre><h5 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h5><p><strong>优点</strong>：递归很简单，我们只需要记住这一个代码框架就可以完成前中后序遍历；</p><p><strong>缺点</strong>：递归过程中，从根节点出发不断递归左右节点，这一些函数调用的开销发生在栈空间，使得栈空间消耗巨大，甚至可能会导致栈溢出。</p><h5 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h5><p>那么，为什么这样就可以实现遍历呢？</p><ul><li><p>递归写法必须有一个递归出口，也就是我们框架函数体内第一个语句，也就是我们递归到了叶子节点的时候，会调用 <code>order(叶子节点的左孩子)</code> 和 <code>order(叶子节点的右孩子)</code> 。那么这两个调用我们就应该停止递归了，也就是遇到了 <code>root==nullptr</code> 这个条件为 <code>true </code> ，递归返回。</p></li><li><p>那么对于任意一个非空节点来说我们需要做什么？我们无非是要做 : 访问它，访问它的左孩子，访问它的右孩子这三件事。那么既然有三件事，一定会涉及到顺序问题。这三者的顺序不同，就分出了三种访问顺序：</p><ul><li><p>前序：根-左-右</p></li><li><p>中序：左-根-右</p></li><li><p>后序：左-右-根</p><p>比如，我们要按照中序的顺序输出二叉树的节点值：</p><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">order</span><span class="hljs-params">(TreeNode* root)</span></span>&#123;    <span class="hljs-keyword">if</span>(root == <span class="hljs-literal">nullptr</span>)<span class="hljs-keyword">return</span>;    order(root-&gt;left);    <span class="hljs-comment">/*中序 begin */</span>    <span class="hljs-built_in">cout</span> &lt;&lt; root-&gt;val &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>; <span class="hljs-comment">//中序位置写执行语句,这一个区域写的root就是中序的节点</span>    <span class="hljs-comment">/*中序 end */</span>    order(root-&gt;right);&#125;;</code></pre></li></ul></li></ul><h4 id="迭代框架（前序框架-与-中序框架）"><a href="#迭代框架（前序框架-与-中序框架）" class="headerlink" title="迭代框架（前序框架 与 中序框架）"></a>迭代框架（前序框架 与 中序框架）</h4><p>迭代框架没有递归框架那么简单，既没有对前中后序以及层序的通用模板，也没有递归那么语句短小，接下来主要介绍：前序，中序，后序，层序的迭代框架（模板）。</p><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">PreOrder</span><span class="hljs-params">(TreeNode *root)</span> </span>&#123;    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; res;    <span class="hljs-keyword">if</span> (!root) <span class="hljs-keyword">return</span> res;    <span class="hljs-built_in">stack</span>&lt;TreeNode *&gt; s;    <span class="hljs-keyword">while</span> (root || !s.empty()) &#123;        <span class="hljs-keyword">if</span> (root) &#123;            s.push(root);            <span class="hljs-comment">// res.push_back(root-&gt;val);  // PreOrder</span>            root = root-&gt;left;        &#125; <span class="hljs-keyword">else</span> &#123;            root = s.top();            s.pop();            <span class="hljs-comment">// res.push_back(root-&gt;val);  // InOrder</span>            root = root-&gt;right;        &#125;    &#125;    <span class="hljs-keyword">return</span> res;&#125;</code></pre><p>代码在上方，可以看到前序和中序的框架比较相似，在不同的位置执行操作，那么它的遍历顺序就可以不同。</p><h5 id="理解-1"><a href="#理解-1" class="headerlink" title="理解"></a>理解</h5><p>前序遍历，我们总是先读根节点（或者对根节点做一系列操作），如果左孩子存在，再去访问当前根节点的左孩子，那么我们要访问当前节点的左孩子，如果我们需要之后再访问右孩子，我们岂不是无法回到那个根节点了？（树的结构不支持子节点到父节点的指针）。所以，我们需要借助一个辅助栈来存放没有访问过右节点的根节点，等我们把左子树访问完毕之后，再提出之前的根节点，来访问他的右子树。</p><p><img src="https://i.loli.net/2020/10/17/xnbAWvpwgMqLfur.jpg"></p><p>如图，我们访问了节点1，去访问了节点2，那么我们访问完节点5之后需要回到节点1，再去访问节点3，因此必须把1给保留下来，但是我们不能用单个变量来保存节点1，因为在访问过程中，访问了节点2之后，访问节点4，再之后需要通过节点2，再去访问节点5，这样又需要一个变量来保存节点2，因此再迭代过程中，这个节点记录是一个变长的，所以需要一个辅助栈。</p><h4 id="迭代框架（后序框架）"><a href="#迭代框架（后序框架）" class="headerlink" title="迭代框架（后序框架）"></a>迭代框架（后序框架）</h4><p>前序和中序遍历的迭代框架是类似的，但是后序遍历的框架截然不同。后序遍历顺序：左-右-根。我们可以看到，后序的遍历顺序和前序遍历顺序（根-左-右）类似。我们可以稍微修改前序遍历的框架，再对数组进行反转，获得后序遍历顺序。</p><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">PostOrder</span><span class="hljs-params">(TreeNode *root)</span> </span>&#123;    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; res;    <span class="hljs-keyword">if</span> (!root) <span class="hljs-keyword">return</span> res;    <span class="hljs-built_in">stack</span>&lt;TreeNode *&gt; visit;    TreeNode *cur = root;    TreeNode *pre = <span class="hljs-literal">nullptr</span>;    <span class="hljs-keyword">while</span> (cur != <span class="hljs-literal">nullptr</span> || !visit.empty()) &#123;        <span class="hljs-keyword">while</span> (cur != <span class="hljs-literal">nullptr</span>) &#123;            visit.push(cur);            cur = cur-&gt;left;        &#125;        cur = visit.top();        <span class="hljs-keyword">if</span> (cur-&gt;right == <span class="hljs-literal">nullptr</span> || cur-&gt;right == pre) &#123;            visit.pop();            res.push_back(cur-&gt;val);            pre = cur;            cur = <span class="hljs-literal">nullptr</span>;        &#125; <span class="hljs-keyword">else</span> &#123;            cur = cur-&gt;right;        &#125;    &#125;    <span class="hljs-keyword">return</span> res;&#125;</code></pre><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">PostOrder_2</span><span class="hljs-params">(TreeNode *root)</span> </span>&#123;    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; res;    <span class="hljs-keyword">if</span> (!root) <span class="hljs-keyword">return</span> res;    <span class="hljs-built_in">stack</span>&lt;TreeNode *&gt; s;    TreeNode *p = root;    <span class="hljs-keyword">while</span> (p != <span class="hljs-literal">nullptr</span> || !s.empty()) &#123;        <span class="hljs-keyword">if</span> (p != <span class="hljs-literal">nullptr</span>) &#123;            res.push_back(p-&gt;val); <span class="hljs-comment">//前序的位置</span>            s.push(p);            p = p-&gt;right; <span class="hljs-comment">//区别在于遍历顺序是 根-右-左</span>        &#125;        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(!s.empty())&#123;            p = s.top();            s.pop();            p = p-&gt;left;        &#125;    &#125;    reverse(res.begin(),res.end()); <span class="hljs-comment">//得到 根-右-左, 反转之后得到 左-右-根</span>    <span class="hljs-keyword">return</span> res;&#125;</code></pre><h5 id="理解-2"><a href="#理解-2" class="headerlink" title="理解"></a>理解</h5><p>可以看一下以上的代码：<code>PostOrder(TreeNode* root)</code> 是正常思路的后序遍历迭代写法，而 <code>PostOrder_2(TreeNode* root)</code> 是前序遍历反转的写法。个人感觉前序遍历反转的模板和前序中序模板类似，思想方式较为统一。</p><h4 id="迭代框架（层序遍历）"><a href="#迭代框架（层序遍历）" class="headerlink" title="迭代框架（层序遍历）"></a>迭代框架（层序遍历）</h4><p>层序遍历其实就是BFS的思想，遍历的顺序是按层从低到高来遍历。</p><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&gt; <span class="hljs-title">levelOrder</span><span class="hljs-params">(TreeNode* root)</span> </span>&#123;    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&gt; res;    <span class="hljs-keyword">if</span>(!root)   <span class="hljs-keyword">return</span> res;    <span class="hljs-built_in">deque</span>&lt;TreeNode*&gt; q;    q.push_back(root);    <span class="hljs-keyword">while</span>(!q.empty())&#123;        <span class="hljs-keyword">int</span> size = q.size();        res.push_back(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;());        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>;i &lt;= size;++i)&#123;            TreeNode* node = q.front();q.pop_front();            res.back().push_back(node-&gt;val);            <span class="hljs-keyword">if</span>(node-&gt;left)  q.push_back(node-&gt;left);            <span class="hljs-keyword">if</span>(node-&gt;right) q.push_back(node-&gt;right);        &#125;    &#125;    <span class="hljs-keyword">return</span> res;&#125;</code></pre><h5 id="理解-3"><a href="#理解-3" class="headerlink" title="理解"></a>理解</h5><p><img src="https://i.loli.net/2020/10/17/Ct2SP5GclqrK4VF.jpg"></p><p>层序遍历相较于前中后序来说，它访问到了当前节点的兄弟节点以后，我们无法访问前节点的孩子节点。因此，这里不同的是，需要一个辅助的队列来存放同层的节点。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>那么，二叉树的常见遍历写法都在这边啦。</p><p>递归写法因为每一个节点访问一次，所以时间复杂度为:<code>O(N)</code>，而递归需要在栈空间里开辟许多空间，平均递归的深度是logN，因此空间复杂度也是:<code>O(logN)</code>。</p><p>迭代写法因为每一个节点访问一次，所以时间复杂度为:<code>O(N)</code>，而迭代需要一个辅助栈或者辅助队列，平均的情况是把logN的节点放入栈或队列，最差的情况是把大多数节点全部放入栈或队列，因此空间复杂度也是：<code>O(logN)</code>。</p><p>而还有一个遍历写法叫做morris遍历，它能够实现空间复杂度为<code>O(1)</code>。但是写法较为复杂，准备另外再写一篇关于morris遍历的模板。</p>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
      <category>二叉树</category>
      
    </categories>
    
    
    <tags>
      
      <tag>二叉树</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
